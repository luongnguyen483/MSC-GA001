
MSC-GA001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c40  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08004e18  08004e18  00014e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ec8  08004ec8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004ec8  08004ec8  00014ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ed0  08004ed0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ed0  08004ed0  00014ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ed4  08004ed4  00014ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004ed8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d4  20000010  08004ee8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003e4  08004ee8  000203e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000165d5  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bc5  00000000  00000000  00036615  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001438  00000000  00000000  000391e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001338  00000000  00000000  0003a618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002398f  00000000  00000000  0003b950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001899f  00000000  00000000  0005f2df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc93e  00000000  00000000  00077c7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001545bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000554c  00000000  00000000  00154610  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004e00 	.word	0x08004e00

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08004e00 	.word	0x08004e00

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96e 	b.w	800050c <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468c      	mov	ip, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	f040 8083 	bne.w	800035e <__udivmoddi4+0x116>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d947      	bls.n	80002ee <__udivmoddi4+0xa6>
 800025e:	fab2 f282 	clz	r2, r2
 8000262:	b142      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000264:	f1c2 0020 	rsb	r0, r2, #32
 8000268:	fa24 f000 	lsr.w	r0, r4, r0
 800026c:	4091      	lsls	r1, r2
 800026e:	4097      	lsls	r7, r2
 8000270:	ea40 0c01 	orr.w	ip, r0, r1
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbbc f6f8 	udiv	r6, ip, r8
 8000280:	fa1f fe87 	uxth.w	lr, r7
 8000284:	fb08 c116 	mls	r1, r8, r6, ip
 8000288:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028c:	fb06 f10e 	mul.w	r1, r6, lr
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18fb      	adds	r3, r7, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295
 800029a:	f080 8119 	bcs.w	80004d0 <__udivmoddi4+0x288>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8116 	bls.w	80004d0 <__udivmoddi4+0x288>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	443b      	add	r3, r7
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002bc:	45a6      	cmp	lr, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	193c      	adds	r4, r7, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8105 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 80002ca:	45a6      	cmp	lr, r4
 80002cc:	f240 8102 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002d0:	3802      	subs	r0, #2
 80002d2:	443c      	add	r4, r7
 80002d4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d8:	eba4 040e 	sub.w	r4, r4, lr
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	b902      	cbnz	r2, 80002f2 <__udivmoddi4+0xaa>
 80002f0:	deff      	udf	#255	; 0xff
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d150      	bne.n	800039c <__udivmoddi4+0x154>
 80002fa:	1bcb      	subs	r3, r1, r7
 80002fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000300:	fa1f f887 	uxth.w	r8, r7
 8000304:	2601      	movs	r6, #1
 8000306:	fbb3 fcfe 	udiv	ip, r3, lr
 800030a:	0c21      	lsrs	r1, r4, #16
 800030c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000310:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000314:	fb08 f30c 	mul.w	r3, r8, ip
 8000318:	428b      	cmp	r3, r1
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0xe4>
 800031c:	1879      	adds	r1, r7, r1
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0xe2>
 8000324:	428b      	cmp	r3, r1
 8000326:	f200 80e9 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 800032a:	4684      	mov	ip, r0
 800032c:	1ac9      	subs	r1, r1, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1110 	mls	r1, lr, r0, r1
 8000338:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x10c>
 8000344:	193c      	adds	r4, r7, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x10a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80d9 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e7bf      	b.n	80002de <__udivmoddi4+0x96>
 800035e:	428b      	cmp	r3, r1
 8000360:	d909      	bls.n	8000376 <__udivmoddi4+0x12e>
 8000362:	2d00      	cmp	r5, #0
 8000364:	f000 80b1 	beq.w	80004ca <__udivmoddi4+0x282>
 8000368:	2600      	movs	r6, #0
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	4630      	mov	r0, r6
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	fab3 f683 	clz	r6, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d14a      	bne.n	8000414 <__udivmoddi4+0x1cc>
 800037e:	428b      	cmp	r3, r1
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0x140>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 80b8 	bhi.w	80004f8 <__udivmoddi4+0x2b0>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb61 0103 	sbc.w	r1, r1, r3
 800038e:	2001      	movs	r0, #1
 8000390:	468c      	mov	ip, r1
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0a8      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000396:	e9c5 4c00 	strd	r4, ip, [r5]
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0xa0>
 800039c:	f1c2 0320 	rsb	r3, r2, #32
 80003a0:	fa20 f603 	lsr.w	r6, r0, r3
 80003a4:	4097      	lsls	r7, r2
 80003a6:	fa01 f002 	lsl.w	r0, r1, r2
 80003aa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ae:	40d9      	lsrs	r1, r3
 80003b0:	4330      	orrs	r0, r6
 80003b2:	0c03      	lsrs	r3, r0, #16
 80003b4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b8:	fa1f f887 	uxth.w	r8, r7
 80003bc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c4:	fb06 f108 	mul.w	r1, r6, r8
 80003c8:	4299      	cmp	r1, r3
 80003ca:	fa04 f402 	lsl.w	r4, r4, r2
 80003ce:	d909      	bls.n	80003e4 <__udivmoddi4+0x19c>
 80003d0:	18fb      	adds	r3, r7, r3
 80003d2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003d6:	f080 808d 	bcs.w	80004f4 <__udivmoddi4+0x2ac>
 80003da:	4299      	cmp	r1, r3
 80003dc:	f240 808a 	bls.w	80004f4 <__udivmoddi4+0x2ac>
 80003e0:	3e02      	subs	r6, #2
 80003e2:	443b      	add	r3, r7
 80003e4:	1a5b      	subs	r3, r3, r1
 80003e6:	b281      	uxth	r1, r0
 80003e8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ec:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003f4:	fb00 f308 	mul.w	r3, r0, r8
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x1c4>
 80003fc:	1879      	adds	r1, r7, r1
 80003fe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000402:	d273      	bcs.n	80004ec <__udivmoddi4+0x2a4>
 8000404:	428b      	cmp	r3, r1
 8000406:	d971      	bls.n	80004ec <__udivmoddi4+0x2a4>
 8000408:	3802      	subs	r0, #2
 800040a:	4439      	add	r1, r7
 800040c:	1acb      	subs	r3, r1, r3
 800040e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000412:	e778      	b.n	8000306 <__udivmoddi4+0xbe>
 8000414:	f1c6 0c20 	rsb	ip, r6, #32
 8000418:	fa03 f406 	lsl.w	r4, r3, r6
 800041c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000420:	431c      	orrs	r4, r3
 8000422:	fa20 f70c 	lsr.w	r7, r0, ip
 8000426:	fa01 f306 	lsl.w	r3, r1, r6
 800042a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800042e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000432:	431f      	orrs	r7, r3
 8000434:	0c3b      	lsrs	r3, r7, #16
 8000436:	fbb1 f9fe 	udiv	r9, r1, lr
 800043a:	fa1f f884 	uxth.w	r8, r4
 800043e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000442:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000446:	fb09 fa08 	mul.w	sl, r9, r8
 800044a:	458a      	cmp	sl, r1
 800044c:	fa02 f206 	lsl.w	r2, r2, r6
 8000450:	fa00 f306 	lsl.w	r3, r0, r6
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x220>
 8000456:	1861      	adds	r1, r4, r1
 8000458:	f109 30ff 	add.w	r0, r9, #4294967295
 800045c:	d248      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 800045e:	458a      	cmp	sl, r1
 8000460:	d946      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 8000462:	f1a9 0902 	sub.w	r9, r9, #2
 8000466:	4421      	add	r1, r4
 8000468:	eba1 010a 	sub.w	r1, r1, sl
 800046c:	b2bf      	uxth	r7, r7
 800046e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000472:	fb0e 1110 	mls	r1, lr, r0, r1
 8000476:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800047a:	fb00 f808 	mul.w	r8, r0, r8
 800047e:	45b8      	cmp	r8, r7
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x24a>
 8000482:	19e7      	adds	r7, r4, r7
 8000484:	f100 31ff 	add.w	r1, r0, #4294967295
 8000488:	d22e      	bcs.n	80004e8 <__udivmoddi4+0x2a0>
 800048a:	45b8      	cmp	r8, r7
 800048c:	d92c      	bls.n	80004e8 <__udivmoddi4+0x2a0>
 800048e:	3802      	subs	r0, #2
 8000490:	4427      	add	r7, r4
 8000492:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000496:	eba7 0708 	sub.w	r7, r7, r8
 800049a:	fba0 8902 	umull	r8, r9, r0, r2
 800049e:	454f      	cmp	r7, r9
 80004a0:	46c6      	mov	lr, r8
 80004a2:	4649      	mov	r1, r9
 80004a4:	d31a      	bcc.n	80004dc <__udivmoddi4+0x294>
 80004a6:	d017      	beq.n	80004d8 <__udivmoddi4+0x290>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x27a>
 80004aa:	ebb3 020e 	subs.w	r2, r3, lr
 80004ae:	eb67 0701 	sbc.w	r7, r7, r1
 80004b2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004b6:	40f2      	lsrs	r2, r6
 80004b8:	ea4c 0202 	orr.w	r2, ip, r2
 80004bc:	40f7      	lsrs	r7, r6
 80004be:	e9c5 2700 	strd	r2, r7, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e70b      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6fd      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004d8:	4543      	cmp	r3, r8
 80004da:	d2e5      	bcs.n	80004a8 <__udivmoddi4+0x260>
 80004dc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e0:	eb69 0104 	sbc.w	r1, r9, r4
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7df      	b.n	80004a8 <__udivmoddi4+0x260>
 80004e8:	4608      	mov	r0, r1
 80004ea:	e7d2      	b.n	8000492 <__udivmoddi4+0x24a>
 80004ec:	4660      	mov	r0, ip
 80004ee:	e78d      	b.n	800040c <__udivmoddi4+0x1c4>
 80004f0:	4681      	mov	r9, r0
 80004f2:	e7b9      	b.n	8000468 <__udivmoddi4+0x220>
 80004f4:	4666      	mov	r6, ip
 80004f6:	e775      	b.n	80003e4 <__udivmoddi4+0x19c>
 80004f8:	4630      	mov	r0, r6
 80004fa:	e74a      	b.n	8000392 <__udivmoddi4+0x14a>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	4439      	add	r1, r7
 8000502:	e713      	b.n	800032c <__udivmoddi4+0xe4>
 8000504:	3802      	subs	r0, #2
 8000506:	443c      	add	r4, r7
 8000508:	e724      	b.n	8000354 <__udivmoddi4+0x10c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000512:	b091      	sub	sp, #68	; 0x44
 8000514:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000516:	f002 f80f 	bl	8002538 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051a:	f000 f863 	bl	80005e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051e:	f000 fb29 	bl	8000b74 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000522:	f000 f8cb 	bl	80006bc <MX_ADC1_Init>
  MX_I2C1_Init();
 8000526:	f000 f91b 	bl	8000760 <MX_I2C1_Init>
  MX_I2C2_Init();
 800052a:	f000 f947 	bl	80007bc <MX_I2C2_Init>
  MX_SPI1_Init();
 800052e:	f000 f973 	bl	8000818 <MX_SPI1_Init>
  MX_SPI4_Init();
 8000532:	f000 f9a7 	bl	8000884 <MX_SPI4_Init>
  MX_UART5_Init();
 8000536:	f000 fa21 	bl	800097c <MX_UART5_Init>
  MX_UART7_Init();
 800053a:	f000 fa49 	bl	80009d0 <MX_UART7_Init>
  MX_UART8_Init();
 800053e:	f000 fa71 	bl	8000a24 <MX_UART8_Init>
  MX_UART9_Init();
 8000542:	f000 fa99 	bl	8000a78 <MX_UART9_Init>
  MX_USART2_UART_Init();
 8000546:	f000 fac1 	bl	8000acc <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 800054a:	f000 fae9 	bl	8000b20 <MX_USART6_UART_Init>
  MX_TIM9_Init();
 800054e:	f000 f9cf 	bl	80008f0 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
  /*start timer 9 for PWM out for the buzzer*/
  HAL_TIM_Base_Start_IT(&htim9);
 8000552:	4820      	ldr	r0, [pc, #128]	; (80005d4 <main+0xc4>)
 8000554:	f003 fbf6 	bl	8003d44 <HAL_TIM_Base_Start_IT>
  /* Enable the main output */
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);//Buzzer
 8000558:	2104      	movs	r1, #4
 800055a:	481e      	ldr	r0, [pc, #120]	; (80005d4 <main+0xc4>)
 800055c:	f003 fcb2 	bl	8003ec4 <HAL_TIM_PWM_Start>
  /*Update the duty cycle based on the period setting from QMX ==>1000 is 4kHz frequency,
   and 50% duty cycle*/
  htim9.Init.Period = 1000-1;
 8000560:	4b1c      	ldr	r3, [pc, #112]	; (80005d4 <main+0xc4>)
 8000562:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000566:	60da      	str	r2, [r3, #12]
  htim9.Instance->CCR1 = (unsigned short) ((uint32_t) (Duty_Percent*htim9.Init.Period/100));
 8000568:	4b1b      	ldr	r3, [pc, #108]	; (80005d8 <main+0xc8>)
 800056a:	881b      	ldrh	r3, [r3, #0]
 800056c:	461a      	mov	r2, r3
 800056e:	4b19      	ldr	r3, [pc, #100]	; (80005d4 <main+0xc4>)
 8000570:	68db      	ldr	r3, [r3, #12]
 8000572:	fb03 f302 	mul.w	r3, r3, r2
 8000576:	4a19      	ldr	r2, [pc, #100]	; (80005dc <main+0xcc>)
 8000578:	fba2 2303 	umull	r2, r3, r2, r3
 800057c:	095b      	lsrs	r3, r3, #5
 800057e:	b29a      	uxth	r2, r3
 8000580:	4b14      	ldr	r3, [pc, #80]	; (80005d4 <main+0xc4>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	635a      	str	r2, [r3, #52]	; 0x34
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //update all timers
	  DoTimers();
 8000586:	f001 ff25 	bl	80023d4 <DoTimers>
	  //update all switches
	  UpdateAllSwitches();
 800058a:	f001 fbd7 	bl	8001d3c <UpdateAllSwitches>
	  /*Update all the LED data from the buffer*/
	  UpdateLEDoutputs(&RawLEDdata);
 800058e:	4814      	ldr	r0, [pc, #80]	; (80005e0 <main+0xd0>)
 8000590:	f001 faba 	bl	8001b08 <UpdateLEDoutputs>
	  //Toggle LED to test the loop continuing
	  ToggleLEDstate(&RawLEDdata,LED_STATUS_RIGHT);
 8000594:	2100      	movs	r1, #0
 8000596:	4812      	ldr	r0, [pc, #72]	; (80005e0 <main+0xd0>)
 8000598:	f001 fb3b 	bl	8001c12 <ToggleLEDstate>
	  //Run main app
	  doApplication();
 800059c:	f001 f8f6 	bl	800178c <doApplication>
	  //LCD display driver
	  doDisplay();
 80005a0:	f001 fa2c 	bl	80019fc <doDisplay>
	  /*Buzzer driver*/
	  doBeepControl();
 80005a4:	f001 f898 	bl	80016d8 <doBeepControl>
	  /*Update the buzzer out put*/
	  DoPWM_Buzzer(htim9, Duty_Percent);
 80005a8:	4b0b      	ldr	r3, [pc, #44]	; (80005d8 <main+0xc8>)
 80005aa:	881b      	ldrh	r3, [r3, #0]
 80005ac:	4e09      	ldr	r6, [pc, #36]	; (80005d4 <main+0xc4>)
 80005ae:	930e      	str	r3, [sp, #56]	; 0x38
 80005b0:	466d      	mov	r5, sp
 80005b2:	f106 0410 	add.w	r4, r6, #16
 80005b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80005c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80005ca:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80005ce:	f000 ffde 	bl	800158e <DoPWM_Buzzer>
  {
 80005d2:	e7d8      	b.n	8000586 <main+0x76>
 80005d4:	20000240 	.word	0x20000240
 80005d8:	20000004 	.word	0x20000004
 80005dc:	51eb851f 	.word	0x51eb851f
 80005e0:	200003c2 	.word	0x200003c2

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b094      	sub	sp, #80	; 0x50
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	2234      	movs	r2, #52	; 0x34
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f004 fbfc 	bl	8004df0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f8:	f107 0308 	add.w	r3, r7, #8
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000608:	2300      	movs	r3, #0
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	4b29      	ldr	r3, [pc, #164]	; (80006b4 <SystemClock_Config+0xd0>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000610:	4a28      	ldr	r2, [pc, #160]	; (80006b4 <SystemClock_Config+0xd0>)
 8000612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000616:	6413      	str	r3, [r2, #64]	; 0x40
 8000618:	4b26      	ldr	r3, [pc, #152]	; (80006b4 <SystemClock_Config+0xd0>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000624:	2300      	movs	r3, #0
 8000626:	603b      	str	r3, [r7, #0]
 8000628:	4b23      	ldr	r3, [pc, #140]	; (80006b8 <SystemClock_Config+0xd4>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a22      	ldr	r2, [pc, #136]	; (80006b8 <SystemClock_Config+0xd4>)
 800062e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000632:	6013      	str	r3, [r2, #0]
 8000634:	4b20      	ldr	r3, [pc, #128]	; (80006b8 <SystemClock_Config+0xd4>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800063c:	603b      	str	r3, [r7, #0]
 800063e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000640:	2301      	movs	r3, #1
 8000642:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000644:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000648:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064a:	2302      	movs	r3, #2
 800064c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800064e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000652:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000654:	2308      	movs	r3, #8
 8000656:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000658:	23c0      	movs	r3, #192	; 0xc0
 800065a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800065c:	2302      	movs	r3, #2
 800065e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000660:	2302      	movs	r3, #2
 8000662:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000664:	2302      	movs	r3, #2
 8000666:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000668:	f107 031c 	add.w	r3, r7, #28
 800066c:	4618      	mov	r0, r3
 800066e:	f003 f85b 	bl	8003728 <HAL_RCC_OscConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000678:	f000 fbe2 	bl	8000e40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067c:	230f      	movs	r3, #15
 800067e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000680:	2302      	movs	r3, #2
 8000682:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000688:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800068c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000692:	f107 0308 	add.w	r3, r7, #8
 8000696:	2103      	movs	r1, #3
 8000698:	4618      	mov	r0, r3
 800069a:	f002 fe21 	bl	80032e0 <HAL_RCC_ClockConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006a4:	f000 fbcc 	bl	8000e40 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80006a8:	f002 ff00 	bl	80034ac <HAL_RCC_EnableCSS>
}
 80006ac:	bf00      	nop
 80006ae:	3750      	adds	r7, #80	; 0x50
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40007000 	.word	0x40007000

080006bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006c2:	463b      	mov	r3, r7
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006ce:	4b21      	ldr	r3, [pc, #132]	; (8000754 <MX_ADC1_Init+0x98>)
 80006d0:	4a21      	ldr	r2, [pc, #132]	; (8000758 <MX_ADC1_Init+0x9c>)
 80006d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006d4:	4b1f      	ldr	r3, [pc, #124]	; (8000754 <MX_ADC1_Init+0x98>)
 80006d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006da:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006dc:	4b1d      	ldr	r3, [pc, #116]	; (8000754 <MX_ADC1_Init+0x98>)
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006e2:	4b1c      	ldr	r3, [pc, #112]	; (8000754 <MX_ADC1_Init+0x98>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006e8:	4b1a      	ldr	r3, [pc, #104]	; (8000754 <MX_ADC1_Init+0x98>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006ee:	4b19      	ldr	r3, [pc, #100]	; (8000754 <MX_ADC1_Init+0x98>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006f6:	4b17      	ldr	r3, [pc, #92]	; (8000754 <MX_ADC1_Init+0x98>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006fc:	4b15      	ldr	r3, [pc, #84]	; (8000754 <MX_ADC1_Init+0x98>)
 80006fe:	4a17      	ldr	r2, [pc, #92]	; (800075c <MX_ADC1_Init+0xa0>)
 8000700:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000702:	4b14      	ldr	r3, [pc, #80]	; (8000754 <MX_ADC1_Init+0x98>)
 8000704:	2200      	movs	r2, #0
 8000706:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000708:	4b12      	ldr	r3, [pc, #72]	; (8000754 <MX_ADC1_Init+0x98>)
 800070a:	2201      	movs	r2, #1
 800070c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800070e:	4b11      	ldr	r3, [pc, #68]	; (8000754 <MX_ADC1_Init+0x98>)
 8000710:	2200      	movs	r2, #0
 8000712:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000716:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <MX_ADC1_Init+0x98>)
 8000718:	2201      	movs	r2, #1
 800071a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800071c:	480d      	ldr	r0, [pc, #52]	; (8000754 <MX_ADC1_Init+0x98>)
 800071e:	f001 ff69 	bl	80025f4 <HAL_ADC_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000728:	f000 fb8a 	bl	8000e40 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800072c:	230a      	movs	r3, #10
 800072e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000730:	2301      	movs	r3, #1
 8000732:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000734:	2300      	movs	r3, #0
 8000736:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000738:	463b      	mov	r3, r7
 800073a:	4619      	mov	r1, r3
 800073c:	4805      	ldr	r0, [pc, #20]	; (8000754 <MX_ADC1_Init+0x98>)
 800073e:	f001 ff9d 	bl	800267c <HAL_ADC_ConfigChannel>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000748:	f000 fb7a 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800074c:	bf00      	nop
 800074e:	3710      	adds	r7, #16
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	200001a0 	.word	0x200001a0
 8000758:	40012000 	.word	0x40012000
 800075c:	0f000001 	.word	0x0f000001

08000760 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000764:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <MX_I2C1_Init+0x50>)
 8000766:	4a13      	ldr	r2, [pc, #76]	; (80007b4 <MX_I2C1_Init+0x54>)
 8000768:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <MX_I2C1_Init+0x50>)
 800076c:	4a12      	ldr	r2, [pc, #72]	; (80007b8 <MX_I2C1_Init+0x58>)
 800076e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000770:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <MX_I2C1_Init+0x50>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <MX_I2C1_Init+0x50>)
 8000778:	2200      	movs	r2, #0
 800077a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800077c:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <MX_I2C1_Init+0x50>)
 800077e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000782:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000784:	4b0a      	ldr	r3, [pc, #40]	; (80007b0 <MX_I2C1_Init+0x50>)
 8000786:	2200      	movs	r2, #0
 8000788:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800078a:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <MX_I2C1_Init+0x50>)
 800078c:	2200      	movs	r2, #0
 800078e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000790:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <MX_I2C1_Init+0x50>)
 8000792:	2200      	movs	r2, #0
 8000794:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000796:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <MX_I2C1_Init+0x50>)
 8000798:	2200      	movs	r2, #0
 800079a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800079c:	4804      	ldr	r0, [pc, #16]	; (80007b0 <MX_I2C1_Init+0x50>)
 800079e:	f002 fc5b 	bl	8003058 <HAL_I2C_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007a8:	f000 fb4a 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	200000b4 	.word	0x200000b4
 80007b4:	40005400 	.word	0x40005400
 80007b8:	000186a0 	.word	0x000186a0

080007bc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007c0:	4b12      	ldr	r3, [pc, #72]	; (800080c <MX_I2C2_Init+0x50>)
 80007c2:	4a13      	ldr	r2, [pc, #76]	; (8000810 <MX_I2C2_Init+0x54>)
 80007c4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80007c6:	4b11      	ldr	r3, [pc, #68]	; (800080c <MX_I2C2_Init+0x50>)
 80007c8:	4a12      	ldr	r2, [pc, #72]	; (8000814 <MX_I2C2_Init+0x58>)
 80007ca:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007cc:	4b0f      	ldr	r3, [pc, #60]	; (800080c <MX_I2C2_Init+0x50>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80007d2:	4b0e      	ldr	r3, [pc, #56]	; (800080c <MX_I2C2_Init+0x50>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007d8:	4b0c      	ldr	r3, [pc, #48]	; (800080c <MX_I2C2_Init+0x50>)
 80007da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007de:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007e0:	4b0a      	ldr	r3, [pc, #40]	; (800080c <MX_I2C2_Init+0x50>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_I2C2_Init+0x50>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ec:	4b07      	ldr	r3, [pc, #28]	; (800080c <MX_I2C2_Init+0x50>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007f2:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_I2C2_Init+0x50>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007f8:	4804      	ldr	r0, [pc, #16]	; (800080c <MX_I2C2_Init+0x50>)
 80007fa:	f002 fc2d 	bl	8003058 <HAL_I2C_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000804:	f000 fb1c 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20000108 	.word	0x20000108
 8000810:	40005800 	.word	0x40005800
 8000814:	000186a0 	.word	0x000186a0

08000818 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800081c:	4b17      	ldr	r3, [pc, #92]	; (800087c <MX_SPI1_Init+0x64>)
 800081e:	4a18      	ldr	r2, [pc, #96]	; (8000880 <MX_SPI1_Init+0x68>)
 8000820:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000822:	4b16      	ldr	r3, [pc, #88]	; (800087c <MX_SPI1_Init+0x64>)
 8000824:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000828:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800082a:	4b14      	ldr	r3, [pc, #80]	; (800087c <MX_SPI1_Init+0x64>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000830:	4b12      	ldr	r3, [pc, #72]	; (800087c <MX_SPI1_Init+0x64>)
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000836:	4b11      	ldr	r3, [pc, #68]	; (800087c <MX_SPI1_Init+0x64>)
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800083c:	4b0f      	ldr	r3, [pc, #60]	; (800087c <MX_SPI1_Init+0x64>)
 800083e:	2200      	movs	r2, #0
 8000840:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <MX_SPI1_Init+0x64>)
 8000844:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000848:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800084a:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_SPI1_Init+0x64>)
 800084c:	2200      	movs	r2, #0
 800084e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000850:	4b0a      	ldr	r3, [pc, #40]	; (800087c <MX_SPI1_Init+0x64>)
 8000852:	2200      	movs	r2, #0
 8000854:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000856:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_SPI1_Init+0x64>)
 8000858:	2200      	movs	r2, #0
 800085a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800085c:	4b07      	ldr	r3, [pc, #28]	; (800087c <MX_SPI1_Init+0x64>)
 800085e:	2200      	movs	r2, #0
 8000860:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000862:	4b06      	ldr	r3, [pc, #24]	; (800087c <MX_SPI1_Init+0x64>)
 8000864:	220a      	movs	r2, #10
 8000866:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000868:	4804      	ldr	r0, [pc, #16]	; (800087c <MX_SPI1_Init+0x64>)
 800086a:	f003 f9e1 	bl	8003c30 <HAL_SPI_Init>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000874:	f000 fae4 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000310 	.word	0x20000310
 8000880:	40013000 	.word	0x40013000

08000884 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000888:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <MX_SPI4_Init+0x64>)
 800088a:	4a18      	ldr	r2, [pc, #96]	; (80008ec <MX_SPI4_Init+0x68>)
 800088c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800088e:	4b16      	ldr	r3, [pc, #88]	; (80008e8 <MX_SPI4_Init+0x64>)
 8000890:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000894:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000896:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <MX_SPI4_Init+0x64>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800089c:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <MX_SPI4_Init+0x64>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008a2:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <MX_SPI4_Init+0x64>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <MX_SPI4_Init+0x64>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <MX_SPI4_Init+0x64>)
 80008b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008b4:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008b6:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <MX_SPI4_Init+0x64>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008bc:	4b0a      	ldr	r3, [pc, #40]	; (80008e8 <MX_SPI4_Init+0x64>)
 80008be:	2200      	movs	r2, #0
 80008c0:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80008c2:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_SPI4_Init+0x64>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008c8:	4b07      	ldr	r3, [pc, #28]	; (80008e8 <MX_SPI4_Init+0x64>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_SPI4_Init+0x64>)
 80008d0:	220a      	movs	r2, #10
 80008d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80008d4:	4804      	ldr	r0, [pc, #16]	; (80008e8 <MX_SPI4_Init+0x64>)
 80008d6:	f003 f9ab 	bl	8003c30 <HAL_SPI_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 80008e0:	f000 faae 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	200001e8 	.word	0x200001e8
 80008ec:	40013400 	.word	0x40013400

080008f0 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b088      	sub	sp, #32
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]
 8000904:	615a      	str	r2, [r3, #20]
 8000906:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000908:	4b1a      	ldr	r3, [pc, #104]	; (8000974 <MX_TIM9_Init+0x84>)
 800090a:	4a1b      	ldr	r2, [pc, #108]	; (8000978 <MX_TIM9_Init+0x88>)
 800090c:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 24-1;
 800090e:	4b19      	ldr	r3, [pc, #100]	; (8000974 <MX_TIM9_Init+0x84>)
 8000910:	2217      	movs	r2, #23
 8000912:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000914:	4b17      	ldr	r3, [pc, #92]	; (8000974 <MX_TIM9_Init+0x84>)
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000-1;
 800091a:	4b16      	ldr	r3, [pc, #88]	; (8000974 <MX_TIM9_Init+0x84>)
 800091c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000920:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000922:	4b14      	ldr	r3, [pc, #80]	; (8000974 <MX_TIM9_Init+0x84>)
 8000924:	2200      	movs	r2, #0
 8000926:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000928:	4b12      	ldr	r3, [pc, #72]	; (8000974 <MX_TIM9_Init+0x84>)
 800092a:	2280      	movs	r2, #128	; 0x80
 800092c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800092e:	4811      	ldr	r0, [pc, #68]	; (8000974 <MX_TIM9_Init+0x84>)
 8000930:	f003 fa78 	bl	8003e24 <HAL_TIM_PWM_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 800093a:	f000 fa81 	bl	8000e40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800093e:	2360      	movs	r3, #96	; 0x60
 8000940:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000942:	2300      	movs	r3, #0
 8000944:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800094a:	2300      	movs	r3, #0
 800094c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	2204      	movs	r2, #4
 8000952:	4619      	mov	r1, r3
 8000954:	4807      	ldr	r0, [pc, #28]	; (8000974 <MX_TIM9_Init+0x84>)
 8000956:	f003 fc85 	bl	8004264 <HAL_TIM_PWM_ConfigChannel>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8000960:	f000 fa6e 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8000964:	4803      	ldr	r0, [pc, #12]	; (8000974 <MX_TIM9_Init+0x84>)
 8000966:	f000 fc11 	bl	800118c <HAL_TIM_MspPostInit>

}
 800096a:	bf00      	nop
 800096c:	3720      	adds	r7, #32
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000240 	.word	0x20000240
 8000978:	40014000 	.word	0x40014000

0800097c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000980:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <MX_UART5_Init+0x4c>)
 8000982:	4a12      	ldr	r2, [pc, #72]	; (80009cc <MX_UART5_Init+0x50>)
 8000984:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000986:	4b10      	ldr	r3, [pc, #64]	; (80009c8 <MX_UART5_Init+0x4c>)
 8000988:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800098c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <MX_UART5_Init+0x4c>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000994:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <MX_UART5_Init+0x4c>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800099a:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <MX_UART5_Init+0x4c>)
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80009a0:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <MX_UART5_Init+0x4c>)
 80009a2:	220c      	movs	r2, #12
 80009a4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a6:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <MX_UART5_Init+0x4c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ac:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <MX_UART5_Init+0x4c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80009b2:	4805      	ldr	r0, [pc, #20]	; (80009c8 <MX_UART5_Init+0x4c>)
 80009b4:	f003 ffd3 	bl	800495e <HAL_UART_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80009be:	f000 fa3f 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	2000015c 	.word	0x2000015c
 80009cc:	40005000 	.word	0x40005000

080009d0 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80009d4:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <MX_UART7_Init+0x4c>)
 80009d6:	4a12      	ldr	r2, [pc, #72]	; (8000a20 <MX_UART7_Init+0x50>)
 80009d8:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80009da:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <MX_UART7_Init+0x4c>)
 80009dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009e0:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <MX_UART7_Init+0x4c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80009e8:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <MX_UART7_Init+0x4c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80009ee:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <MX_UART7_Init+0x4c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80009f4:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <MX_UART7_Init+0x4c>)
 80009f6:	220c      	movs	r2, #12
 80009f8:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009fa:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <MX_UART7_Init+0x4c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <MX_UART7_Init+0x4c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000a06:	4805      	ldr	r0, [pc, #20]	; (8000a1c <MX_UART7_Init+0x4c>)
 8000a08:	f003 ffa9 	bl	800495e <HAL_UART_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_UART7_Init+0x46>
  {
    Error_Handler();
 8000a12:	f000 fa15 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000070 	.word	0x20000070
 8000a20:	40007800 	.word	0x40007800

08000a24 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8000a28:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <MX_UART8_Init+0x4c>)
 8000a2a:	4a12      	ldr	r2, [pc, #72]	; (8000a74 <MX_UART8_Init+0x50>)
 8000a2c:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8000a2e:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <MX_UART8_Init+0x4c>)
 8000a30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a34:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000a36:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <MX_UART8_Init+0x4c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8000a3c:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <MX_UART8_Init+0x4c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8000a42:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <MX_UART8_Init+0x4c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000a48:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <MX_UART8_Init+0x4c>)
 8000a4a:	220c      	movs	r2, #12
 8000a4c:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a4e:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <MX_UART8_Init+0x4c>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <MX_UART8_Init+0x4c>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000a5a:	4805      	ldr	r0, [pc, #20]	; (8000a70 <MX_UART8_Init+0x4c>)
 8000a5c:	f003 ff7f 	bl	800495e <HAL_UART_Init>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_UART8_Init+0x46>
  {
    Error_Handler();
 8000a66:	f000 f9eb 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20000288 	.word	0x20000288
 8000a74:	40007c00 	.word	0x40007c00

08000a78 <MX_UART9_Init>:
  * @brief UART9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART9_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END UART9_Init 0 */

  /* USER CODE BEGIN UART9_Init 1 */

  /* USER CODE END UART9_Init 1 */
  huart9.Instance = UART9;
 8000a7c:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <MX_UART9_Init+0x4c>)
 8000a7e:	4a12      	ldr	r2, [pc, #72]	; (8000ac8 <MX_UART9_Init+0x50>)
 8000a80:	601a      	str	r2, [r3, #0]
  huart9.Init.BaudRate = 115200;
 8000a82:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <MX_UART9_Init+0x4c>)
 8000a84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a88:	605a      	str	r2, [r3, #4]
  huart9.Init.WordLength = UART_WORDLENGTH_8B;
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <MX_UART9_Init+0x4c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
  huart9.Init.StopBits = UART_STOPBITS_1;
 8000a90:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <MX_UART9_Init+0x4c>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	60da      	str	r2, [r3, #12]
  huart9.Init.Parity = UART_PARITY_NONE;
 8000a96:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <MX_UART9_Init+0x4c>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	611a      	str	r2, [r3, #16]
  huart9.Init.Mode = UART_MODE_TX_RX;
 8000a9c:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <MX_UART9_Init+0x4c>)
 8000a9e:	220c      	movs	r2, #12
 8000aa0:	615a      	str	r2, [r3, #20]
  huart9.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aa2:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <MX_UART9_Init+0x4c>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	619a      	str	r2, [r3, #24]
  huart9.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <MX_UART9_Init+0x4c>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart9) != HAL_OK)
 8000aae:	4805      	ldr	r0, [pc, #20]	; (8000ac4 <MX_UART9_Init+0x4c>)
 8000ab0:	f003 ff55 	bl	800495e <HAL_UART_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_UART9_Init+0x46>
  {
    Error_Handler();
 8000aba:	f000 f9c1 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN UART9_Init 2 */

  /* USER CODE END UART9_Init 2 */

}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	2000002c 	.word	0x2000002c
 8000ac8:	40011800 	.word	0x40011800

08000acc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ad0:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <MX_USART2_UART_Init+0x4c>)
 8000ad2:	4a12      	ldr	r2, [pc, #72]	; (8000b1c <MX_USART2_UART_Init+0x50>)
 8000ad4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ad6:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <MX_USART2_UART_Init+0x4c>)
 8000ad8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000adc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ade:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <MX_USART2_UART_Init+0x4c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <MX_USART2_UART_Init+0x4c>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aea:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <MX_USART2_UART_Init+0x4c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000af0:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <MX_USART2_UART_Init+0x4c>)
 8000af2:	220c      	movs	r2, #12
 8000af4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000af6:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <MX_USART2_UART_Init+0x4c>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <MX_USART2_UART_Init+0x4c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b02:	4805      	ldr	r0, [pc, #20]	; (8000b18 <MX_USART2_UART_Init+0x4c>)
 8000b04:	f003 ff2b 	bl	800495e <HAL_UART_Init>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b0e:	f000 f997 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000368 	.word	0x20000368
 8000b1c:	40004400 	.word	0x40004400

08000b20 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000b24:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <MX_USART6_UART_Init+0x4c>)
 8000b26:	4a12      	ldr	r2, [pc, #72]	; (8000b70 <MX_USART6_UART_Init+0x50>)
 8000b28:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000b2a:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <MX_USART6_UART_Init+0x4c>)
 8000b2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b30:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000b32:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <MX_USART6_UART_Init+0x4c>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000b38:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <MX_USART6_UART_Init+0x4c>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000b3e:	4b0b      	ldr	r3, [pc, #44]	; (8000b6c <MX_USART6_UART_Init+0x4c>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000b44:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <MX_USART6_UART_Init+0x4c>)
 8000b46:	220c      	movs	r2, #12
 8000b48:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b4a:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <MX_USART6_UART_Init+0x4c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <MX_USART6_UART_Init+0x4c>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000b56:	4805      	ldr	r0, [pc, #20]	; (8000b6c <MX_USART6_UART_Init+0x4c>)
 8000b58:	f003 ff01 	bl	800495e <HAL_UART_Init>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000b62:	f000 f96d 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	200002cc 	.word	0x200002cc
 8000b70:	40011400 	.word	0x40011400

08000b74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08c      	sub	sp, #48	; 0x30
 8000b78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7a:	f107 031c 	add.w	r3, r7, #28
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]
 8000b86:	60da      	str	r2, [r3, #12]
 8000b88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61bb      	str	r3, [r7, #24]
 8000b8e:	4ba6      	ldr	r3, [pc, #664]	; (8000e28 <MX_GPIO_Init+0x2b4>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4aa5      	ldr	r2, [pc, #660]	; (8000e28 <MX_GPIO_Init+0x2b4>)
 8000b94:	f043 0310 	orr.w	r3, r3, #16
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4ba3      	ldr	r3, [pc, #652]	; (8000e28 <MX_GPIO_Init+0x2b4>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0310 	and.w	r3, r3, #16
 8000ba2:	61bb      	str	r3, [r7, #24]
 8000ba4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	617b      	str	r3, [r7, #20]
 8000baa:	4b9f      	ldr	r3, [pc, #636]	; (8000e28 <MX_GPIO_Init+0x2b4>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	4a9e      	ldr	r2, [pc, #632]	; (8000e28 <MX_GPIO_Init+0x2b4>)
 8000bb0:	f043 0304 	orr.w	r3, r3, #4
 8000bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb6:	4b9c      	ldr	r3, [pc, #624]	; (8000e28 <MX_GPIO_Init+0x2b4>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	f003 0304 	and.w	r3, r3, #4
 8000bbe:	617b      	str	r3, [r7, #20]
 8000bc0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	613b      	str	r3, [r7, #16]
 8000bc6:	4b98      	ldr	r3, [pc, #608]	; (8000e28 <MX_GPIO_Init+0x2b4>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a97      	ldr	r2, [pc, #604]	; (8000e28 <MX_GPIO_Init+0x2b4>)
 8000bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b95      	ldr	r3, [pc, #596]	; (8000e28 <MX_GPIO_Init+0x2b4>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bda:	613b      	str	r3, [r7, #16]
 8000bdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	4b91      	ldr	r3, [pc, #580]	; (8000e28 <MX_GPIO_Init+0x2b4>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a90      	ldr	r2, [pc, #576]	; (8000e28 <MX_GPIO_Init+0x2b4>)
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b8e      	ldr	r3, [pc, #568]	; (8000e28 <MX_GPIO_Init+0x2b4>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60bb      	str	r3, [r7, #8]
 8000bfe:	4b8a      	ldr	r3, [pc, #552]	; (8000e28 <MX_GPIO_Init+0x2b4>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a89      	ldr	r2, [pc, #548]	; (8000e28 <MX_GPIO_Init+0x2b4>)
 8000c04:	f043 0302 	orr.w	r3, r3, #2
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b87      	ldr	r3, [pc, #540]	; (8000e28 <MX_GPIO_Init+0x2b4>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0302 	and.w	r3, r3, #2
 8000c12:	60bb      	str	r3, [r7, #8]
 8000c14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	607b      	str	r3, [r7, #4]
 8000c1a:	4b83      	ldr	r3, [pc, #524]	; (8000e28 <MX_GPIO_Init+0x2b4>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4a82      	ldr	r2, [pc, #520]	; (8000e28 <MX_GPIO_Init+0x2b4>)
 8000c20:	f043 0308 	orr.w	r3, r3, #8
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b80      	ldr	r3, [pc, #512]	; (8000e28 <MX_GPIO_Init+0x2b4>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0308 	and.w	r3, r3, #8
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RF_CS_Pin|RF_RESET_Pin|RF_ENA_Pin, GPIO_PIN_RESET);
 8000c32:	2200      	movs	r2, #0
 8000c34:	212c      	movs	r1, #44	; 0x2c
 8000c36:	487d      	ldr	r0, [pc, #500]	; (8000e2c <MX_GPIO_Init+0x2b8>)
 8000c38:	f002 f9f4 	bl	8003024 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, W25QXX_CS_Pin|W25QXX_RESET_Pin|GSM_EN_Pin, GPIO_PIN_RESET);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	f248 0112 	movw	r1, #32786	; 0x8012
 8000c42:	487b      	ldr	r0, [pc, #492]	; (8000e30 <MX_GPIO_Init+0x2bc>)
 8000c44:	f002 f9ee 	bl	8003024 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EM_CS_Pin|LED_STATUS_RIGHT_Pin|PSU_IO_2_Pin|PSU_IO_1_Pin, GPIO_PIN_RESET);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	f44f 6151 	mov.w	r1, #3344	; 0xd10
 8000c4e:	4879      	ldr	r0, [pc, #484]	; (8000e34 <MX_GPIO_Init+0x2c0>)
 8000c50:	f002 f9e8 	bl	8003024 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RS485_DIR_Pin|GSM_ON_OFF_Pin|LCD_RST_Pin|LCD_CLK_Pin
 8000c54:	2200      	movs	r2, #0
 8000c56:	f24c 1138 	movw	r1, #49464	; 0xc138
 8000c5a:	4877      	ldr	r0, [pc, #476]	; (8000e38 <MX_GPIO_Init+0x2c4>)
 8000c5c:	f002 f9e2 	bl	8003024 <HAL_GPIO_WritePin>
                          |LCD_SDA_Pin|EM_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SIM_RSET_Pin|LED_STATUS_LEFT_Pin|PSU_CS_Pin|RELAY_3_Pin
 8000c60:	2200      	movs	r2, #0
 8000c62:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000c66:	4875      	ldr	r0, [pc, #468]	; (8000e3c <MX_GPIO_Init+0x2c8>)
 8000c68:	f002 f9dc 	bl	8003024 <HAL_GPIO_WritePin>
                          |RELAY_2_Pin|RELAY_1_Pin|PSU_RESET_Pin|LCD_BL_Pin
                          |LCD_CS_Pin|LCD_A0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RF_CS_Pin RF_RESET_Pin RF_ENA_Pin */
  GPIO_InitStruct.Pin = RF_CS_Pin|RF_RESET_Pin|RF_ENA_Pin;
 8000c6c:	232c      	movs	r3, #44	; 0x2c
 8000c6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c70:	2301      	movs	r3, #1
 8000c72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c7c:	f107 031c 	add.w	r3, r7, #28
 8000c80:	4619      	mov	r1, r3
 8000c82:	486a      	ldr	r0, [pc, #424]	; (8000e2c <MX_GPIO_Init+0x2b8>)
 8000c84:	f002 f83a 	bl	8002cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : EM_ZX_Pin INPUT_3_Pin INPUT_2_Pin INPUT_1_Pin */
  GPIO_InitStruct.Pin = EM_ZX_Pin|INPUT_3_Pin|INPUT_2_Pin|INPUT_1_Pin;
 8000c88:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8000c8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c92:	2301      	movs	r3, #1
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c96:	f107 031c 	add.w	r3, r7, #28
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4863      	ldr	r0, [pc, #396]	; (8000e2c <MX_GPIO_Init+0x2b8>)
 8000c9e:	f002 f82d 	bl	8002cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : RF_PRESENCE_Pin BTN_ESC_Pin BAT_PGOOD_Pin */
  GPIO_InitStruct.Pin = RF_PRESENCE_Pin|BTN_ESC_Pin|BAT_PGOOD_Pin;
 8000ca2:	f44f 5348 	mov.w	r3, #12800	; 0x3200
 8000ca6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cac:	2301      	movs	r3, #1
 8000cae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb0:	f107 031c 	add.w	r3, r7, #28
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	485f      	ldr	r0, [pc, #380]	; (8000e34 <MX_GPIO_Init+0x2c0>)
 8000cb8:	f002 f820 	bl	8002cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : NC_Res_pulldown_Pin NC_Res_pulldownC15_Pin */
  GPIO_InitStruct.Pin = NC_Res_pulldown_Pin|NC_Res_pulldownC15_Pin;
 8000cbc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000cc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cca:	f107 031c 	add.w	r3, r7, #28
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4858      	ldr	r0, [pc, #352]	; (8000e34 <MX_GPIO_Init+0x2c0>)
 8000cd2:	f002 f813 	bl	8002cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PCF_INT_Pin */
  GPIO_InitStruct.Pin = PCF_INT_Pin;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cda:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PCF_INT_GPIO_Port, &GPIO_InitStruct);
 8000ce4:	f107 031c 	add.w	r3, r7, #28
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4851      	ldr	r0, [pc, #324]	; (8000e30 <MX_GPIO_Init+0x2bc>)
 8000cec:	f002 f806 	bl	8002cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : W25QXX_CS_Pin W25QXX_RESET_Pin */
  GPIO_InitStruct.Pin = W25QXX_CS_Pin|W25QXX_RESET_Pin;
 8000cf0:	2312      	movs	r3, #18
 8000cf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d00:	f107 031c 	add.w	r3, r7, #28
 8000d04:	4619      	mov	r1, r3
 8000d06:	484a      	ldr	r0, [pc, #296]	; (8000e30 <MX_GPIO_Init+0x2bc>)
 8000d08:	f001 fff8 	bl	8002cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : EM_CS_Pin LED_STATUS_RIGHT_Pin PSU_IO_2_Pin PSU_IO_1_Pin */
  GPIO_InitStruct.Pin = EM_CS_Pin|LED_STATUS_RIGHT_Pin|PSU_IO_2_Pin|PSU_IO_1_Pin;
 8000d0c:	f44f 6351 	mov.w	r3, #3344	; 0xd10
 8000d10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d12:	2301      	movs	r3, #1
 8000d14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d1e:	f107 031c 	add.w	r3, r7, #28
 8000d22:	4619      	mov	r1, r3
 8000d24:	4843      	ldr	r0, [pc, #268]	; (8000e34 <MX_GPIO_Init+0x2c0>)
 8000d26:	f001 ffe9 	bl	8002cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : RES_0_Pin RES_1_Pin RES_2_Pin */
  GPIO_InitStruct.Pin = RES_0_Pin|RES_1_Pin|RES_2_Pin;
 8000d2a:	2307      	movs	r3, #7
 8000d2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d32:	2301      	movs	r3, #1
 8000d34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d36:	f107 031c 	add.w	r3, r7, #28
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	483e      	ldr	r0, [pc, #248]	; (8000e38 <MX_GPIO_Init+0x2c4>)
 8000d3e:	f001 ffdd 	bl	8002cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : NC_Res_pulldownE15_Pin */
  GPIO_InitStruct.Pin = NC_Res_pulldownE15_Pin;
 8000d42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(NC_Res_pulldownE15_GPIO_Port, &GPIO_InitStruct);
 8000d50:	f107 031c 	add.w	r3, r7, #28
 8000d54:	4619      	mov	r1, r3
 8000d56:	4835      	ldr	r0, [pc, #212]	; (8000e2c <MX_GPIO_Init+0x2b8>)
 8000d58:	f001 ffd0 	bl	8002cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : RS485_DIR_Pin GSM_ON_OFF_Pin LCD_RST_Pin LCD_CLK_Pin
                           LCD_SDA_Pin EM_RST_Pin */
  GPIO_InitStruct.Pin = RS485_DIR_Pin|GSM_ON_OFF_Pin|LCD_RST_Pin|LCD_CLK_Pin
 8000d5c:	f24c 1338 	movw	r3, #49464	; 0xc138
 8000d60:	61fb      	str	r3, [r7, #28]
                          |LCD_SDA_Pin|EM_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d62:	2301      	movs	r3, #1
 8000d64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6e:	f107 031c 	add.w	r3, r7, #28
 8000d72:	4619      	mov	r1, r3
 8000d74:	4830      	ldr	r0, [pc, #192]	; (8000e38 <MX_GPIO_Init+0x2c4>)
 8000d76:	f001 ffc1 	bl	8002cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : SIM_RSET_Pin LED_STATUS_LEFT_Pin PSU_CS_Pin RELAY_3_Pin
                           RELAY_2_Pin RELAY_1_Pin PSU_RESET_Pin LCD_BL_Pin
                           LCD_CS_Pin LCD_A0_Pin */
  GPIO_InitStruct.Pin = SIM_RSET_Pin|LED_STATUS_LEFT_Pin|PSU_CS_Pin|RELAY_3_Pin
 8000d7a:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8000d7e:	61fb      	str	r3, [r7, #28]
                          |RELAY_2_Pin|RELAY_1_Pin|PSU_RESET_Pin|LCD_BL_Pin
                          |LCD_CS_Pin|LCD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d80:	2301      	movs	r3, #1
 8000d82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d8c:	f107 031c 	add.w	r3, r7, #28
 8000d90:	4619      	mov	r1, r3
 8000d92:	482a      	ldr	r0, [pc, #168]	; (8000e3c <MX_GPIO_Init+0x2c8>)
 8000d94:	f001 ffb2 	bl	8002cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : GSM_RI_Pin */
  GPIO_InitStruct.Pin = GSM_RI_Pin;
 8000d98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d9e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000da2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000da4:	2301      	movs	r3, #1
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GSM_RI_GPIO_Port, &GPIO_InitStruct);
 8000da8:	f107 031c 	add.w	r3, r7, #28
 8000dac:	4619      	mov	r1, r3
 8000dae:	4823      	ldr	r0, [pc, #140]	; (8000e3c <MX_GPIO_Init+0x2c8>)
 8000db0:	f001 ffa4 	bl	8002cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : SIM_STATUS_Pin GSM_PRESENCE_Pin */
  GPIO_InitStruct.Pin = SIM_STATUS_Pin|GSM_PRESENCE_Pin;
 8000db4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000db8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dc2:	f107 031c 	add.w	r3, r7, #28
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	481c      	ldr	r0, [pc, #112]	; (8000e3c <MX_GPIO_Init+0x2c8>)
 8000dca:	f001 ff97 	bl	8002cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : NC_Res_pulldownD13_Pin */
  GPIO_InitStruct.Pin = NC_Res_pulldownD13_Pin;
 8000dce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(NC_Res_pulldownD13_GPIO_Port, &GPIO_InitStruct);
 8000ddc:	f107 031c 	add.w	r3, r7, #28
 8000de0:	4619      	mov	r1, r3
 8000de2:	4816      	ldr	r0, [pc, #88]	; (8000e3c <MX_GPIO_Init+0x2c8>)
 8000de4:	f001 ff8a 	bl	8002cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_LEFT_Pin BTN_UP_Pin BTN_DOWN_Pin BTN_RIGHT_Pin
                           BTN_ENTER_Pin */
  GPIO_InitStruct.Pin = BTN_LEFT_Pin|BTN_UP_Pin|BTN_DOWN_Pin|BTN_RIGHT_Pin
 8000de8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000dec:	61fb      	str	r3, [r7, #28]
                          |BTN_ENTER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dee:	2300      	movs	r3, #0
 8000df0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000df2:	2301      	movs	r3, #1
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df6:	f107 031c 	add.w	r3, r7, #28
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	480c      	ldr	r0, [pc, #48]	; (8000e30 <MX_GPIO_Init+0x2bc>)
 8000dfe:	f001 ff7d 	bl	8002cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : GSM_EN_Pin */
  GPIO_InitStruct.Pin = GSM_EN_Pin;
 8000e02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e10:	2300      	movs	r3, #0
 8000e12:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GSM_EN_GPIO_Port, &GPIO_InitStruct);
 8000e14:	f107 031c 	add.w	r3, r7, #28
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4805      	ldr	r0, [pc, #20]	; (8000e30 <MX_GPIO_Init+0x2bc>)
 8000e1c:	f001 ff6e 	bl	8002cfc <HAL_GPIO_Init>

}
 8000e20:	bf00      	nop
 8000e22:	3730      	adds	r7, #48	; 0x30
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	40020000 	.word	0x40020000
 8000e34:	40020800 	.word	0x40020800
 8000e38:	40020400 	.word	0x40020400
 8000e3c:	40020c00 	.word	0x40020c00

08000e40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e44:	b672      	cpsid	i
}
 8000e46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e48:	e7fe      	b.n	8000e48 <Error_Handler+0x8>
	...

08000e4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	607b      	str	r3, [r7, #4]
 8000e56:	4b10      	ldr	r3, [pc, #64]	; (8000e98 <HAL_MspInit+0x4c>)
 8000e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5a:	4a0f      	ldr	r2, [pc, #60]	; (8000e98 <HAL_MspInit+0x4c>)
 8000e5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e60:	6453      	str	r3, [r2, #68]	; 0x44
 8000e62:	4b0d      	ldr	r3, [pc, #52]	; (8000e98 <HAL_MspInit+0x4c>)
 8000e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	603b      	str	r3, [r7, #0]
 8000e72:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <HAL_MspInit+0x4c>)
 8000e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e76:	4a08      	ldr	r2, [pc, #32]	; (8000e98 <HAL_MspInit+0x4c>)
 8000e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e7e:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <HAL_MspInit+0x4c>)
 8000e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e86:	603b      	str	r3, [r7, #0]
 8000e88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	40023800 	.word	0x40023800

08000e9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b08a      	sub	sp, #40	; 0x28
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea4:	f107 0314 	add.w	r3, r7, #20
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a17      	ldr	r2, [pc, #92]	; (8000f18 <HAL_ADC_MspInit+0x7c>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d127      	bne.n	8000f0e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	613b      	str	r3, [r7, #16]
 8000ec2:	4b16      	ldr	r3, [pc, #88]	; (8000f1c <HAL_ADC_MspInit+0x80>)
 8000ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec6:	4a15      	ldr	r2, [pc, #84]	; (8000f1c <HAL_ADC_MspInit+0x80>)
 8000ec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ecc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ece:	4b13      	ldr	r3, [pc, #76]	; (8000f1c <HAL_ADC_MspInit+0x80>)
 8000ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ed6:	613b      	str	r3, [r7, #16]
 8000ed8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <HAL_ADC_MspInit+0x80>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	4a0e      	ldr	r2, [pc, #56]	; (8000f1c <HAL_ADC_MspInit+0x80>)
 8000ee4:	f043 0304 	orr.w	r3, r3, #4
 8000ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eea:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <HAL_ADC_MspInit+0x80>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	f003 0304 	and.w	r3, r3, #4
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = FB_4V4_Pin|TEMP_SENSOR_Pin|FB_CR2032_Pin|FB_VDD_Pin
 8000ef6:	232f      	movs	r3, #47	; 0x2f
 8000ef8:	617b      	str	r3, [r7, #20]
                          |FB_VBAT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000efa:	2303      	movs	r3, #3
 8000efc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f02:	f107 0314 	add.w	r3, r7, #20
 8000f06:	4619      	mov	r1, r3
 8000f08:	4805      	ldr	r0, [pc, #20]	; (8000f20 <HAL_ADC_MspInit+0x84>)
 8000f0a:	f001 fef7 	bl	8002cfc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f0e:	bf00      	nop
 8000f10:	3728      	adds	r7, #40	; 0x28
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40012000 	.word	0x40012000
 8000f1c:	40023800 	.word	0x40023800
 8000f20:	40020800 	.word	0x40020800

08000f24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08c      	sub	sp, #48	; 0x30
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2c:	f107 031c 	add.w	r3, r7, #28
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a3b      	ldr	r2, [pc, #236]	; (8001030 <HAL_I2C_MspInit+0x10c>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d12c      	bne.n	8000fa0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	61bb      	str	r3, [r7, #24]
 8000f4a:	4b3a      	ldr	r3, [pc, #232]	; (8001034 <HAL_I2C_MspInit+0x110>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a39      	ldr	r2, [pc, #228]	; (8001034 <HAL_I2C_MspInit+0x110>)
 8000f50:	f043 0302 	orr.w	r3, r3, #2
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b37      	ldr	r3, [pc, #220]	; (8001034 <HAL_I2C_MspInit+0x110>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f003 0302 	and.w	r3, r3, #2
 8000f5e:	61bb      	str	r3, [r7, #24]
 8000f60:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f62:	23c0      	movs	r3, #192	; 0xc0
 8000f64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f66:	2312      	movs	r3, #18
 8000f68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f72:	2304      	movs	r3, #4
 8000f74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f76:	f107 031c 	add.w	r3, r7, #28
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	482e      	ldr	r0, [pc, #184]	; (8001038 <HAL_I2C_MspInit+0x114>)
 8000f7e:	f001 febd 	bl	8002cfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	617b      	str	r3, [r7, #20]
 8000f86:	4b2b      	ldr	r3, [pc, #172]	; (8001034 <HAL_I2C_MspInit+0x110>)
 8000f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8a:	4a2a      	ldr	r2, [pc, #168]	; (8001034 <HAL_I2C_MspInit+0x110>)
 8000f8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f90:	6413      	str	r3, [r2, #64]	; 0x40
 8000f92:	4b28      	ldr	r3, [pc, #160]	; (8001034 <HAL_I2C_MspInit+0x110>)
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f9a:	617b      	str	r3, [r7, #20]
 8000f9c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000f9e:	e042      	b.n	8001026 <HAL_I2C_MspInit+0x102>
  else if(hi2c->Instance==I2C2)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a25      	ldr	r2, [pc, #148]	; (800103c <HAL_I2C_MspInit+0x118>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d13d      	bne.n	8001026 <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
 8000fae:	4b21      	ldr	r3, [pc, #132]	; (8001034 <HAL_I2C_MspInit+0x110>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a20      	ldr	r2, [pc, #128]	; (8001034 <HAL_I2C_MspInit+0x110>)
 8000fb4:	f043 0302 	orr.w	r3, r3, #2
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b1e      	ldr	r3, [pc, #120]	; (8001034 <HAL_I2C_MspInit+0x110>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0302 	and.w	r3, r3, #2
 8000fc2:	613b      	str	r3, [r7, #16]
 8000fc4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fcc:	2312      	movs	r3, #18
 8000fce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000fd8:	2304      	movs	r3, #4
 8000fda:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fdc:	f107 031c 	add.w	r3, r7, #28
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4815      	ldr	r0, [pc, #84]	; (8001038 <HAL_I2C_MspInit+0x114>)
 8000fe4:	f001 fe8a 	bl	8002cfc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fe8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fee:	2312      	movs	r3, #18
 8000ff0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000ffa:	2309      	movs	r3, #9
 8000ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffe:	f107 031c 	add.w	r3, r7, #28
 8001002:	4619      	mov	r1, r3
 8001004:	480c      	ldr	r0, [pc, #48]	; (8001038 <HAL_I2C_MspInit+0x114>)
 8001006:	f001 fe79 	bl	8002cfc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	4b09      	ldr	r3, [pc, #36]	; (8001034 <HAL_I2C_MspInit+0x110>)
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	4a08      	ldr	r2, [pc, #32]	; (8001034 <HAL_I2C_MspInit+0x110>)
 8001014:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001018:	6413      	str	r3, [r2, #64]	; 0x40
 800101a:	4b06      	ldr	r3, [pc, #24]	; (8001034 <HAL_I2C_MspInit+0x110>)
 800101c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
}
 8001026:	bf00      	nop
 8001028:	3730      	adds	r7, #48	; 0x30
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40005400 	.word	0x40005400
 8001034:	40023800 	.word	0x40023800
 8001038:	40020400 	.word	0x40020400
 800103c:	40005800 	.word	0x40005800

08001040 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08c      	sub	sp, #48	; 0x30
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	f107 031c 	add.w	r3, r7, #28
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a32      	ldr	r2, [pc, #200]	; (8001128 <HAL_SPI_MspInit+0xe8>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d12c      	bne.n	80010bc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	61bb      	str	r3, [r7, #24]
 8001066:	4b31      	ldr	r3, [pc, #196]	; (800112c <HAL_SPI_MspInit+0xec>)
 8001068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106a:	4a30      	ldr	r2, [pc, #192]	; (800112c <HAL_SPI_MspInit+0xec>)
 800106c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001070:	6453      	str	r3, [r2, #68]	; 0x44
 8001072:	4b2e      	ldr	r3, [pc, #184]	; (800112c <HAL_SPI_MspInit+0xec>)
 8001074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001076:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800107a:	61bb      	str	r3, [r7, #24]
 800107c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]
 8001082:	4b2a      	ldr	r3, [pc, #168]	; (800112c <HAL_SPI_MspInit+0xec>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a29      	ldr	r2, [pc, #164]	; (800112c <HAL_SPI_MspInit+0xec>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b27      	ldr	r3, [pc, #156]	; (800112c <HAL_SPI_MspInit+0xec>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	617b      	str	r3, [r7, #20]
 8001098:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800109a:	23e0      	movs	r3, #224	; 0xe0
 800109c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109e:	2302      	movs	r3, #2
 80010a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a6:	2303      	movs	r3, #3
 80010a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010aa:	2305      	movs	r3, #5
 80010ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ae:	f107 031c 	add.w	r3, r7, #28
 80010b2:	4619      	mov	r1, r3
 80010b4:	481e      	ldr	r0, [pc, #120]	; (8001130 <HAL_SPI_MspInit+0xf0>)
 80010b6:	f001 fe21 	bl	8002cfc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80010ba:	e031      	b.n	8001120 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI4)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a1c      	ldr	r2, [pc, #112]	; (8001134 <HAL_SPI_MspInit+0xf4>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d12c      	bne.n	8001120 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	613b      	str	r3, [r7, #16]
 80010ca:	4b18      	ldr	r3, [pc, #96]	; (800112c <HAL_SPI_MspInit+0xec>)
 80010cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ce:	4a17      	ldr	r2, [pc, #92]	; (800112c <HAL_SPI_MspInit+0xec>)
 80010d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010d4:	6453      	str	r3, [r2, #68]	; 0x44
 80010d6:	4b15      	ldr	r3, [pc, #84]	; (800112c <HAL_SPI_MspInit+0xec>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010de:	613b      	str	r3, [r7, #16]
 80010e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	4b11      	ldr	r3, [pc, #68]	; (800112c <HAL_SPI_MspInit+0xec>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	4a10      	ldr	r2, [pc, #64]	; (800112c <HAL_SPI_MspInit+0xec>)
 80010ec:	f043 0310 	orr.w	r3, r3, #16
 80010f0:	6313      	str	r3, [r2, #48]	; 0x30
 80010f2:	4b0e      	ldr	r3, [pc, #56]	; (800112c <HAL_SPI_MspInit+0xec>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	f003 0310 	and.w	r3, r3, #16
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RF_SCK_Pin|RF_MISO_Pin|RF_MOSI_Pin;
 80010fe:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001102:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001104:	2302      	movs	r3, #2
 8001106:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110c:	2303      	movs	r3, #3
 800110e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001110:	2305      	movs	r3, #5
 8001112:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001114:	f107 031c 	add.w	r3, r7, #28
 8001118:	4619      	mov	r1, r3
 800111a:	4807      	ldr	r0, [pc, #28]	; (8001138 <HAL_SPI_MspInit+0xf8>)
 800111c:	f001 fdee 	bl	8002cfc <HAL_GPIO_Init>
}
 8001120:	bf00      	nop
 8001122:	3730      	adds	r7, #48	; 0x30
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40013000 	.word	0x40013000
 800112c:	40023800 	.word	0x40023800
 8001130:	40020000 	.word	0x40020000
 8001134:	40013400 	.word	0x40013400
 8001138:	40021000 	.word	0x40021000

0800113c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM9)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a0e      	ldr	r2, [pc, #56]	; (8001184 <HAL_TIM_PWM_MspInit+0x48>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d115      	bne.n	800117a <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	4b0d      	ldr	r3, [pc, #52]	; (8001188 <HAL_TIM_PWM_MspInit+0x4c>)
 8001154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001156:	4a0c      	ldr	r2, [pc, #48]	; (8001188 <HAL_TIM_PWM_MspInit+0x4c>)
 8001158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800115c:	6453      	str	r3, [r2, #68]	; 0x44
 800115e:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <HAL_TIM_PWM_MspInit+0x4c>)
 8001160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001162:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800116a:	2200      	movs	r2, #0
 800116c:	2100      	movs	r1, #0
 800116e:	2018      	movs	r0, #24
 8001170:	f001 fd8d 	bl	8002c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001174:	2018      	movs	r0, #24
 8001176:	f001 fda6 	bl	8002cc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 800117a:	bf00      	nop
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40014000 	.word	0x40014000
 8001188:	40023800 	.word	0x40023800

0800118c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b088      	sub	sp, #32
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001194:	f107 030c 	add.w	r3, r7, #12
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM9)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a12      	ldr	r2, [pc, #72]	; (80011f4 <HAL_TIM_MspPostInit+0x68>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d11d      	bne.n	80011ea <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	60bb      	str	r3, [r7, #8]
 80011b2:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <HAL_TIM_MspPostInit+0x6c>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a10      	ldr	r2, [pc, #64]	; (80011f8 <HAL_TIM_MspPostInit+0x6c>)
 80011b8:	f043 0310 	orr.w	r3, r3, #16
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <HAL_TIM_MspPostInit+0x6c>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0310 	and.w	r3, r3, #16
 80011c6:	60bb      	str	r3, [r7, #8]
 80011c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM9 GPIO Configuration
    PE6     ------> TIM9_CH2
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 80011ca:	2340      	movs	r3, #64	; 0x40
 80011cc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ce:	2302      	movs	r3, #2
 80011d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80011da:	2303      	movs	r3, #3
 80011dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 80011de:	f107 030c 	add.w	r3, r7, #12
 80011e2:	4619      	mov	r1, r3
 80011e4:	4805      	ldr	r0, [pc, #20]	; (80011fc <HAL_TIM_MspPostInit+0x70>)
 80011e6:	f001 fd89 	bl	8002cfc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 80011ea:	bf00      	nop
 80011ec:	3720      	adds	r7, #32
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40014000 	.word	0x40014000
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40021000 	.word	0x40021000

08001200 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b094      	sub	sp, #80	; 0x50
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a97      	ldr	r2, [pc, #604]	; (800147c <HAL_UART_MspInit+0x27c>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d12d      	bne.n	800127e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	63bb      	str	r3, [r7, #56]	; 0x38
 8001226:	4b96      	ldr	r3, [pc, #600]	; (8001480 <HAL_UART_MspInit+0x280>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	4a95      	ldr	r2, [pc, #596]	; (8001480 <HAL_UART_MspInit+0x280>)
 800122c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001230:	6413      	str	r3, [r2, #64]	; 0x40
 8001232:	4b93      	ldr	r3, [pc, #588]	; (8001480 <HAL_UART_MspInit+0x280>)
 8001234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001236:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800123a:	63bb      	str	r3, [r7, #56]	; 0x38
 800123c:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	637b      	str	r3, [r7, #52]	; 0x34
 8001242:	4b8f      	ldr	r3, [pc, #572]	; (8001480 <HAL_UART_MspInit+0x280>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a8e      	ldr	r2, [pc, #568]	; (8001480 <HAL_UART_MspInit+0x280>)
 8001248:	f043 0302 	orr.w	r3, r3, #2
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b8c      	ldr	r3, [pc, #560]	; (8001480 <HAL_UART_MspInit+0x280>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	637b      	str	r3, [r7, #52]	; 0x34
 8001258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = RS485_RX_Pin|RS485_TX_Pin;
 800125a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800125e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001260:	2302      	movs	r3, #2
 8001262:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001268:	2303      	movs	r3, #3
 800126a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF11_UART5;
 800126c:	230b      	movs	r3, #11
 800126e:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001270:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001274:	4619      	mov	r1, r3
 8001276:	4883      	ldr	r0, [pc, #524]	; (8001484 <HAL_UART_MspInit+0x284>)
 8001278:	f001 fd40 	bl	8002cfc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800127c:	e0fa      	b.n	8001474 <HAL_UART_MspInit+0x274>
  else if(huart->Instance==UART7)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a81      	ldr	r2, [pc, #516]	; (8001488 <HAL_UART_MspInit+0x288>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d12d      	bne.n	80012e4 <HAL_UART_MspInit+0xe4>
    __HAL_RCC_UART7_CLK_ENABLE();
 8001288:	2300      	movs	r3, #0
 800128a:	633b      	str	r3, [r7, #48]	; 0x30
 800128c:	4b7c      	ldr	r3, [pc, #496]	; (8001480 <HAL_UART_MspInit+0x280>)
 800128e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001290:	4a7b      	ldr	r2, [pc, #492]	; (8001480 <HAL_UART_MspInit+0x280>)
 8001292:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001296:	6413      	str	r3, [r2, #64]	; 0x40
 8001298:	4b79      	ldr	r3, [pc, #484]	; (8001480 <HAL_UART_MspInit+0x280>)
 800129a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80012a0:	633b      	str	r3, [r7, #48]	; 0x30
 80012a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80012a4:	2300      	movs	r3, #0
 80012a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012a8:	4b75      	ldr	r3, [pc, #468]	; (8001480 <HAL_UART_MspInit+0x280>)
 80012aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ac:	4a74      	ldr	r2, [pc, #464]	; (8001480 <HAL_UART_MspInit+0x280>)
 80012ae:	f043 0310 	orr.w	r3, r3, #16
 80012b2:	6313      	str	r3, [r2, #48]	; 0x30
 80012b4:	4b72      	ldr	r3, [pc, #456]	; (8001480 <HAL_UART_MspInit+0x280>)
 80012b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b8:	f003 0310 	and.w	r3, r3, #16
 80012bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = RF_RX_Pin|RF_TX_Pin;
 80012c0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80012c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c6:	2302      	movs	r3, #2
 80012c8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ce:	2303      	movs	r3, #3
 80012d0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80012d2:	2308      	movs	r3, #8
 80012d4:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012d6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80012da:	4619      	mov	r1, r3
 80012dc:	486b      	ldr	r0, [pc, #428]	; (800148c <HAL_UART_MspInit+0x28c>)
 80012de:	f001 fd0d 	bl	8002cfc <HAL_GPIO_Init>
}
 80012e2:	e0c7      	b.n	8001474 <HAL_UART_MspInit+0x274>
  else if(huart->Instance==UART8)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a69      	ldr	r2, [pc, #420]	; (8001490 <HAL_UART_MspInit+0x290>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d12c      	bne.n	8001348 <HAL_UART_MspInit+0x148>
    __HAL_RCC_UART8_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80012f2:	4b63      	ldr	r3, [pc, #396]	; (8001480 <HAL_UART_MspInit+0x280>)
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	4a62      	ldr	r2, [pc, #392]	; (8001480 <HAL_UART_MspInit+0x280>)
 80012f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80012fc:	6413      	str	r3, [r2, #64]	; 0x40
 80012fe:	4b60      	ldr	r3, [pc, #384]	; (8001480 <HAL_UART_MspInit+0x280>)
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001306:	62bb      	str	r3, [r7, #40]	; 0x28
 8001308:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	627b      	str	r3, [r7, #36]	; 0x24
 800130e:	4b5c      	ldr	r3, [pc, #368]	; (8001480 <HAL_UART_MspInit+0x280>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4a5b      	ldr	r2, [pc, #364]	; (8001480 <HAL_UART_MspInit+0x280>)
 8001314:	f043 0310 	orr.w	r3, r3, #16
 8001318:	6313      	str	r3, [r2, #48]	; 0x30
 800131a:	4b59      	ldr	r3, [pc, #356]	; (8001480 <HAL_UART_MspInit+0x280>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	f003 0310 	and.w	r3, r3, #16
 8001322:	627b      	str	r3, [r7, #36]	; 0x24
 8001324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = EM_RX_Pin|EM_TX_Pin;
 8001326:	2303      	movs	r3, #3
 8001328:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132a:	2302      	movs	r3, #2
 800132c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001332:	2303      	movs	r3, #3
 8001334:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001336:	2308      	movs	r3, #8
 8001338:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800133a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800133e:	4619      	mov	r1, r3
 8001340:	4852      	ldr	r0, [pc, #328]	; (800148c <HAL_UART_MspInit+0x28c>)
 8001342:	f001 fcdb 	bl	8002cfc <HAL_GPIO_Init>
}
 8001346:	e095      	b.n	8001474 <HAL_UART_MspInit+0x274>
  else if(huart->Instance==UART9)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a51      	ldr	r2, [pc, #324]	; (8001494 <HAL_UART_MspInit+0x294>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d12d      	bne.n	80013ae <HAL_UART_MspInit+0x1ae>
    __HAL_RCC_UART9_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	623b      	str	r3, [r7, #32]
 8001356:	4b4a      	ldr	r3, [pc, #296]	; (8001480 <HAL_UART_MspInit+0x280>)
 8001358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135a:	4a49      	ldr	r2, [pc, #292]	; (8001480 <HAL_UART_MspInit+0x280>)
 800135c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001360:	6453      	str	r3, [r2, #68]	; 0x44
 8001362:	4b47      	ldr	r3, [pc, #284]	; (8001480 <HAL_UART_MspInit+0x280>)
 8001364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800136a:	623b      	str	r3, [r7, #32]
 800136c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	61fb      	str	r3, [r7, #28]
 8001372:	4b43      	ldr	r3, [pc, #268]	; (8001480 <HAL_UART_MspInit+0x280>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	4a42      	ldr	r2, [pc, #264]	; (8001480 <HAL_UART_MspInit+0x280>)
 8001378:	f043 0308 	orr.w	r3, r3, #8
 800137c:	6313      	str	r3, [r2, #48]	; 0x30
 800137e:	4b40      	ldr	r3, [pc, #256]	; (8001480 <HAL_UART_MspInit+0x280>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	f003 0308 	and.w	r3, r3, #8
 8001386:	61fb      	str	r3, [r7, #28]
 8001388:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GSM_RX_Pin|GSM_TX_Pin;
 800138a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800138e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001390:	2302      	movs	r3, #2
 8001392:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001398:	2303      	movs	r3, #3
 800139a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF11_UART9;
 800139c:	230b      	movs	r3, #11
 800139e:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013a0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80013a4:	4619      	mov	r1, r3
 80013a6:	483c      	ldr	r0, [pc, #240]	; (8001498 <HAL_UART_MspInit+0x298>)
 80013a8:	f001 fca8 	bl	8002cfc <HAL_GPIO_Init>
}
 80013ac:	e062      	b.n	8001474 <HAL_UART_MspInit+0x274>
  else if(huart->Instance==USART2)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a3a      	ldr	r2, [pc, #232]	; (800149c <HAL_UART_MspInit+0x29c>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d12c      	bne.n	8001412 <HAL_UART_MspInit+0x212>
    __HAL_RCC_USART2_CLK_ENABLE();
 80013b8:	2300      	movs	r3, #0
 80013ba:	61bb      	str	r3, [r7, #24]
 80013bc:	4b30      	ldr	r3, [pc, #192]	; (8001480 <HAL_UART_MspInit+0x280>)
 80013be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c0:	4a2f      	ldr	r2, [pc, #188]	; (8001480 <HAL_UART_MspInit+0x280>)
 80013c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013c6:	6413      	str	r3, [r2, #64]	; 0x40
 80013c8:	4b2d      	ldr	r3, [pc, #180]	; (8001480 <HAL_UART_MspInit+0x280>)
 80013ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d0:	61bb      	str	r3, [r7, #24]
 80013d2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]
 80013d8:	4b29      	ldr	r3, [pc, #164]	; (8001480 <HAL_UART_MspInit+0x280>)
 80013da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013dc:	4a28      	ldr	r2, [pc, #160]	; (8001480 <HAL_UART_MspInit+0x280>)
 80013de:	f043 0301 	orr.w	r3, r3, #1
 80013e2:	6313      	str	r3, [r2, #48]	; 0x30
 80013e4:	4b26      	ldr	r3, [pc, #152]	; (8001480 <HAL_UART_MspInit+0x280>)
 80013e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e8:	f003 0301 	and.w	r3, r3, #1
 80013ec:	617b      	str	r3, [r7, #20]
 80013ee:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = DEBUG_TX_Pin|DEBUG_RX_Pin;
 80013f0:	230c      	movs	r3, #12
 80013f2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f4:	2302      	movs	r3, #2
 80013f6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fc:	2303      	movs	r3, #3
 80013fe:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001400:	2307      	movs	r3, #7
 8001402:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001404:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001408:	4619      	mov	r1, r3
 800140a:	4825      	ldr	r0, [pc, #148]	; (80014a0 <HAL_UART_MspInit+0x2a0>)
 800140c:	f001 fc76 	bl	8002cfc <HAL_GPIO_Init>
}
 8001410:	e030      	b.n	8001474 <HAL_UART_MspInit+0x274>
  else if(huart->Instance==USART6)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a23      	ldr	r2, [pc, #140]	; (80014a4 <HAL_UART_MspInit+0x2a4>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d12b      	bne.n	8001474 <HAL_UART_MspInit+0x274>
    __HAL_RCC_USART6_CLK_ENABLE();
 800141c:	2300      	movs	r3, #0
 800141e:	613b      	str	r3, [r7, #16]
 8001420:	4b17      	ldr	r3, [pc, #92]	; (8001480 <HAL_UART_MspInit+0x280>)
 8001422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001424:	4a16      	ldr	r2, [pc, #88]	; (8001480 <HAL_UART_MspInit+0x280>)
 8001426:	f043 0320 	orr.w	r3, r3, #32
 800142a:	6453      	str	r3, [r2, #68]	; 0x44
 800142c:	4b14      	ldr	r3, [pc, #80]	; (8001480 <HAL_UART_MspInit+0x280>)
 800142e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001430:	f003 0320 	and.w	r3, r3, #32
 8001434:	613b      	str	r3, [r7, #16]
 8001436:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001438:	2300      	movs	r3, #0
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	4b10      	ldr	r3, [pc, #64]	; (8001480 <HAL_UART_MspInit+0x280>)
 800143e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001440:	4a0f      	ldr	r2, [pc, #60]	; (8001480 <HAL_UART_MspInit+0x280>)
 8001442:	f043 0304 	orr.w	r3, r3, #4
 8001446:	6313      	str	r3, [r2, #48]	; 0x30
 8001448:	4b0d      	ldr	r3, [pc, #52]	; (8001480 <HAL_UART_MspInit+0x280>)
 800144a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144c:	f003 0304 	and.w	r3, r3, #4
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RS232_TX_Pin|RS232_RX_Pin;
 8001454:	23c0      	movs	r3, #192	; 0xc0
 8001456:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001458:	2302      	movs	r3, #2
 800145a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001460:	2303      	movs	r3, #3
 8001462:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001464:	2308      	movs	r3, #8
 8001466:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001468:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800146c:	4619      	mov	r1, r3
 800146e:	480e      	ldr	r0, [pc, #56]	; (80014a8 <HAL_UART_MspInit+0x2a8>)
 8001470:	f001 fc44 	bl	8002cfc <HAL_GPIO_Init>
}
 8001474:	bf00      	nop
 8001476:	3750      	adds	r7, #80	; 0x50
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40005000 	.word	0x40005000
 8001480:	40023800 	.word	0x40023800
 8001484:	40020400 	.word	0x40020400
 8001488:	40007800 	.word	0x40007800
 800148c:	40021000 	.word	0x40021000
 8001490:	40007c00 	.word	0x40007c00
 8001494:	40011800 	.word	0x40011800
 8001498:	40020c00 	.word	0x40020c00
 800149c:	40004400 	.word	0x40004400
 80014a0:	40020000 	.word	0x40020000
 80014a4:	40011400 	.word	0x40011400
 80014a8:	40020800 	.word	0x40020800

080014ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80014b0:	f002 f91e 	bl	80036f0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014b4:	e7fe      	b.n	80014b4 <NMI_Handler+0x8>

080014b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ba:	e7fe      	b.n	80014ba <HardFault_Handler+0x4>

080014bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c0:	e7fe      	b.n	80014c0 <MemManage_Handler+0x4>

080014c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014c6:	e7fe      	b.n	80014c6 <BusFault_Handler+0x4>

080014c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014cc:	e7fe      	b.n	80014cc <UsageFault_Handler+0x4>

080014ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014fc:	f001 f800 	bl	8002500 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001500:	bf00      	nop
 8001502:	bd80      	pop	{r7, pc}

08001504 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8001508:	4802      	ldr	r0, [pc, #8]	; (8001514 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800150a:	f002 fda3 	bl	8004054 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20000240 	.word	0x20000240

08001518 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800151c:	4b06      	ldr	r3, [pc, #24]	; (8001538 <SystemInit+0x20>)
 800151e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001522:	4a05      	ldr	r2, [pc, #20]	; (8001538 <SystemInit+0x20>)
 8001524:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001528:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 800153c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001574 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001540:	480d      	ldr	r0, [pc, #52]	; (8001578 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001542:	490e      	ldr	r1, [pc, #56]	; (800157c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001544:	4a0e      	ldr	r2, [pc, #56]	; (8001580 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001546:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001548:	e002      	b.n	8001550 <LoopCopyDataInit>

0800154a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800154a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800154c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800154e:	3304      	adds	r3, #4

08001550 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001550:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001552:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001554:	d3f9      	bcc.n	800154a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001556:	4a0b      	ldr	r2, [pc, #44]	; (8001584 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001558:	4c0b      	ldr	r4, [pc, #44]	; (8001588 <LoopFillZerobss+0x26>)
  movs r3, #0
 800155a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800155c:	e001      	b.n	8001562 <LoopFillZerobss>

0800155e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800155e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001560:	3204      	adds	r2, #4

08001562 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001562:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001564:	d3fb      	bcc.n	800155e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001566:	f7ff ffd7 	bl	8001518 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800156a:	f003 fc1d 	bl	8004da8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800156e:	f7fe ffcf 	bl	8000510 <main>
  bx  lr    
 8001572:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001574:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001578:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800157c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001580:	08004ed8 	.word	0x08004ed8
  ldr r2, =_sbss
 8001584:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001588:	200003e4 	.word	0x200003e4

0800158c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800158c:	e7fe      	b.n	800158c <ADC_IRQHandler>

0800158e <DoPWM_Buzzer>:
************************************************************************************/

/* Include all other required application header files. */
#include "../apps/resource.h"
unsigned short Duty_Percent =100;
void DoPWM_Buzzer(TIM_HandleTypeDef htim, unsigned short value){
 800158e:	b084      	sub	sp, #16
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	f107 0c10 	add.w	ip, r7, #16
 800159a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	unsigned long pwm_full_scale_value = DUTY_FULL_PERCENT ;
 800159e:	2364      	movs	r3, #100	; 0x64
 80015a0:	607b      	str	r3, [r7, #4]
	htim.Init.Period = 1000-1;
 80015a2:	f240 33e7 	movw	r3, #999	; 0x3e7
 80015a6:	61fb      	str	r3, [r7, #28]
	htim.Instance->CCR1 = (unsigned short) (((uint32_t) value)*1000/pwm_full_scale_value);
 80015a8:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80015ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015b0:	fb02 f203 	mul.w	r2, r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ba:	b29a      	uxth	r2, r3
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	635a      	str	r2, [r3, #52]	; 0x34
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	b004      	add	sp, #16
 80015cc:	4770      	bx	lr
	...

080015d0 <EnableBuzzer>:
void EnableBuzzer(){
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
	Duty_Percent = 50;
 80015d4:	4b03      	ldr	r3, [pc, #12]	; (80015e4 <EnableBuzzer+0x14>)
 80015d6:	2232      	movs	r2, #50	; 0x32
 80015d8:	801a      	strh	r2, [r3, #0]
}
 80015da:	bf00      	nop
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	20000004 	.word	0x20000004

080015e8 <DisableBuzzer>:
void DisableBuzzer(){
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
	//check to see 0% is off or 100% is off
	Duty_Percent =100;
 80015ec:	4b03      	ldr	r3, [pc, #12]	; (80015fc <DisableBuzzer+0x14>)
 80015ee:	2264      	movs	r2, #100	; 0x64
 80015f0:	801a      	strh	r2, [r3, #0]
}
 80015f2:	bf00      	nop
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	20000004 	.word	0x20000004

08001600 <UpdateBuzzerTimer>:
/***************************************************************************/
/* ALL THE FOLLOWING CODE DOES MULTI-BEEP CONTROL.                         */
/***************************************************************************/
/***************************************************************************/

void UpdateBuzzerTimer(BuzzerControlStruct *ptr , unsigned int *timeRead ){
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
    unsigned int timeCount = *timeRead;
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	60fb      	str	r3, [r7, #12]
    /* Decrement accordingly. */
    if ( ptr->BeepTimer ) {
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d019      	beq.n	800164c <UpdateBuzzerTimer+0x4c>
        if ( ptr->BeepTimer >  timeCount ) ptr->BeepTimer -= timeCount;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	68fa      	ldr	r2, [r7, #12]
 800161e:	429a      	cmp	r2, r3
 8001620:	d206      	bcs.n	8001630 <UpdateBuzzerTimer+0x30>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685a      	ldr	r2, [r3, #4]
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	1ad2      	subs	r2, r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	e00d      	b.n	800164c <UpdateBuzzerTimer+0x4c>
        else {
            /* Beep timer has just expired, and so turn off the
            beeper if not doing the beep part of a multi-beep
            sequence.
            */
            ptr->BeepTimer = 0;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	605a      	str	r2, [r3, #4]
            if ( !DoingMultiBeep() ) DisableBuzzer();
 8001636:	4b16      	ldr	r3, [pc, #88]	; (8001690 <UpdateBuzzerTimer+0x90>)
 8001638:	f993 3000 	ldrsb.w	r3, [r3]
 800163c:	f023 031f 	bic.w	r3, r3, #31
 8001640:	b25b      	sxtb	r3, r3
 8001642:	f113 0f20 	cmn.w	r3, #32
 8001646:	d001      	beq.n	800164c <UpdateBuzzerTimer+0x4c>
 8001648:	f7ff ffce 	bl	80015e8 <DisableBuzzer>
        }
    }
    if ( ptr->BuzzerTimer > timeCount )
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	68fa      	ldr	r2, [r7, #12]
 8001652:	429a      	cmp	r2, r3
 8001654:	d206      	bcs.n	8001664 <UpdateBuzzerTimer+0x64>
        ptr->BuzzerTimer -= timeCount;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	689a      	ldr	r2, [r3, #8]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	1ad2      	subs	r2, r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	609a      	str	r2, [r3, #8]
 8001662:	e002      	b.n	800166a <UpdateBuzzerTimer+0x6a>
    else ptr->BuzzerTimer = 0;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	609a      	str	r2, [r3, #8]

    if ( ptr->MultiBeepTimer > timeCount )
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	429a      	cmp	r2, r3
 8001672:	d206      	bcs.n	8001682 <UpdateBuzzerTimer+0x82>
        ptr->MultiBeepTimer -= timeCount;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	68da      	ldr	r2, [r3, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	1ad2      	subs	r2, r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	60da      	str	r2, [r3, #12]
    else ptr->MultiBeepTimer=0;
}
 8001680:	e002      	b.n	8001688 <UpdateBuzzerTimer+0x88>
    else ptr->MultiBeepTimer=0;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	60da      	str	r2, [r3, #12]
}
 8001688:	bf00      	nop
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	200003ac 	.word	0x200003ac

08001694 <DoTimedBeep>:
/*  Do a timed beep.  Note that while "BeepTimer!=0", the pushbuttons are
  locked out.
*/
void DoTimedBeep( BuzzerControlStruct *ptr, int timeRead) {
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
    ptr->BeepTimer=timeRead;
 800169e:	683a      	ldr	r2, [r7, #0]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	605a      	str	r2, [r3, #4]
    EnableBuzzer();
 80016a4:	f7ff ff94 	bl	80015d0 <EnableBuzzer>
}
 80016a8:	bf00      	nop
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <DoNormalBeep>:
void DoShortBeep(void) {
    DoTimedBeep(&BuzzerControl, Time_10mS);
}

void DoNormalBeep(void) {
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
    DoTimedBeep(&BuzzerControl, Time_100mS);
 80016b4:	2164      	movs	r1, #100	; 0x64
 80016b6:	4802      	ldr	r0, [pc, #8]	; (80016c0 <DoNormalBeep+0x10>)
 80016b8:	f7ff ffec 	bl	8001694 <DoTimedBeep>
}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	200003ac 	.word	0x200003ac

080016c4 <DoErrorBeep>:

void DoErrorBeep(void) {
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
    DoTimedBeep(&BuzzerControl, Time_250mS);
 80016c8:	21fa      	movs	r1, #250	; 0xfa
 80016ca:	4802      	ldr	r0, [pc, #8]	; (80016d4 <DoErrorBeep+0x10>)
 80016cc:	f7ff ffe2 	bl	8001694 <DoTimedBeep>
}
 80016d0:	bf00      	nop
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	200003ac 	.word	0x200003ac

080016d8 <doBeepControl>:
/*  This is the general purpose multi-beep driver routine.  Each beep occurs
  at a:-
    - 0.5Hz rate for the slow beep sequence, or
    - 2Hz rate for the fast beep sequence.
*/
void doBeepControl(void) {
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
    if (( (BuzzerControl.BeepControlState&EnabledFlags) == EnabledFlags)&&( BuzzerControl.MultiBeepTimer==0)) {
 80016dc:	4b2a      	ldr	r3, [pc, #168]	; (8001788 <doBeepControl+0xb0>)
 80016de:	f993 3000 	ldrsb.w	r3, [r3]
 80016e2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016e6:	b25b      	sxtb	r3, r3
 80016e8:	f113 0f40 	cmn.w	r3, #64	; 0x40
 80016ec:	d14a      	bne.n	8001784 <doBeepControl+0xac>
 80016ee:	4b26      	ldr	r3, [pc, #152]	; (8001788 <doBeepControl+0xb0>)
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d146      	bne.n	8001784 <doBeepControl+0xac>
        /* Doing a multi-beep sequence and it is time to do the next stage
          of the sequence.
        */
        if (DoingMultiBeep()) {
 80016f6:	4b24      	ldr	r3, [pc, #144]	; (8001788 <doBeepControl+0xb0>)
 80016f8:	f993 3000 	ldrsb.w	r3, [r3]
 80016fc:	f023 031f 	bic.w	r3, r3, #31
 8001700:	b25b      	sxtb	r3, r3
 8001702:	f113 0f20 	cmn.w	r3, #32
 8001706:	d123      	bne.n	8001750 <doBeepControl+0x78>
            /* If not doing a keyboard beep, then turn the beeper off. */
            if (BuzzerControl.BeepTimer==0) DisableBuzzer();
 8001708:	4b1f      	ldr	r3, [pc, #124]	; (8001788 <doBeepControl+0xb0>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d101      	bne.n	8001714 <doBeepControl+0x3c>
 8001710:	f7ff ff6a 	bl	80015e8 <DisableBuzzer>
            /* Just finished a beep and so see if further beeps are required. */
            BuzzerControl.BeepControlState--;
 8001714:	4b1c      	ldr	r3, [pc, #112]	; (8001788 <doBeepControl+0xb0>)
 8001716:	f993 3000 	ldrsb.w	r3, [r3]
 800171a:	b2db      	uxtb	r3, r3
 800171c:	3b01      	subs	r3, #1
 800171e:	b2db      	uxtb	r3, r3
 8001720:	b25a      	sxtb	r2, r3
 8001722:	4b19      	ldr	r3, [pc, #100]	; (8001788 <doBeepControl+0xb0>)
 8001724:	701a      	strb	r2, [r3, #0]
            if ((BuzzerControl.BeepControlState&BeepCountMask)==0) {
 8001726:	4b18      	ldr	r3, [pc, #96]	; (8001788 <doBeepControl+0xb0>)
 8001728:	f993 3000 	ldrsb.w	r3, [r3]
 800172c:	b2db      	uxtb	r3, r3
 800172e:	f003 030f 	and.w	r3, r3, #15
 8001732:	2b00      	cmp	r3, #0
 8001734:	d103      	bne.n	800173e <doBeepControl+0x66>
              /* Finished the multi-beep sequence. */
              BuzzerControl.BeepControlState=0;
 8001736:	4b14      	ldr	r3, [pc, #80]	; (8001788 <doBeepControl+0xb0>)
 8001738:	2200      	movs	r2, #0
 800173a:	701a      	strb	r2, [r3, #0]
 800173c:	e012      	b.n	8001764 <doBeepControl+0x8c>
            }
            else {
              /* Still busy doing the multi-beep sequence. */
              BuzzerControl.BeepControlState&=~MultiBeepFlag;
 800173e:	4b12      	ldr	r3, [pc, #72]	; (8001788 <doBeepControl+0xb0>)
 8001740:	f993 3000 	ldrsb.w	r3, [r3]
 8001744:	f023 0320 	bic.w	r3, r3, #32
 8001748:	b25a      	sxtb	r2, r3
 800174a:	4b0f      	ldr	r3, [pc, #60]	; (8001788 <doBeepControl+0xb0>)
 800174c:	701a      	strb	r2, [r3, #0]
 800174e:	e009      	b.n	8001764 <doBeepControl+0x8c>
            }
        }
        else {
            /* Need to start the next beep. */
            BuzzerControl.BeepControlState |= MultiBeepFlag;
 8001750:	4b0d      	ldr	r3, [pc, #52]	; (8001788 <doBeepControl+0xb0>)
 8001752:	f993 3000 	ldrsb.w	r3, [r3]
 8001756:	f043 0320 	orr.w	r3, r3, #32
 800175a:	b25a      	sxtb	r2, r3
 800175c:	4b0a      	ldr	r3, [pc, #40]	; (8001788 <doBeepControl+0xb0>)
 800175e:	701a      	strb	r2, [r3, #0]
            EnableBuzzer();
 8001760:	f7ff ff36 	bl	80015d0 <EnableBuzzer>
        }
        if (BuzzerControl.BeepControlState&FastBeeping) BuzzerControl.MultiBeepTimer = Time_150mS;
 8001764:	4b08      	ldr	r3, [pc, #32]	; (8001788 <doBeepControl+0xb0>)
 8001766:	f993 3000 	ldrsb.w	r3, [r3]
 800176a:	b2db      	uxtb	r3, r3
 800176c:	f003 0310 	and.w	r3, r3, #16
 8001770:	2b00      	cmp	r3, #0
 8001772:	d003      	beq.n	800177c <doBeepControl+0xa4>
 8001774:	4b04      	ldr	r3, [pc, #16]	; (8001788 <doBeepControl+0xb0>)
 8001776:	2296      	movs	r2, #150	; 0x96
 8001778:	60da      	str	r2, [r3, #12]
        else BuzzerControl.MultiBeepTimer = Time_1S;
    }
}
 800177a:	e003      	b.n	8001784 <doBeepControl+0xac>
        else BuzzerControl.MultiBeepTimer = Time_1S;
 800177c:	4b02      	ldr	r3, [pc, #8]	; (8001788 <doBeepControl+0xb0>)
 800177e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001782:	60da      	str	r2, [r3, #12]
}
 8001784:	bf00      	nop
 8001786:	bd80      	pop	{r7, pc}
 8001788:	200003ac 	.word	0x200003ac

0800178c <doApplication>:
//*****************************************************************************************//
unsigned char appStateMachine;
unsigned char appSecTimer;

//Main application
void doApplication(void) {
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
     /*State machine for main application*/
    switch (appStateMachine) {
 8001790:	4b1b      	ldr	r3, [pc, #108]	; (8001800 <doApplication+0x74>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b04      	cmp	r3, #4
 8001796:	d015      	beq.n	80017c4 <doApplication+0x38>
 8001798:	2b04      	cmp	r3, #4
 800179a:	dc1b      	bgt.n	80017d4 <doApplication+0x48>
 800179c:	2b01      	cmp	r3, #1
 800179e:	d002      	beq.n	80017a6 <doApplication+0x1a>
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d004      	beq.n	80017ae <doApplication+0x22>
 80017a4:	e016      	b.n	80017d4 <doApplication+0x48>
    case GSM_INIT_STATE://Initialize the application parameters
        appStateMachine = APP_RUNNING_STATE;
 80017a6:	4b16      	ldr	r3, [pc, #88]	; (8001800 <doApplication+0x74>)
 80017a8:	2204      	movs	r2, #4
 80017aa:	701a      	strb	r2, [r3, #0]
        break;        
 80017ac:	e022      	b.n	80017f4 <doApplication+0x68>
    case LCD_INIT_STATE://Initialize
        if (appSecTimer == 0){
 80017ae:	4b15      	ldr	r3, [pc, #84]	; (8001804 <doApplication+0x78>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d119      	bne.n	80017ea <doApplication+0x5e>
            /*Go to the next state*/
            appStateMachine = APP_INIT_STATE;
 80017b6:	4b12      	ldr	r3, [pc, #72]	; (8001800 <doApplication+0x74>)
 80017b8:	2203      	movs	r2, #3
 80017ba:	701a      	strb	r2, [r3, #0]
            appSecTimer = 1;
 80017bc:	4b11      	ldr	r3, [pc, #68]	; (8001804 <doApplication+0x78>)
 80017be:	2201      	movs	r2, #1
 80017c0:	701a      	strb	r2, [r3, #0]
        }
        break;
 80017c2:	e012      	b.n	80017ea <doApplication+0x5e>
    case APP_RUNNING_STATE:
        if (appSecTimer == 0){
 80017c4:	4b0f      	ldr	r3, [pc, #60]	; (8001804 <doApplication+0x78>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d110      	bne.n	80017ee <doApplication+0x62>
        	appSecTimer = 10;//10secs
 80017cc:	4b0d      	ldr	r3, [pc, #52]	; (8001804 <doApplication+0x78>)
 80017ce:	220a      	movs	r2, #10
 80017d0:	701a      	strb	r2, [r3, #0]
        }
        break;
 80017d2:	e00c      	b.n	80017ee <doApplication+0x62>
    default: //APP_DEFAULT_STATE Application start here.
        //Check to see if the time out for not connecting too
        if (appSecTimer == 0) {
 80017d4:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <doApplication+0x78>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d10a      	bne.n	80017f2 <doApplication+0x66>
            appStateMachine = GSM_INIT_STATE;
 80017dc:	4b08      	ldr	r3, [pc, #32]	; (8001800 <doApplication+0x74>)
 80017de:	2201      	movs	r2, #1
 80017e0:	701a      	strb	r2, [r3, #0]
            /*Set up the application timer.*/
            appSecTimer = 3;
 80017e2:	4b08      	ldr	r3, [pc, #32]	; (8001804 <doApplication+0x78>)
 80017e4:	2203      	movs	r2, #3
 80017e6:	701a      	strb	r2, [r3, #0]
        }
        break;
 80017e8:	e003      	b.n	80017f2 <doApplication+0x66>
        break;
 80017ea:	bf00      	nop
 80017ec:	e002      	b.n	80017f4 <doApplication+0x68>
        break;
 80017ee:	bf00      	nop
 80017f0:	e000      	b.n	80017f4 <doApplication+0x68>
        break;
 80017f2:	bf00      	nop
    }
}
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	200003bd 	.word	0x200003bd
 8001804:	200003bc 	.word	0x200003bc

08001808 <MainScreenEnter>:
	{RIGHT_BUTTON,TRUE,0},{LEFT_BUTTON,TRUE,0},
	{UP_BUTTON,TRUE,0},{DOWN_BUTTON,TRUE,0},
	{0,FALSE,0}};

/***************************MAIN SCREEN******************************************************/
void MainScreenEnter(void){
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
	//go to other screen
	lcdStateMachine = LCD_MENU_SCREEN_STATE;
 800180c:	4b05      	ldr	r3, [pc, #20]	; (8001824 <MainScreenEnter+0x1c>)
 800180e:	2203      	movs	r2, #3
 8001810:	701a      	strb	r2, [r3, #0]
    /*Set up the application timer.*/
    lcdSecTimer = 5;//5secs
 8001812:	4b05      	ldr	r3, [pc, #20]	; (8001828 <MainScreenEnter+0x20>)
 8001814:	2205      	movs	r2, #5
 8001816:	701a      	strb	r2, [r3, #0]
}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	200003c0 	.word	0x200003c0
 8001828:	200003be 	.word	0x200003be

0800182c <OutputControlScreenEsc>:
const unsigned int MainScreenFunctionTable[] = {
		(unsigned int)MainScreenEnter
};
/*****************************OUTPUT CONTROL**************************************************/

void OutputControlScreenEsc(void){
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
	//go back to menu screen
	lcdStateMachine = LCD_MENU_SCREEN_STATE;
 8001830:	4b03      	ldr	r3, [pc, #12]	; (8001840 <OutputControlScreenEsc+0x14>)
 8001832:	2203      	movs	r2, #3
 8001834:	701a      	strb	r2, [r3, #0]
}
 8001836:	bf00      	nop
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	200003c0 	.word	0x200003c0

08001844 <OutputControlScreenEnter>:

void OutputControlScreenEnter(void){
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
	// implement ...???
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
	...

08001854 <OutputControlScreenRight>:
void OutputControlScreenRight(void){
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
	leftRightIdx++;
 8001858:	4b08      	ldr	r3, [pc, #32]	; (800187c <OutputControlScreenRight+0x28>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	3301      	adds	r3, #1
 800185e:	b2da      	uxtb	r2, r3
 8001860:	4b06      	ldr	r3, [pc, #24]	; (800187c <OutputControlScreenRight+0x28>)
 8001862:	701a      	strb	r2, [r3, #0]
	if (leftRightIdx >= MAX_LEFT_RIGHT_ON_OFF) leftRightIdx = 0;
 8001864:	4b05      	ldr	r3, [pc, #20]	; (800187c <OutputControlScreenRight+0x28>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d902      	bls.n	8001872 <OutputControlScreenRight+0x1e>
 800186c:	4b03      	ldr	r3, [pc, #12]	; (800187c <OutputControlScreenRight+0x28>)
 800186e:	2200      	movs	r2, #0
 8001870:	701a      	strb	r2, [r3, #0]
}
 8001872:	bf00      	nop
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	200003c1 	.word	0x200003c1

08001880 <OutputControlScreenLeft>:
void OutputControlScreenLeft(void){
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
	if (leftRightIdx == 0) leftRightIdx = MAX_LEFT_RIGHT_ON_OFF;
 8001884:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <OutputControlScreenLeft+0x28>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d102      	bne.n	8001892 <OutputControlScreenLeft+0x12>
 800188c:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <OutputControlScreenLeft+0x28>)
 800188e:	2202      	movs	r2, #2
 8001890:	701a      	strb	r2, [r3, #0]
	leftRightIdx--;
 8001892:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <OutputControlScreenLeft+0x28>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	3b01      	subs	r3, #1
 8001898:	b2da      	uxtb	r2, r3
 800189a:	4b03      	ldr	r3, [pc, #12]	; (80018a8 <OutputControlScreenLeft+0x28>)
 800189c:	701a      	strb	r2, [r3, #0]
}
 800189e:	bf00      	nop
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	200003c1 	.word	0x200003c1

080018ac <OutputControlScreenUp>:
void OutputControlScreenUp(void){
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
	if (upDownIdx == 0) upDownIdx = MAX_OUTPUT_CONTROL_ITEMS;
 80018b0:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <OutputControlScreenUp+0x28>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d102      	bne.n	80018be <OutputControlScreenUp+0x12>
 80018b8:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <OutputControlScreenUp+0x28>)
 80018ba:	2205      	movs	r2, #5
 80018bc:	701a      	strb	r2, [r3, #0]
	upDownIdx--;
 80018be:	4b05      	ldr	r3, [pc, #20]	; (80018d4 <OutputControlScreenUp+0x28>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	3b01      	subs	r3, #1
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	4b03      	ldr	r3, [pc, #12]	; (80018d4 <OutputControlScreenUp+0x28>)
 80018c8:	701a      	strb	r2, [r3, #0]
}
 80018ca:	bf00      	nop
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	200003bf 	.word	0x200003bf

080018d8 <OutputControlScreenDown>:
void OutputControlScreenDown(void){
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
	upDownIdx++;
 80018dc:	4b08      	ldr	r3, [pc, #32]	; (8001900 <OutputControlScreenDown+0x28>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	3301      	adds	r3, #1
 80018e2:	b2da      	uxtb	r2, r3
 80018e4:	4b06      	ldr	r3, [pc, #24]	; (8001900 <OutputControlScreenDown+0x28>)
 80018e6:	701a      	strb	r2, [r3, #0]
	if (upDownIdx >= MAX_OUTPUT_CONTROL_ITEMS) upDownIdx = 0;
 80018e8:	4b05      	ldr	r3, [pc, #20]	; (8001900 <OutputControlScreenDown+0x28>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b04      	cmp	r3, #4
 80018ee:	d902      	bls.n	80018f6 <OutputControlScreenDown+0x1e>
 80018f0:	4b03      	ldr	r3, [pc, #12]	; (8001900 <OutputControlScreenDown+0x28>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	701a      	strb	r2, [r3, #0]
}
 80018f6:	bf00      	nop
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	200003bf 	.word	0x200003bf

08001904 <OutputControlScreenState>:
		(unsigned int)OutputControlScreenEsc,(unsigned int)OutputControlScreenEnter,
		(unsigned int)OutputControlScreenRight,(unsigned int)OutputControlScreenLeft,
        (unsigned int)OutputControlScreenUp,(unsigned int)OutputControlScreenDown
};

void OutputControlScreenState(void) {
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
    const struct ButtonEventStruct *ButtonEventPtr;
    const unsigned int	*FunctionPtr;
    /*Define Button Pressed Index based on the function table*/
    signed char Button_Pressed_Index;
	ButtonEventPtr = AllButtons;
 800190a:	4b07      	ldr	r3, [pc, #28]	; (8001928 <OutputControlScreenState+0x24>)
 800190c:	60fb      	str	r3, [r7, #12]
	FunctionPtr = OutputControlScreenFunctionTable;
 800190e:	4b07      	ldr	r3, [pc, #28]	; (800192c <OutputControlScreenState+0x28>)
 8001910:	60bb      	str	r3, [r7, #8]
	/* Need to respond to any pushbutton presses. */
	Button_Pressed_Index = DoButtonFunction(ButtonEventPtr,FunctionPtr);
 8001912:	68b9      	ldr	r1, [r7, #8]
 8001914:	68f8      	ldr	r0, [r7, #12]
 8001916:	f000 fce9 	bl	80022ec <DoButtonFunction>
 800191a:	4603      	mov	r3, r0
 800191c:	71fb      	strb	r3, [r7, #7]
	/*Add more code here if required*/
//	if (operateMode == MANUAL){
//		;//update output straight away...
//	}

}/*end of OutputControlScreenState*/
 800191e:	bf00      	nop
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	08004e54 	.word	0x08004e54
 800192c:	08004e74 	.word	0x08004e74

08001930 <MenuScreenEsc>:
/***********************************MENU***************************************************/
void MenuScreenEsc(void){
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
	//go to other screen
	lcdStateMachine = LCD_MAIN_SCREEN_STATE;
 8001934:	4b03      	ldr	r3, [pc, #12]	; (8001944 <MenuScreenEsc+0x14>)
 8001936:	2202      	movs	r2, #2
 8001938:	701a      	strb	r2, [r3, #0]
}
 800193a:	bf00      	nop
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	200003c0 	.word	0x200003c0

08001948 <MenuScreenEnter>:
void MenuScreenEnter(void){
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
	//go to other screen
	if (upDownIdx == 0) lcdStateMachine = LCD_OUTPUT_CONTROL_SCREEN_STATE;
 800194c:	4b0d      	ldr	r3, [pc, #52]	; (8001984 <MenuScreenEnter+0x3c>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d103      	bne.n	800195c <MenuScreenEnter+0x14>
 8001954:	4b0c      	ldr	r3, [pc, #48]	; (8001988 <MenuScreenEnter+0x40>)
 8001956:	2205      	movs	r2, #5
 8001958:	701a      	strb	r2, [r3, #0]
	else if (upDownIdx == 1) lcdStateMachine = LCD_SETTING_SCREEN_STATE;
	else if (upDownIdx == 2) lcdStateMachine = LCD_ABOUT_SCREEN_STATE;
}
 800195a:	e00e      	b.n	800197a <MenuScreenEnter+0x32>
	else if (upDownIdx == 1) lcdStateMachine = LCD_SETTING_SCREEN_STATE;
 800195c:	4b09      	ldr	r3, [pc, #36]	; (8001984 <MenuScreenEnter+0x3c>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d103      	bne.n	800196c <MenuScreenEnter+0x24>
 8001964:	4b08      	ldr	r3, [pc, #32]	; (8001988 <MenuScreenEnter+0x40>)
 8001966:	2206      	movs	r2, #6
 8001968:	701a      	strb	r2, [r3, #0]
}
 800196a:	e006      	b.n	800197a <MenuScreenEnter+0x32>
	else if (upDownIdx == 2) lcdStateMachine = LCD_ABOUT_SCREEN_STATE;
 800196c:	4b05      	ldr	r3, [pc, #20]	; (8001984 <MenuScreenEnter+0x3c>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b02      	cmp	r3, #2
 8001972:	d102      	bne.n	800197a <MenuScreenEnter+0x32>
 8001974:	4b04      	ldr	r3, [pc, #16]	; (8001988 <MenuScreenEnter+0x40>)
 8001976:	2212      	movs	r2, #18
 8001978:	701a      	strb	r2, [r3, #0]
}
 800197a:	bf00      	nop
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	200003bf 	.word	0x200003bf
 8001988:	200003c0 	.word	0x200003c0

0800198c <MenuScreenUp>:
void MenuScreenUp(void){
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
	if (upDownIdx == 0) upDownIdx = MAX_MENU_ITEMS;
 8001990:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <MenuScreenUp+0x28>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d102      	bne.n	800199e <MenuScreenUp+0x12>
 8001998:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <MenuScreenUp+0x28>)
 800199a:	2203      	movs	r2, #3
 800199c:	701a      	strb	r2, [r3, #0]
	upDownIdx--;
 800199e:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <MenuScreenUp+0x28>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	3b01      	subs	r3, #1
 80019a4:	b2da      	uxtb	r2, r3
 80019a6:	4b03      	ldr	r3, [pc, #12]	; (80019b4 <MenuScreenUp+0x28>)
 80019a8:	701a      	strb	r2, [r3, #0]
}
 80019aa:	bf00      	nop
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	200003bf 	.word	0x200003bf

080019b8 <MenuScreenDown>:
void MenuScreenDown(void){
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
	upDownIdx++;
 80019bc:	4b08      	ldr	r3, [pc, #32]	; (80019e0 <MenuScreenDown+0x28>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	3301      	adds	r3, #1
 80019c2:	b2da      	uxtb	r2, r3
 80019c4:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <MenuScreenDown+0x28>)
 80019c6:	701a      	strb	r2, [r3, #0]
	if (upDownIdx >= MAX_MENU_ITEMS) upDownIdx = 0;
 80019c8:	4b05      	ldr	r3, [pc, #20]	; (80019e0 <MenuScreenDown+0x28>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d902      	bls.n	80019d6 <MenuScreenDown+0x1e>
 80019d0:	4b03      	ldr	r3, [pc, #12]	; (80019e0 <MenuScreenDown+0x28>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	701a      	strb	r2, [r3, #0]
}
 80019d6:	bf00      	nop
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	200003bf 	.word	0x200003bf

080019e4 <AboutScreenEsc>:
		(unsigned int)MenuScreenEsc,(unsigned int)MenuScreenEnter,
        (unsigned int)MenuScreenUp,(unsigned int)MenuScreenDown
};

/*********************************************************************************************/
void AboutScreenEsc(void) {
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
	lcdStateMachine = LCD_MAIN_SCREEN_STATE;
 80019e8:	4b03      	ldr	r3, [pc, #12]	; (80019f8 <AboutScreenEsc+0x14>)
 80019ea:	2202      	movs	r2, #2
 80019ec:	701a      	strb	r2, [r3, #0]
}
 80019ee:	bf00      	nop
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	200003c0 	.word	0x200003c0

080019fc <doDisplay>:
};
/*******************************MAIN STATE MACHINE******************************************************/
unsigned char lcdStateMachine;
unsigned char lcdSecTimer;

void doDisplay(void) {
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
     /*State machine for LCd application*/
    switch (lcdStateMachine) {
 8001a00:	4b38      	ldr	r3, [pc, #224]	; (8001ae4 <doDisplay+0xe8>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	3b01      	subs	r3, #1
 8001a06:	2b11      	cmp	r3, #17
 8001a08:	d857      	bhi.n	8001aba <doDisplay+0xbe>
 8001a0a:	a201      	add	r2, pc, #4	; (adr r2, 8001a10 <doDisplay+0x14>)
 8001a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a10:	08001a59 	.word	0x08001a59
 8001a14:	08001a69 	.word	0x08001a69
 8001a18:	08001a7b 	.word	0x08001a7b
 8001a1c:	08001abb 	.word	0x08001abb
 8001a20:	08001a9b 	.word	0x08001a9b
 8001a24:	08001abb 	.word	0x08001abb
 8001a28:	08001abb 	.word	0x08001abb
 8001a2c:	08001abb 	.word	0x08001abb
 8001a30:	08001abb 	.word	0x08001abb
 8001a34:	08001abb 	.word	0x08001abb
 8001a38:	08001abb 	.word	0x08001abb
 8001a3c:	08001abb 	.word	0x08001abb
 8001a40:	08001abb 	.word	0x08001abb
 8001a44:	08001abb 	.word	0x08001abb
 8001a48:	08001abb 	.word	0x08001abb
 8001a4c:	08001abb 	.word	0x08001abb
 8001a50:	08001abb 	.word	0x08001abb
 8001a54:	08001aa9 	.word	0x08001aa9
    case LCD_INIT_SCREEN_STATE:
    	if (lcdSecTimer == 0) lcdStateMachine = LCD_MAIN_SCREEN_STATE;
 8001a58:	4b23      	ldr	r3, [pc, #140]	; (8001ae8 <doDisplay+0xec>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d13b      	bne.n	8001ad8 <doDisplay+0xdc>
 8001a60:	4b20      	ldr	r3, [pc, #128]	; (8001ae4 <doDisplay+0xe8>)
 8001a62:	2202      	movs	r2, #2
 8001a64:	701a      	strb	r2, [r3, #0]
        break;
 8001a66:	e037      	b.n	8001ad8 <doDisplay+0xdc>
    case LCD_MAIN_SCREEN_STATE:
    	ESlowFlashLED(&RawLEDdata, LED_STATUS_RIGHT);
 8001a68:	2100      	movs	r1, #0
 8001a6a:	4820      	ldr	r0, [pc, #128]	; (8001aec <doDisplay+0xf0>)
 8001a6c:	f000 f90a 	bl	8001c84 <ESlowFlashLED>
    	DoButtonFunction(EnterButtonAct, MainScreenFunctionTable);
 8001a70:	491f      	ldr	r1, [pc, #124]	; (8001af0 <doDisplay+0xf4>)
 8001a72:	4820      	ldr	r0, [pc, #128]	; (8001af4 <doDisplay+0xf8>)
 8001a74:	f000 fc3a 	bl	80022ec <DoButtonFunction>
        break;
 8001a78:	e031      	b.n	8001ade <doDisplay+0xe2>
    case LCD_MENU_SCREEN_STATE:
    	FastFlashLED(&RawLEDdata, LED_STATUS_RIGHT);
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	481b      	ldr	r0, [pc, #108]	; (8001aec <doDisplay+0xf0>)
 8001a7e:	f000 f937 	bl	8001cf0 <FastFlashLED>
    	if (lcdSecTimer == 0) lcdStateMachine = LCD_MAIN_SCREEN_STATE;
 8001a82:	4b19      	ldr	r3, [pc, #100]	; (8001ae8 <doDisplay+0xec>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d102      	bne.n	8001a90 <doDisplay+0x94>
 8001a8a:	4b16      	ldr	r3, [pc, #88]	; (8001ae4 <doDisplay+0xe8>)
 8001a8c:	2202      	movs	r2, #2
 8001a8e:	701a      	strb	r2, [r3, #0]
    	DoButtonFunction(UpDownEscOKButtons, MenuFunctionTable);
 8001a90:	4919      	ldr	r1, [pc, #100]	; (8001af8 <doDisplay+0xfc>)
 8001a92:	481a      	ldr	r0, [pc, #104]	; (8001afc <doDisplay+0x100>)
 8001a94:	f000 fc2a 	bl	80022ec <DoButtonFunction>
        break;
 8001a98:	e021      	b.n	8001ade <doDisplay+0xe2>

    case LCD_OUTPUT_CONTROL_SCREEN_STATE:
    	FlashLED(&RawLEDdata, LED_STATUS_RIGHT);
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	4813      	ldr	r0, [pc, #76]	; (8001aec <doDisplay+0xf0>)
 8001a9e:	f000 f90d 	bl	8001cbc <FlashLED>
    	OutputControlScreenState();
 8001aa2:	f7ff ff2f 	bl	8001904 <OutputControlScreenState>
        break;
 8001aa6:	e01a      	b.n	8001ade <doDisplay+0xe2>
    case LCD_ABOUT_SCREEN_STATE:
    	TurnLEDoff(&RawLEDdata, LED_STATUS_RIGHT);
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	4810      	ldr	r0, [pc, #64]	; (8001aec <doDisplay+0xf0>)
 8001aac:	f000 f881 	bl	8001bb2 <TurnLEDoff>
    	DoButtonFunction(EscButtonDeact, AboutFunctionTable);
 8001ab0:	4913      	ldr	r1, [pc, #76]	; (8001b00 <doDisplay+0x104>)
 8001ab2:	4814      	ldr	r0, [pc, #80]	; (8001b04 <doDisplay+0x108>)
 8001ab4:	f000 fc1a 	bl	80022ec <DoButtonFunction>
        break;
 8001ab8:	e011      	b.n	8001ade <doDisplay+0xe2>
    default: //LCD_DEFAULT_STATE
        //
        if (lcdSecTimer == 0) {
 8001aba:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <doDisplay+0xec>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d10c      	bne.n	8001adc <doDisplay+0xe0>
        	TurnLEDon(&RawLEDdata, LED_STATUS_RIGHT);
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	4809      	ldr	r0, [pc, #36]	; (8001aec <doDisplay+0xf0>)
 8001ac6:	f000 f85d 	bl	8001b84 <TurnLEDon>
//        	GLCD_Initial();
//        	GlcdStartingPage(LcdTheme);
        	lcdStateMachine = LCD_INIT_SCREEN_STATE;
 8001aca:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <doDisplay+0xe8>)
 8001acc:	2201      	movs	r2, #1
 8001ace:	701a      	strb	r2, [r3, #0]
            /*Set up the application timer.*/
            lcdSecTimer = 3;
 8001ad0:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <doDisplay+0xec>)
 8001ad2:	2203      	movs	r2, #3
 8001ad4:	701a      	strb	r2, [r3, #0]
        }
        break;
 8001ad6:	e001      	b.n	8001adc <doDisplay+0xe0>
        break;
 8001ad8:	bf00      	nop
 8001ada:	e000      	b.n	8001ade <doDisplay+0xe2>
        break;
 8001adc:	bf00      	nop
    }
}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	200003c0 	.word	0x200003c0
 8001ae8:	200003be 	.word	0x200003be
 8001aec:	200003c2 	.word	0x200003c2
 8001af0:	08004e70 	.word	0x08004e70
 8001af4:	08004e44 	.word	0x08004e44
 8001af8:	08004e8c 	.word	0x08004e8c
 8001afc:	08004e30 	.word	0x08004e30
 8001b00:	08004e9c 	.word	0x08004e9c
 8001b04:	08004e4c 	.word	0x08004e4c

08001b08 <UpdateLEDoutputs>:

/* Include all other required application header files. */
#include "../apps/resource.h"
unsigned short	RawLEDdata;
/*This function is to update the all the LEDs output*/
void UpdateLEDoutputs(unsigned short *ledData){
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
	unsigned short leds = *ledData;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	881b      	ldrh	r3, [r3, #0]
 8001b14:	81fb      	strh	r3, [r7, #14]
	if (leds & IndexToMask(LED_STATUS_RIGHT)) LED_STATUS_RIGHT_ON();
 8001b16:	2000      	movs	r0, #0
 8001b18:	f000 f9ea 	bl	8001ef0 <IndexToMask>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	461a      	mov	r2, r3
 8001b20:	89fb      	ldrh	r3, [r7, #14]
 8001b22:	4013      	ands	r3, r2
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d006      	beq.n	8001b38 <UpdateLEDoutputs+0x30>
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b30:	4812      	ldr	r0, [pc, #72]	; (8001b7c <UpdateLEDoutputs+0x74>)
 8001b32:	f001 fa77 	bl	8003024 <HAL_GPIO_WritePin>
 8001b36:	e005      	b.n	8001b44 <UpdateLEDoutputs+0x3c>
	else LED_STATUS_RIGHT_OFF();
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b3e:	480f      	ldr	r0, [pc, #60]	; (8001b7c <UpdateLEDoutputs+0x74>)
 8001b40:	f001 fa70 	bl	8003024 <HAL_GPIO_WritePin>

	if (leds & IndexToMask(LED_STATUS_LEFT)) LED_STATUS_LEFT_ON();
 8001b44:	2001      	movs	r0, #1
 8001b46:	f000 f9d3 	bl	8001ef0 <IndexToMask>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	89fb      	ldrh	r3, [r7, #14]
 8001b50:	4013      	ands	r3, r2
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d006      	beq.n	8001b66 <UpdateLEDoutputs+0x5e>
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b5e:	4808      	ldr	r0, [pc, #32]	; (8001b80 <UpdateLEDoutputs+0x78>)
 8001b60:	f001 fa60 	bl	8003024 <HAL_GPIO_WritePin>
	else LED_STATUS_LEFT_OFF();
}
 8001b64:	e005      	b.n	8001b72 <UpdateLEDoutputs+0x6a>
	else LED_STATUS_LEFT_OFF();
 8001b66:	2200      	movs	r2, #0
 8001b68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b6c:	4804      	ldr	r0, [pc, #16]	; (8001b80 <UpdateLEDoutputs+0x78>)
 8001b6e:	f001 fa59 	bl	8003024 <HAL_GPIO_WritePin>
}
 8001b72:	bf00      	nop
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40020800 	.word	0x40020800
 8001b80:	40020c00 	.word	0x40020c00

08001b84 <TurnLEDon>:
void AllLEDsOff(unsigned short	*LEDptr) {
	*LEDptr=0x00;
}

/* Turn a given LED on. */
void TurnLEDon(unsigned short *LEDptr, unsigned char LEDid) {
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	70fb      	strb	r3, [r7, #3]
	*LEDptr |= IndexToMask(LEDid); 
 8001b90:	78fb      	ldrb	r3, [r7, #3]
 8001b92:	b21b      	sxth	r3, r3
 8001b94:	4618      	mov	r0, r3
 8001b96:	f000 f9ab 	bl	8001ef0 <IndexToMask>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	881b      	ldrh	r3, [r3, #0]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	801a      	strh	r2, [r3, #0]
}
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <TurnLEDoff>:

/* Turn a given LED off. */
void TurnLEDoff(unsigned short *LEDptr, unsigned char LEDid) {
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b082      	sub	sp, #8
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
 8001bba:	460b      	mov	r3, r1
 8001bbc:	70fb      	strb	r3, [r7, #3]
	*LEDptr &= ~IndexToMask(LEDid); 
 8001bbe:	78fb      	ldrb	r3, [r7, #3]
 8001bc0:	b21b      	sxth	r3, r3
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f000 f994 	bl	8001ef0 <IndexToMask>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	43d9      	mvns	r1, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	881b      	ldrh	r3, [r3, #0]
 8001bd0:	b21a      	sxth	r2, r3
 8001bd2:	b20b      	sxth	r3, r1
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	b21b      	sxth	r3, r3
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	801a      	strh	r2, [r3, #0]
}
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <LEDisON>:

/* See if a given LED is ON. */
unsigned char LEDisON(unsigned short *LEDptr, unsigned char LEDid) {
 8001be6:	b590      	push	{r4, r7, lr}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
 8001bee:	460b      	mov	r3, r1
 8001bf0:	70fb      	strb	r3, [r7, #3]
	return((*LEDptr) & IndexToMask(LEDid));
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	881b      	ldrh	r3, [r3, #0]
 8001bf6:	b2dc      	uxtb	r4, r3
 8001bf8:	78fb      	ldrb	r3, [r7, #3]
 8001bfa:	b21b      	sxth	r3, r3
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f000 f977 	bl	8001ef0 <IndexToMask>
 8001c02:	4603      	mov	r3, r0
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	4023      	ands	r3, r4
 8001c08:	b2db      	uxtb	r3, r3
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd90      	pop	{r4, r7, pc}

08001c12 <ToggleLEDstate>:
/* Toggle the state of a given LED. */
void ToggleLEDstate(unsigned short *LEDptr, unsigned char LEDid) {
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b082      	sub	sp, #8
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	70fb      	strb	r3, [r7, #3]
	if (LEDisON(LEDptr,LEDid)) TurnLEDoff(LEDptr,LEDid);
 8001c1e:	78fb      	ldrb	r3, [r7, #3]
 8001c20:	4619      	mov	r1, r3
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f7ff ffdf 	bl	8001be6 <LEDisON>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d005      	beq.n	8001c3a <ToggleLEDstate+0x28>
 8001c2e:	78fb      	ldrb	r3, [r7, #3]
 8001c30:	4619      	mov	r1, r3
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f7ff ffbd 	bl	8001bb2 <TurnLEDoff>
	else TurnLEDon(LEDptr, LEDid);
}
 8001c38:	e004      	b.n	8001c44 <ToggleLEDstate+0x32>
	else TurnLEDon(LEDptr, LEDid);
 8001c3a:	78fb      	ldrb	r3, [r7, #3]
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f7ff ffa0 	bl	8001b84 <TurnLEDon>
}
 8001c44:	bf00      	nop
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <SetLEDstate>:
*/
#define ExtraSlowOnTime()	(signed char) ((SecondTimer)>=Time_750mS)

/*	Turn the specified LED on or off as required.
*/
void SetLEDstate( unsigned short *LEDptr, signed char On, signed char index) {
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	460b      	mov	r3, r1
 8001c56:	70fb      	strb	r3, [r7, #3]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	70bb      	strb	r3, [r7, #2]
	if (On) TurnLEDon(LEDptr,index);
 8001c5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d005      	beq.n	8001c70 <SetLEDstate+0x24>
 8001c64:	78bb      	ldrb	r3, [r7, #2]
 8001c66:	4619      	mov	r1, r3
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f7ff ff8b 	bl	8001b84 <TurnLEDon>
	else TurnLEDoff(LEDptr,index);
}
 8001c6e:	e004      	b.n	8001c7a <SetLEDstate+0x2e>
	else TurnLEDoff(LEDptr,index);
 8001c70:	78bb      	ldrb	r3, [r7, #2]
 8001c72:	4619      	mov	r1, r3
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f7ff ff9c 	bl	8001bb2 <TurnLEDoff>
}
 8001c7a:	bf00      	nop
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
	...

08001c84 <ESlowFlashLED>:

/*	This routine flashes a defined LED at a 0.250Hz rate.
*/
void ESlowFlashLED(unsigned short *LEDptr, signed char LEDid) {
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	70fb      	strb	r3, [r7, #3]
	SetLEDstate(LEDptr, ExtraSlowOnTime(),LEDid);
 8001c90:	4b09      	ldr	r3, [pc, #36]	; (8001cb8 <ESlowFlashLED+0x34>)
 8001c92:	881b      	ldrh	r3, [r3, #0]
 8001c94:	f240 22ed 	movw	r2, #749	; 0x2ed
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	bf8c      	ite	hi
 8001c9c:	2301      	movhi	r3, #1
 8001c9e:	2300      	movls	r3, #0
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	b25b      	sxtb	r3, r3
 8001ca4:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8001ca8:	4619      	mov	r1, r3
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7ff ffce 	bl	8001c4c <SetLEDstate>
}
 8001cb0:	bf00      	nop
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	200003da 	.word	0x200003da

08001cbc <FlashLED>:

/*	This routine flashes a defined LED at a 1Hz rate.
*/
void FlashLED( unsigned short *LEDptr, signed char LEDid) {
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	70fb      	strb	r3, [r7, #3]
	SetLEDstate(LEDptr, SlowOnTime(), LEDid);
 8001cc8:	4b08      	ldr	r3, [pc, #32]	; (8001cec <FlashLED+0x30>)
 8001cca:	881b      	ldrh	r3, [r3, #0]
 8001ccc:	2bc7      	cmp	r3, #199	; 0xc7
 8001cce:	bf8c      	ite	hi
 8001cd0:	2301      	movhi	r3, #1
 8001cd2:	2300      	movls	r3, #0
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	b25b      	sxtb	r3, r3
 8001cd8:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8001cdc:	4619      	mov	r1, r3
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f7ff ffb4 	bl	8001c4c <SetLEDstate>
}
 8001ce4:	bf00      	nop
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	200003da 	.word	0x200003da

08001cf0 <FastFlashLED>:

/*	This routine flashes a defined LED at a 4Hz rate.
*/
void FastFlashLED( unsigned short *LEDptr, signed char LEDid) {
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	70fb      	strb	r3, [r7, #3]
	short	time;
	BOOL Flag=FALSE;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	737b      	strb	r3, [r7, #13]
	time=SecondTimer;
 8001d00:	4b0d      	ldr	r3, [pc, #52]	; (8001d38 <FastFlashLED+0x48>)
 8001d02:	881b      	ldrh	r3, [r3, #0]
 8001d04:	81fb      	strh	r3, [r7, #14]
/*	This routine determines if a 4Hz-flashing LED is to be on or off.
	The return status is:-
			TRUE ===> LED is on.
			FALSE ===> LED is off.
*/
	while (time>=Time_250mS) time-=Time_250mS;
 8001d06:	e003      	b.n	8001d10 <FastFlashLED+0x20>
 8001d08:	89fb      	ldrh	r3, [r7, #14]
 8001d0a:	3bfa      	subs	r3, #250	; 0xfa
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	81fb      	strh	r3, [r7, #14]
 8001d10:	89fb      	ldrh	r3, [r7, #14]
 8001d12:	2bf9      	cmp	r3, #249	; 0xf9
 8001d14:	d8f8      	bhi.n	8001d08 <FastFlashLED+0x18>
	if (time>Time_125mS) Flag=TRUE;	
 8001d16:	89fb      	ldrh	r3, [r7, #14]
 8001d18:	2b7d      	cmp	r3, #125	; 0x7d
 8001d1a:	d901      	bls.n	8001d20 <FastFlashLED+0x30>
 8001d1c:	23ff      	movs	r3, #255	; 0xff
 8001d1e:	737b      	strb	r3, [r7, #13]
	SetLEDstate( LEDptr, Flag, LEDid );
 8001d20:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001d24:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8001d28:	4619      	mov	r1, r3
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f7ff ff8e 	bl	8001c4c <SetLEDstate>
}
 8001d30:	bf00      	nop
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	200003da 	.word	0x200003da

08001d3c <UpdateAllSwitches>:

/*********************************************************************/
/* THIS CODE RELATING TO THE PUSH BUTTON INTERFACE.                  */
/*********************************************************************/

void UpdateAllSwitches(void){
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
   	UpdateSwitchRaw(&SwitchRaw[0], GetButtonStatusPressed((unsigned short)ENTER, ButtonsPortC), ENTER_BUTTON);
 8001d40:	4b4e      	ldr	r3, [pc, #312]	; (8001e7c <UpdateAllSwitches+0x140>)
 8001d42:	691b      	ldr	r3, [r3, #16]
 8001d44:	4619      	mov	r1, r3
 8001d46:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001d4a:	f000 f89f 	bl	8001e8c <GetButtonStatusPressed>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2201      	movs	r2, #1
 8001d52:	4619      	mov	r1, r3
 8001d54:	484a      	ldr	r0, [pc, #296]	; (8001e80 <UpdateAllSwitches+0x144>)
 8001d56:	f000 f903 	bl	8001f60 <UpdateSwitchRaw>
   	UpdateSwitchRaw(&SwitchRaw[0],GetButtonStatusPressed((unsigned short)RIGHT, ButtonsPortA),RIGHT_BUTTON);
 8001d5a:	4b4a      	ldr	r3, [pc, #296]	; (8001e84 <UpdateAllSwitches+0x148>)
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	4619      	mov	r1, r3
 8001d60:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001d64:	f000 f892 	bl	8001e8c <GetButtonStatusPressed>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4844      	ldr	r0, [pc, #272]	; (8001e80 <UpdateAllSwitches+0x144>)
 8001d70:	f000 f8f6 	bl	8001f60 <UpdateSwitchRaw>
   	UpdateSwitchRaw(&SwitchRaw[0],GetButtonStatusPressed((unsigned short)LEFT, ButtonsPortA),LEFT_BUTTON);
 8001d74:	4b43      	ldr	r3, [pc, #268]	; (8001e84 <UpdateAllSwitches+0x148>)
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	4619      	mov	r1, r3
 8001d7a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001d7e:	f000 f885 	bl	8001e8c <GetButtonStatusPressed>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2204      	movs	r2, #4
 8001d86:	4619      	mov	r1, r3
 8001d88:	483d      	ldr	r0, [pc, #244]	; (8001e80 <UpdateAllSwitches+0x144>)
 8001d8a:	f000 f8e9 	bl	8001f60 <UpdateSwitchRaw>
   	UpdateSwitchRaw(&SwitchRaw[0],GetButtonStatusPressed((unsigned short)UP, ButtonsPortA),UP_BUTTON);
 8001d8e:	4b3d      	ldr	r3, [pc, #244]	; (8001e84 <UpdateAllSwitches+0x148>)
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	4619      	mov	r1, r3
 8001d94:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001d98:	f000 f878 	bl	8001e8c <GetButtonStatusPressed>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2208      	movs	r2, #8
 8001da0:	4619      	mov	r1, r3
 8001da2:	4837      	ldr	r0, [pc, #220]	; (8001e80 <UpdateAllSwitches+0x144>)
 8001da4:	f000 f8dc 	bl	8001f60 <UpdateSwitchRaw>
   	UpdateSwitchRaw(&SwitchRaw[0],GetButtonStatusPressed((unsigned short)DOWN, ButtonsPortA),DOWN_BUTTON);
 8001da8:	4b36      	ldr	r3, [pc, #216]	; (8001e84 <UpdateAllSwitches+0x148>)
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	4619      	mov	r1, r3
 8001dae:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001db2:	f000 f86b 	bl	8001e8c <GetButtonStatusPressed>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2210      	movs	r2, #16
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4830      	ldr	r0, [pc, #192]	; (8001e80 <UpdateAllSwitches+0x144>)
 8001dbe:	f000 f8cf 	bl	8001f60 <UpdateSwitchRaw>
   	UpdateSwitchRaw(&SwitchRaw[0],GetButtonStatusPressed((unsigned short)ESC, ButtonsPortA),ESC_BUTTON);
 8001dc2:	4b30      	ldr	r3, [pc, #192]	; (8001e84 <UpdateAllSwitches+0x148>)
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001dcc:	f000 f85e 	bl	8001e8c <GetButtonStatusPressed>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2220      	movs	r2, #32
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	482a      	ldr	r0, [pc, #168]	; (8001e80 <UpdateAllSwitches+0x144>)
 8001dd8:	f000 f8c2 	bl	8001f60 <UpdateSwitchRaw>
   	//read second time
   	UpdateSwitchRaw(&SwitchRaw[1],GetButtonStatusPressed((unsigned short)ENTER,ButtonsPortC),ENTER_BUTTON);
 8001ddc:	4b27      	ldr	r3, [pc, #156]	; (8001e7c <UpdateAllSwitches+0x140>)
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	4619      	mov	r1, r3
 8001de2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001de6:	f000 f851 	bl	8001e8c <GetButtonStatusPressed>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2201      	movs	r2, #1
 8001dee:	4619      	mov	r1, r3
 8001df0:	4825      	ldr	r0, [pc, #148]	; (8001e88 <UpdateAllSwitches+0x14c>)
 8001df2:	f000 f8b5 	bl	8001f60 <UpdateSwitchRaw>
   	UpdateSwitchRaw(&SwitchRaw[1],GetButtonStatusPressed((unsigned short)RIGHT,ButtonsPortA),RIGHT_BUTTON);
 8001df6:	4b23      	ldr	r3, [pc, #140]	; (8001e84 <UpdateAllSwitches+0x148>)
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001e00:	f000 f844 	bl	8001e8c <GetButtonStatusPressed>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2202      	movs	r2, #2
 8001e08:	4619      	mov	r1, r3
 8001e0a:	481f      	ldr	r0, [pc, #124]	; (8001e88 <UpdateAllSwitches+0x14c>)
 8001e0c:	f000 f8a8 	bl	8001f60 <UpdateSwitchRaw>
   	UpdateSwitchRaw(&SwitchRaw[1],GetButtonStatusPressed((unsigned short)LEFT, ButtonsPortA),LEFT_BUTTON);
 8001e10:	4b1c      	ldr	r3, [pc, #112]	; (8001e84 <UpdateAllSwitches+0x148>)
 8001e12:	691b      	ldr	r3, [r3, #16]
 8001e14:	4619      	mov	r1, r3
 8001e16:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001e1a:	f000 f837 	bl	8001e8c <GetButtonStatusPressed>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2204      	movs	r2, #4
 8001e22:	4619      	mov	r1, r3
 8001e24:	4818      	ldr	r0, [pc, #96]	; (8001e88 <UpdateAllSwitches+0x14c>)
 8001e26:	f000 f89b 	bl	8001f60 <UpdateSwitchRaw>
   	UpdateSwitchRaw(&SwitchRaw[1],GetButtonStatusPressed((unsigned short)UP, ButtonsPortA),UP_BUTTON);
 8001e2a:	4b16      	ldr	r3, [pc, #88]	; (8001e84 <UpdateAllSwitches+0x148>)
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	4619      	mov	r1, r3
 8001e30:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001e34:	f000 f82a 	bl	8001e8c <GetButtonStatusPressed>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2208      	movs	r2, #8
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4812      	ldr	r0, [pc, #72]	; (8001e88 <UpdateAllSwitches+0x14c>)
 8001e40:	f000 f88e 	bl	8001f60 <UpdateSwitchRaw>
   	UpdateSwitchRaw(&SwitchRaw[1],GetButtonStatusPressed((unsigned short)DOWN, ButtonsPortA),DOWN_BUTTON);
 8001e44:	4b0f      	ldr	r3, [pc, #60]	; (8001e84 <UpdateAllSwitches+0x148>)
 8001e46:	691b      	ldr	r3, [r3, #16]
 8001e48:	4619      	mov	r1, r3
 8001e4a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001e4e:	f000 f81d 	bl	8001e8c <GetButtonStatusPressed>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2210      	movs	r2, #16
 8001e56:	4619      	mov	r1, r3
 8001e58:	480b      	ldr	r0, [pc, #44]	; (8001e88 <UpdateAllSwitches+0x14c>)
 8001e5a:	f000 f881 	bl	8001f60 <UpdateSwitchRaw>
   	UpdateSwitchRaw(&SwitchRaw[1],GetButtonStatusPressed((unsigned short)ESC, ButtonsPortA),ESC_BUTTON);
 8001e5e:	4b09      	ldr	r3, [pc, #36]	; (8001e84 <UpdateAllSwitches+0x148>)
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	4619      	mov	r1, r3
 8001e64:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001e68:	f000 f810 	bl	8001e8c <GetButtonStatusPressed>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2220      	movs	r2, #32
 8001e70:	4619      	mov	r1, r3
 8001e72:	4805      	ldr	r0, [pc, #20]	; (8001e88 <UpdateAllSwitches+0x14c>)
 8001e74:	f000 f874 	bl	8001f60 <UpdateSwitchRaw>
}
 8001e78:	bf00      	nop
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40020800 	.word	0x40020800
 8001e80:	200003cc 	.word	0x200003cc
 8001e84:	40020000 	.word	0x40020000
 8001e88:	200003ce 	.word	0x200003ce

08001e8c <GetButtonStatusPressed>:

/*	This function returns the button pressed status, if Pressed the value is 0
 and the return value is TRUE.
*/
BOOL GetButtonStatusPressed(unsigned short ButtonIndex, unsigned long Port) {
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	6039      	str	r1, [r7, #0]
 8001e96:	80fb      	strh	r3, [r7, #6]
	if (Port&ButtonIndex) return(FALSE);
 8001e98:	88fa      	ldrh	r2, [r7, #6]
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <GetButtonStatusPressed+0x1a>
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	e000      	b.n	8001ea8 <GetButtonStatusPressed+0x1c>
	return(TRUE);	
 8001ea6:	23ff      	movs	r3, #255	; 0xff
}	
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <NumberOfSetBits>:

/*	This function returns with the number of set bits of "mask".
*/
unsigned char NumberOfSetBits(unsigned short mask) {
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	4603      	mov	r3, r0
 8001ebc:	80fb      	strh	r3, [r7, #6]
	unsigned char	count=0;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	73fb      	strb	r3, [r7, #15]
	while (mask) {
 8001ec2:	e00a      	b.n	8001eda <NumberOfSetBits+0x26>
		if (mask&1) count++;
 8001ec4:	88fb      	ldrh	r3, [r7, #6]
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d002      	beq.n	8001ed4 <NumberOfSetBits+0x20>
 8001ece:	7bfb      	ldrb	r3, [r7, #15]
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	73fb      	strb	r3, [r7, #15]
		mask>>=1;
 8001ed4:	88fb      	ldrh	r3, [r7, #6]
 8001ed6:	085b      	lsrs	r3, r3, #1
 8001ed8:	80fb      	strh	r3, [r7, #6]
	while (mask) {
 8001eda:	88fb      	ldrh	r3, [r7, #6]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d1f1      	bne.n	8001ec4 <NumberOfSetBits+0x10>
	}
	return(count);
 8001ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3714      	adds	r7, #20
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
	...

08001ef0 <IndexToMask>:
	Valid range of "index" is 0...15.  Return values is:-
				0x0001 for index<=0
				...
				0x8000 for index>=15
*/
unsigned short IndexToMask(signed short index) {
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	80fb      	strh	r3, [r7, #6]
	if (index<=0) return(1);
 8001efa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	dc01      	bgt.n	8001f06 <IndexToMask+0x16>
 8001f02:	2301      	movs	r3, #1
 8001f04:	e010      	b.n	8001f28 <IndexToMask+0x38>
	if (((unsigned char) index)>=15) return(0x8000);
 8001f06:	88fb      	ldrh	r3, [r7, #6]
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b0e      	cmp	r3, #14
 8001f0c:	d902      	bls.n	8001f14 <IndexToMask+0x24>
 8001f0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f12:	e009      	b.n	8001f28 <IndexToMask+0x38>
	return(GetConstUINT((signed char*) (IndexToMaskTable+((unsigned char) index)-1)));
 8001f14:	88fb      	ldrh	r3, [r7, #6]
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	4a04      	ldr	r2, [pc, #16]	; (8001f34 <IndexToMask+0x44>)
 8001f22:	4413      	add	r3, r2
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	b29b      	uxth	r3, r3
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	08004ea0 	.word	0x08004ea0

08001f38 <GetKeyBit>:

/*	This function returns with the keypress bit assignment, given the
	raw key-matrix index.
*/
unsigned short GetKeyBit(unsigned char SwitchIndex) {
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	71fb      	strb	r3, [r7, #7]
	return(GetConstShort(SwitchEnumTable+SwitchIndex));
 8001f42:	79fb      	ldrb	r3, [r7, #7]
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	4a05      	ldr	r2, [pc, #20]	; (8001f5c <GetKeyBit+0x24>)
 8001f48:	4413      	add	r3, r2
 8001f4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f4e:	b29b      	uxth	r3, r3
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	08004ebc 	.word	0x08004ebc

08001f60 <UpdateSwitchRaw>:

/*	This general switch-update function updates the "mask"ed bit of "dest" according to
	the state of "Activated" (bit is set if Activated<>0, or cleared if Activated==0).
*/
void UpdateSwitchRaw(unsigned short *dest, unsigned char Activated, unsigned short mask) {
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	460b      	mov	r3, r1
 8001f6a:	70fb      	strb	r3, [r7, #3]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	803b      	strh	r3, [r7, #0]

   	if (Activated != 0) {
 8001f70:	78fb      	ldrb	r3, [r7, #3]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d007      	beq.n	8001f86 <UpdateSwitchRaw+0x26>
   		*dest|=mask;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	881a      	ldrh	r2, [r3, #0]
 8001f7a:	883b      	ldrh	r3, [r7, #0]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	801a      	strh	r2, [r3, #0]
   	}
   	else *dest&=~mask;
}
 8001f84:	e00b      	b.n	8001f9e <UpdateSwitchRaw+0x3e>
   	else *dest&=~mask;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	b21a      	sxth	r2, r3
 8001f8c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001f90:	43db      	mvns	r3, r3
 8001f92:	b21b      	sxth	r3, r3
 8001f94:	4013      	ands	r3, r2
 8001f96:	b21b      	sxth	r3, r3
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	801a      	strh	r2, [r3, #0]
}
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
	...

08001fac <ButtonEventType>:
/*	This function checks the button event type:-
		- BUTTON_UNCHANGED, or
		- BUTTON_ACTIVATED, or
		- BUTTON_DEACTIVATED.
*/
unsigned char ButtonEventType(unsigned short ButtonPattern) {
 8001fac:	b590      	push	{r4, r7, lr}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	80fb      	strh	r3, [r7, #6]
	/* See if the button pattern has changed. */
	if (LastButtonPattern==ButtonPattern) return(BUTTON_UNCHANGED);
 8001fb6:	4b0f      	ldr	r3, [pc, #60]	; (8001ff4 <ButtonEventType+0x48>)
 8001fb8:	881b      	ldrh	r3, [r3, #0]
 8001fba:	88fa      	ldrh	r2, [r7, #6]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d101      	bne.n	8001fc4 <ButtonEventType+0x18>
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	e013      	b.n	8001fec <ButtonEventType+0x40>
	/* The button pattern has changed and so reset the button-pressed timer. */
	ButtonPressedTimer=0;
 8001fc4:	4b0c      	ldr	r3, [pc, #48]	; (8001ff8 <ButtonEventType+0x4c>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	701a      	strb	r2, [r3, #0]
	/* Determine whether a button has activated or deactivated. */
	if (NumberOfSetBits(LastButtonPattern)<NumberOfSetBits(ButtonPattern))
 8001fca:	4b0a      	ldr	r3, [pc, #40]	; (8001ff4 <ButtonEventType+0x48>)
 8001fcc:	881b      	ldrh	r3, [r3, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff ff70 	bl	8001eb4 <NumberOfSetBits>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	461c      	mov	r4, r3
 8001fd8:	88fb      	ldrh	r3, [r7, #6]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff ff6a 	bl	8001eb4 <NumberOfSetBits>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	429c      	cmp	r4, r3
 8001fe4:	d201      	bcs.n	8001fea <ButtonEventType+0x3e>
		return(BUTTON_ACTIVATED);
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e000      	b.n	8001fec <ButtonEventType+0x40>
	return(BUTTON_DEACTIVATED);
 8001fea:	2302      	movs	r3, #2
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd90      	pop	{r4, r7, pc}
 8001ff4:	200003d2 	.word	0x200003d2
 8001ff8:	200003c4 	.word	0x200003c4

08001ffc <FindTimedButtonEvent>:
/*	This function searches "ButtonEventList[]" for the specified timed button event
	of "ButtonPattern".  The return value is:-
			>=0 ===> Event was in list, the return value being the "ButtonEventList[]" index.
			-1 ===> Event was not in the list.
*/
signed char FindTimedButtonEvent(const struct ButtonEventStruct *ButtonEventList, unsigned short ButtonPattern) {
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	460b      	mov	r3, r1
 8002006:	807b      	strh	r3, [r7, #2]
	signed char index=0;
 8002008:	2300      	movs	r3, #0
 800200a:	73fb      	strb	r3, [r7, #15]
	/* Search the list for the event. */
	while (ButtonEventList->Buttons!=0) {
 800200c:	e023      	b.n	8002056 <FindTimedButtonEvent+0x5a>
		/* See if this is the event. */
		if ((ButtonEventList->Buttons==ButtonPattern)&&(ButtonEventList->Seconds!=0)) {
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	881b      	ldrh	r3, [r3, #0]
 8002012:	887a      	ldrh	r2, [r7, #2]
 8002014:	429a      	cmp	r2, r3
 8002016:	d115      	bne.n	8002044 <FindTimedButtonEvent+0x48>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	78db      	ldrb	r3, [r3, #3]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d011      	beq.n	8002044 <FindTimedButtonEvent+0x48>
			/*	This is a timed button pattern.  See if the required time has expired.
			*/
			if (ButtonPressedTimer>=(ButtonEventList->Seconds)*10) {
 8002020:	4b13      	ldr	r3, [pc, #76]	; (8002070 <FindTimedButtonEvent+0x74>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	4619      	mov	r1, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	78db      	ldrb	r3, [r3, #3]
 800202a:	461a      	mov	r2, r3
 800202c:	4613      	mov	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4413      	add	r3, r2
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	4299      	cmp	r1, r3
 8002036:	db05      	blt.n	8002044 <FindTimedButtonEvent+0x48>
				/* Reset the button-pressed timer. */
				ButtonPressedTimer=0;
 8002038:	4b0d      	ldr	r3, [pc, #52]	; (8002070 <FindTimedButtonEvent+0x74>)
 800203a:	2200      	movs	r2, #0
 800203c:	701a      	strb	r2, [r3, #0]
				/* Have found the event. */
				return(index);
 800203e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002042:	e00e      	b.n	8002062 <FindTimedButtonEvent+0x66>
			}
		}
		/* Keep searching. */
		index++;
 8002044:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002048:	b2db      	uxtb	r3, r3
 800204a:	3301      	adds	r3, #1
 800204c:	b2db      	uxtb	r3, r3
 800204e:	73fb      	strb	r3, [r7, #15]
		ButtonEventList++;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	3304      	adds	r3, #4
 8002054:	607b      	str	r3, [r7, #4]
	while (ButtonEventList->Buttons!=0) {
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	881b      	ldrh	r3, [r3, #0]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1d7      	bne.n	800200e <FindTimedButtonEvent+0x12>
	}
	/* The given event was not found. */
	return(-1);
 800205e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002062:	4618      	mov	r0, r3
 8002064:	3714      	adds	r7, #20
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	200003c4 	.word	0x200003c4

08002074 <ButtonNotUsed>:
/*	This function searches "ButtonEventList[]" to see if the specified "ButtonPattern" is used
	at all.  The return value is:-
			FALSE ===> This button is used.
			TRUE ===> This button is not used.
*/
BOOL ButtonNotUsed(const struct ButtonEventStruct *ButtonEventList, unsigned short ButtonPattern) {
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	460b      	mov	r3, r1
 800207e:	807b      	strh	r3, [r7, #2]
	/* Search the list for the event. */
	while (ButtonEventList->Buttons!=0) {
 8002080:	e00c      	b.n	800209c <ButtonNotUsed+0x28>
		/* See if this button pattern is used. */
		if (((ButtonEventList->Buttons)&ButtonPattern)==ButtonPattern) {
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	881a      	ldrh	r2, [r3, #0]
 8002086:	887b      	ldrh	r3, [r7, #2]
 8002088:	4013      	ands	r3, r2
 800208a:	b29b      	uxth	r3, r3
 800208c:	887a      	ldrh	r2, [r7, #2]
 800208e:	429a      	cmp	r2, r3
 8002090:	d101      	bne.n	8002096 <ButtonNotUsed+0x22>
			/*	This button is used. */
			return(FALSE);
 8002092:	2300      	movs	r3, #0
 8002094:	e007      	b.n	80020a6 <ButtonNotUsed+0x32>
		}
		/* Keep searching. */
		ButtonEventList++;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	3304      	adds	r3, #4
 800209a:	607b      	str	r3, [r7, #4]
	while (ButtonEventList->Buttons!=0) {
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	881b      	ldrh	r3, [r3, #0]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d1ee      	bne.n	8002082 <ButtonNotUsed+0xe>
	}
	/* This button is not used. */
	return(TRUE);
 80020a4:	23ff      	movs	r3, #255	; 0xff
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <FindButtonEvent>:
	of "ButtonPattern".  The return value is:-
			>=0 ===> Event was in list, the return value being the "ButtonEventList[]" index.
			-1 ===> Event was not in the list.
*/
signed char FindButtonEvent(const struct ButtonEventStruct *ButtonEventList, unsigned short ButtonPattern,
		BOOL ActivateEvent) {
 80020b2:	b480      	push	{r7}
 80020b4:	b085      	sub	sp, #20
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
 80020ba:	460b      	mov	r3, r1
 80020bc:	807b      	strh	r3, [r7, #2]
 80020be:	4613      	mov	r3, r2
 80020c0:	707b      	strb	r3, [r7, #1]
	signed char index=0;
 80020c2:	2300      	movs	r3, #0
 80020c4:	73fb      	strb	r3, [r7, #15]
	/* Search the list for the event. */
	while (ButtonEventList->Buttons!=0) {
 80020c6:	e01d      	b.n	8002104 <FindButtonEvent+0x52>
		/* See if this is the event. */
		if ((ButtonEventList->Buttons==ButtonPattern)&&(ButtonEventList->Activate==ActivateEvent)) {
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	881b      	ldrh	r3, [r3, #0]
 80020cc:	887a      	ldrh	r2, [r7, #2]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d10f      	bne.n	80020f2 <FindButtonEvent+0x40>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	789b      	ldrb	r3, [r3, #2]
 80020d6:	787a      	ldrb	r2, [r7, #1]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d10a      	bne.n	80020f2 <FindButtonEvent+0x40>
			/*	Both the button pattern and ACTIVATE type matches.  This is not an event if a
				timed button is deactivating.
			*/
			if ((ButtonEventList->Activate==TRUE)||(ButtonEventList->Seconds==0)) {
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	789b      	ldrb	r3, [r3, #2]
 80020e0:	2bff      	cmp	r3, #255	; 0xff
 80020e2:	d003      	beq.n	80020ec <FindButtonEvent+0x3a>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	78db      	ldrb	r3, [r3, #3]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d102      	bne.n	80020f2 <FindButtonEvent+0x40>
				/* Have found the event. */
				return(index);
 80020ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020f0:	e00e      	b.n	8002110 <FindButtonEvent+0x5e>
			}
		}
		/* Keep searching. */
		index++;
 80020f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	3301      	adds	r3, #1
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	73fb      	strb	r3, [r7, #15]
		ButtonEventList++;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	3304      	adds	r3, #4
 8002102:	607b      	str	r3, [r7, #4]
	while (ButtonEventList->Buttons!=0) {
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	881b      	ldrh	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d1dd      	bne.n	80020c8 <FindButtonEvent+0x16>
	}
	/* The given event was not found. */
	return(-1);
 800210c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002110:	4618      	mov	r0, r3
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <GetButtonPattern>:
/*	This routine is the low-level routine, decoding "SwitchRaw[]" determining which
	switches are presently closed.  If the reading is noisy then B15 is set (in which case this reading
	is to be ignored). 
*/
unsigned short GetButtonPattern(void) {
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
	unsigned short	ReturnValue,SwitchMask,status;
	unsigned char	SwitchIndex;
	/* Setup default of no buttons pressed. */
	ReturnValue=0;
 8002122:	2300      	movs	r3, #0
 8002124:	80fb      	strh	r3, [r7, #6]
	/* See what buttons are pressed, if any. */
	for (SwitchIndex=0,SwitchMask=BIT0; SwitchIndex<=MAX_SWITCH_INDEX; SwitchIndex++,SwitchMask<<=1) {
 8002126:	2300      	movs	r3, #0
 8002128:	70fb      	strb	r3, [r7, #3]
 800212a:	2301      	movs	r3, #1
 800212c:	80bb      	strh	r3, [r7, #4]
 800212e:	e021      	b.n	8002174 <GetButtonPattern+0x58>
		/* Read first interrupt-level raw value. */
		status = SwitchRaw[0]&SwitchMask;
 8002130:	4b14      	ldr	r3, [pc, #80]	; (8002184 <GetButtonPattern+0x68>)
 8002132:	881a      	ldrh	r2, [r3, #0]
 8002134:	88bb      	ldrh	r3, [r7, #4]
 8002136:	4013      	ands	r3, r2
 8002138:	803b      	strh	r3, [r7, #0]
		/* Check to see if the reading is noisy. */
		if (status!=(SwitchRaw[1]&SwitchMask)) {
 800213a:	4b12      	ldr	r3, [pc, #72]	; (8002184 <GetButtonPattern+0x68>)
 800213c:	885a      	ldrh	r2, [r3, #2]
 800213e:	88bb      	ldrh	r3, [r7, #4]
 8002140:	4013      	ands	r3, r2
 8002142:	b29b      	uxth	r3, r3
 8002144:	883a      	ldrh	r2, [r7, #0]
 8002146:	429a      	cmp	r2, r3
 8002148:	d002      	beq.n	8002150 <GetButtonPattern+0x34>
			/* The button reading is noisy, and so ignore. */
			return(NOISY_BUTTONS);
 800214a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800214e:	e015      	b.n	800217c <GetButtonPattern+0x60>
		}
		/* The switch reading is not noisy and so process it. */
		if (status) {
 8002150:	883b      	ldrh	r3, [r7, #0]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d008      	beq.n	8002168 <GetButtonPattern+0x4c>
			/* Record the button press. */
			ReturnValue+=GetKeyBit(SwitchIndex);
 8002156:	78fb      	ldrb	r3, [r7, #3]
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff feed 	bl	8001f38 <GetKeyBit>
 800215e:	4603      	mov	r3, r0
 8002160:	461a      	mov	r2, r3
 8002162:	88fb      	ldrh	r3, [r7, #6]
 8002164:	4413      	add	r3, r2
 8002166:	80fb      	strh	r3, [r7, #6]
	for (SwitchIndex=0,SwitchMask=BIT0; SwitchIndex<=MAX_SWITCH_INDEX; SwitchIndex++,SwitchMask<<=1) {
 8002168:	78fb      	ldrb	r3, [r7, #3]
 800216a:	3301      	adds	r3, #1
 800216c:	70fb      	strb	r3, [r7, #3]
 800216e:	88bb      	ldrh	r3, [r7, #4]
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	80bb      	strh	r3, [r7, #4]
 8002174:	78fb      	ldrb	r3, [r7, #3]
 8002176:	2b0c      	cmp	r3, #12
 8002178:	d9da      	bls.n	8002130 <GetButtonPattern+0x14>
		}
	}
	/* Return with the button status. */
	return(ReturnValue);
 800217a:	88fb      	ldrh	r3, [r7, #6]
}
 800217c:	4618      	mov	r0, r3
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	200003cc 	.word	0x200003cc

08002188 <GetButtonEvent>:
		>=0 ===> Have a valid button event, this being the corresponding
					index of ButtonEventList[].
		-1 ===> No button event (NO_BUTTONS).
		-2 ===> Illegal button activation event (ILLEGAL_BUTTON_ACTIVATION).
*/
signed char GetButtonEvent(const struct ButtonEventStruct *ButtonEventList) {
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
	unsigned short	ButtonPattern;
	signed char	ButtonEvent,index;
	/* Default of no button event. */
	ButtonEvent=NO_BUTTONS;
 8002190:	23ff      	movs	r3, #255	; 0xff
 8002192:	73fb      	strb	r3, [r7, #15]
	/* Get the latest button pattern, and check for it being noisy. */
	ButtonPattern=GetButtonPattern();
 8002194:	f7ff ffc2 	bl	800211c <GetButtonPattern>
 8002198:	4603      	mov	r3, r0
 800219a:	81bb      	strh	r3, [r7, #12]
	if (ButtonPattern!=NOISY_BUTTONS) {
 800219c:	89bb      	ldrh	r3, [r7, #12]
 800219e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021a2:	d058      	beq.n	8002256 <GetButtonEvent+0xce>
		/* Not a noisy button pattern and so see what button event has occurred. */
		switch (ButtonEventType(ButtonPattern)) {
 80021a4:	89bb      	ldrh	r3, [r7, #12]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff ff00 	bl	8001fac <ButtonEventType>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d03e      	beq.n	8002230 <GetButtonEvent+0xa8>
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	dc56      	bgt.n	8002264 <GetButtonEvent+0xdc>
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d002      	beq.n	80021c0 <GetButtonEvent+0x38>
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d014      	beq.n	80021e8 <GetButtonEvent+0x60>
 80021be:	e051      	b.n	8002264 <GetButtonEvent+0xdc>
		case BUTTON_UNCHANGED:
			if (ButtonPattern) {
 80021c0:	89bb      	ldrh	r3, [r7, #12]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d049      	beq.n	800225a <GetButtonEvent+0xd2>
				/*	Have at least 1 activated button whose pattern has not changed.
					Therefore need to see if a timed button event is required.
				*/
				index=FindTimedButtonEvent(ButtonEventList,ButtonPattern);
 80021c6:	89bb      	ldrh	r3, [r7, #12]
 80021c8:	4619      	mov	r1, r3
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7ff ff16 	bl	8001ffc <FindTimedButtonEvent>
 80021d0:	4603      	mov	r3, r0
 80021d2:	72fb      	strb	r3, [r7, #11]
				if (index>=0) {
 80021d4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	db3e      	blt.n	800225a <GetButtonEvent+0xd2>
					ButtonEvent=index;
 80021dc:	7afb      	ldrb	r3, [r7, #11]
 80021de:	73fb      	strb	r3, [r7, #15]
					/* Need to indicate an event having occurred. */
					PendingSwitchEvent=FALSE;
 80021e0:	4b25      	ldr	r3, [pc, #148]	; (8002278 <GetButtonEvent+0xf0>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	701a      	strb	r2, [r3, #0]
				}
			}
			break;
 80021e6:	e038      	b.n	800225a <GetButtonEvent+0xd2>
		case BUTTON_ACTIVATED:
			/*	Have at least 1 button which has activated.  Therefore need to see if
				this event is required.  If this button is not required in any pattern,
				then return with "illegal button activation" event.
			*/
			index=FindButtonEvent(ButtonEventList,ButtonPattern,TRUE);
 80021e8:	89bb      	ldrh	r3, [r7, #12]
 80021ea:	22ff      	movs	r2, #255	; 0xff
 80021ec:	4619      	mov	r1, r3
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f7ff ff5f 	bl	80020b2 <FindButtonEvent>
 80021f4:	4603      	mov	r3, r0
 80021f6:	72fb      	strb	r3, [r7, #11]
			if (index>=0) {
 80021f8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	db05      	blt.n	800220c <GetButtonEvent+0x84>
				ButtonEvent=index;
 8002200:	7afb      	ldrb	r3, [r7, #11]
 8002202:	73fb      	strb	r3, [r7, #15]
				/* Need to indicate an event having occurred. */
				PendingSwitchEvent=FALSE;
 8002204:	4b1c      	ldr	r3, [pc, #112]	; (8002278 <GetButtonEvent+0xf0>)
 8002206:	2200      	movs	r2, #0
 8002208:	701a      	strb	r2, [r3, #0]
				PendingSwitchEvent=TRUE;
				/* Need to see if this button pattern is required at all. */
				if (ButtonNotUsed(ButtonEventList,LastButtonPattern^ButtonPattern))
					ButtonEvent=ILLEGAL_BUTTON_ACTIVATION;
			}
			break;
 800220a:	e028      	b.n	800225e <GetButtonEvent+0xd6>
				PendingSwitchEvent=TRUE;
 800220c:	4b1a      	ldr	r3, [pc, #104]	; (8002278 <GetButtonEvent+0xf0>)
 800220e:	22ff      	movs	r2, #255	; 0xff
 8002210:	701a      	strb	r2, [r3, #0]
				if (ButtonNotUsed(ButtonEventList,LastButtonPattern^ButtonPattern))
 8002212:	4b1a      	ldr	r3, [pc, #104]	; (800227c <GetButtonEvent+0xf4>)
 8002214:	881a      	ldrh	r2, [r3, #0]
 8002216:	89bb      	ldrh	r3, [r7, #12]
 8002218:	4053      	eors	r3, r2
 800221a:	b29b      	uxth	r3, r3
 800221c:	4619      	mov	r1, r3
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f7ff ff28 	bl	8002074 <ButtonNotUsed>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d019      	beq.n	800225e <GetButtonEvent+0xd6>
					ButtonEvent=ILLEGAL_BUTTON_ACTIVATION;
 800222a:	23fe      	movs	r3, #254	; 0xfe
 800222c:	73fb      	strb	r3, [r7, #15]
			break;
 800222e:	e016      	b.n	800225e <GetButtonEvent+0xd6>
		case BUTTON_DEACTIVATED:
			/*	Have at least 1 button which has deactivated.
				Therefore need to see if this event is required.
			*/
			index=FindButtonEvent(ButtonEventList,LastButtonPattern,FALSE);
 8002230:	4b12      	ldr	r3, [pc, #72]	; (800227c <GetButtonEvent+0xf4>)
 8002232:	881b      	ldrh	r3, [r3, #0]
 8002234:	2200      	movs	r2, #0
 8002236:	4619      	mov	r1, r3
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f7ff ff3a 	bl	80020b2 <FindButtonEvent>
 800223e:	4603      	mov	r3, r0
 8002240:	72fb      	strb	r3, [r7, #11]
			if (index>=0) {
 8002242:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002246:	2b00      	cmp	r3, #0
 8002248:	db0b      	blt.n	8002262 <GetButtonEvent+0xda>
				ButtonEvent=index;
 800224a:	7afb      	ldrb	r3, [r7, #11]
 800224c:	73fb      	strb	r3, [r7, #15]
				/* Need to indicate an event having occurred. */
				PendingSwitchEvent=FALSE;
 800224e:	4b0a      	ldr	r3, [pc, #40]	; (8002278 <GetButtonEvent+0xf0>)
 8002250:	2200      	movs	r2, #0
 8002252:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002254:	e005      	b.n	8002262 <GetButtonEvent+0xda>
		}
	}
 8002256:	bf00      	nop
 8002258:	e004      	b.n	8002264 <GetButtonEvent+0xdc>
			break;
 800225a:	bf00      	nop
 800225c:	e002      	b.n	8002264 <GetButtonEvent+0xdc>
			break;
 800225e:	bf00      	nop
 8002260:	e000      	b.n	8002264 <GetButtonEvent+0xdc>
			break;
 8002262:	bf00      	nop
	/* Save button pattern history. */
	LastButtonPattern=ButtonPattern;
 8002264:	4a05      	ldr	r2, [pc, #20]	; (800227c <GetButtonEvent+0xf4>)
 8002266:	89bb      	ldrh	r3, [r7, #12]
 8002268:	8013      	strh	r3, [r2, #0]
	/* Return with the button event. */
	return(ButtonEvent);
 800226a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800226e:	4618      	mov	r0, r3
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	200003d0 	.word	0x200003d0
 800227c:	200003d2 	.word	0x200003d2

08002280 <SinglePressBeep>:
		>=0 ===> Have a valid button event, this being the corresponding
					index of ButtonEventList[].
		-1 ===> No button event (NO_BUTTONS).
		-2 ===> Illegal button activation event (ILLEGAL_BUTTON_ACTIVATION).
*/
signed char SinglePressBeep( const struct ButtonEventStruct *ButtonEventList) {
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
	signed char	Button;
	/* See if a forced button is pending (this being a non-NULL pointer). */
	if (ForcedButton) {
 8002288:	4b17      	ldr	r3, [pc, #92]	; (80022e8 <SinglePressBeep+0x68>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d011      	beq.n	80022b4 <SinglePressBeep+0x34>
		/*	A forced button takes priority over a front panel button.
			Must have immediate response to a forced button.
		*/
		Button=FindForcedButtonEvent(ButtonEventList,ForcedButton);
 8002290:	4b15      	ldr	r3, [pc, #84]	; (80022e8 <SinglePressBeep+0x68>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4619      	mov	r1, r3
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 f841 	bl	800231e <FindForcedButtonEvent>
 800229c:	4603      	mov	r3, r0
 800229e:	73fb      	strb	r3, [r7, #15]
		ForcedButton=NULL_POINTER;
 80022a0:	4b11      	ldr	r3, [pc, #68]	; (80022e8 <SinglePressBeep+0x68>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]
		/* Return if there is a valid forced button event. */
		if (Button>=0) return(Button);
 80022a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	db02      	blt.n	80022b4 <SinglePressBeep+0x34>
 80022ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022b2:	e015      	b.n	80022e0 <SinglePressBeep+0x60>
		button event.
	*/
	/* See if the button presses are locked out. */
//	if ( BeepTimer ) return(NO_BUTTONS);
	/* See if a controller button event has occurred. */
	Button = GetButtonEvent(ButtonEventList);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f7ff ff67 	bl	8002188 <GetButtonEvent>
 80022ba:	4603      	mov	r3, r0
 80022bc:	73fb      	strb	r3, [r7, #15]
	if (Button!=NO_BUTTONS) {
 80022be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c6:	d009      	beq.n	80022dc <SinglePressBeep+0x5c>
		/*	A button press has occurred, and so do normal
			beep, locking out the button presses during
			the beep.
		*/
		if (Button!=ILLEGAL_BUTTON_ACTIVATION) DoNormalBeep();
 80022c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022cc:	f113 0f02 	cmn.w	r3, #2
 80022d0:	d002      	beq.n	80022d8 <SinglePressBeep+0x58>
 80022d2:	f7ff f9ed 	bl	80016b0 <DoNormalBeep>
 80022d6:	e001      	b.n	80022dc <SinglePressBeep+0x5c>
		else DoErrorBeep();
 80022d8:	f7ff f9f4 	bl	80016c4 <DoErrorBeep>
	}
	return(Button);
 80022dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3710      	adds	r7, #16
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	200003c8 	.word	0x200003c8

080022ec <DoButtonFunction>:
	"SinglePressBeep()"), by calling the corresponding response function as listed
	in "function[]".  The return status is:-
	<0 ===> No button event.
	>=0 ===> Have responded to a button event, return value = event index of "ButtonEvents[]".
*/
signed char DoButtonFunction(const struct ButtonEventStruct *ButtonEvents, const unsigned int *function) {
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
//	short rtn;
    signed char	ButtonPress;
    /* See if there is a button event. */
    ButtonPress = SinglePressBeep(ButtonEvents);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f7ff ffc2 	bl	8002280 <SinglePressBeep>
 80022fc:	4603      	mov	r3, r0
 80022fe:	73fb      	strb	r3, [r7, #15]
    if (ButtonPress>=0) {
 8002300:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002304:	2b00      	cmp	r3, #0
 8002306:	db04      	blt.n	8002312 <DoButtonFunction+0x26>
	   	/*	There is a button event, and so call the corresponding response function,
   			returning with the function's return value.
	   	*/
//		rtn = CallFunction(function,(unsigned char) ButtonPress);
		CallFunction(function,(unsigned char) ButtonPress);
 8002308:	7bfb      	ldrb	r3, [r7, #15]
 800230a:	4619      	mov	r1, r3
 800230c:	6838      	ldr	r0, [r7, #0]
 800230e:	f000 f84e 	bl	80023ae <CallFunction>
	}
   	/* Return with which button being pressed, if any. */
    return(ButtonPress);
 8002312:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002316:	4618      	mov	r0, r3
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <FindForcedButtonEvent>:
	The return value is:-
			>=0 ===> Event was in list, the return value being the "ButtonEventList[]" index.
			-1 ===> Event was not in the list.
*/
signed char FindForcedButtonEvent(const struct ButtonEventStruct *ButtonEventList,
		const struct ButtonEventStruct *ForcedButtonEvent) {
 800231e:	b480      	push	{r7}
 8002320:	b085      	sub	sp, #20
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
 8002326:	6039      	str	r1, [r7, #0]
	signed char index=0;
 8002328:	2300      	movs	r3, #0
 800232a:	73fb      	strb	r3, [r7, #15]
	/* Search the list for the event. */
	while (GetConstUINT(&(ButtonEventList->Buttons))!=0) {
 800232c:	e033      	b.n	8002396 <FindForcedButtonEvent+0x78>
		/* See if this is the event. */
		if ((GetConstUINT(&(ButtonEventList->Buttons))==GetConstUINT(&(ForcedButtonEvent->Buttons)))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	429a      	cmp	r2, r3
 8002338:	d124      	bne.n	8002384 <FindForcedButtonEvent+0x66>
				&&(GetConstUCHAR(&(ButtonEventList->Activate))==GetConstUCHAR(&(ForcedButtonEvent->Activate)))) {
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	3302      	adds	r3, #2
 800233e:	f993 2000 	ldrsb.w	r2, [r3]
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	3302      	adds	r3, #2
 8002346:	f993 3000 	ldrsb.w	r3, [r3]
 800234a:	429a      	cmp	r2, r3
 800234c:	d11a      	bne.n	8002384 <FindForcedButtonEvent+0x66>
			/*	Both the button pattern and ACTIVATE type matches.  If "ForcedButtonEvent"
				is a timed button event, then there is a match if "ButtonEventList[]"
				contains the same timed button event, even though the time period might
				be different.
			*/
			if (((GetConstUCHAR(&(ForcedButtonEvent->Seconds))==0)&&(GetConstUCHAR(&(ButtonEventList->Seconds))==0))
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	3303      	adds	r3, #3
 8002352:	f993 3000 	ldrsb.w	r3, [r3]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d105      	bne.n	8002366 <FindForcedButtonEvent+0x48>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	3303      	adds	r3, #3
 800235e:	f993 3000 	ldrsb.w	r3, [r3]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00b      	beq.n	800237e <FindForcedButtonEvent+0x60>
					||((GetConstUCHAR(&(ForcedButtonEvent->Seconds))!=0)&&(GetConstUCHAR(&(ButtonEventList->Seconds))!=0))) {
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	3303      	adds	r3, #3
 800236a:	f993 3000 	ldrsb.w	r3, [r3]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d008      	beq.n	8002384 <FindForcedButtonEvent+0x66>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	3303      	adds	r3, #3
 8002376:	f993 3000 	ldrsb.w	r3, [r3]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d002      	beq.n	8002384 <FindForcedButtonEvent+0x66>
				/* Have found the event. */
				return(index);
 800237e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002382:	e00e      	b.n	80023a2 <FindForcedButtonEvent+0x84>
			}
		}
		/* Keep searching. */
		index++;
 8002384:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002388:	b2db      	uxtb	r3, r3
 800238a:	3301      	adds	r3, #1
 800238c:	b2db      	uxtb	r3, r3
 800238e:	73fb      	strb	r3, [r7, #15]
		ButtonEventList++;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3304      	adds	r3, #4
 8002394:	607b      	str	r3, [r7, #4]
	while (GetConstUINT(&(ButtonEventList->Buttons))!=0) {
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1c7      	bne.n	800232e <FindForcedButtonEvent+0x10>
	}
	/* The given event was not found. */
	return(-1);
 800239e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3714      	adds	r7, #20
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr

080023ae <CallFunction>:
/*	This routine calls a function whose address is in the ROM-resident
	"FunctionTable" at "index".
	Special Note:	The called function can return "void", "BOOL",
						"unsigned char", "char", "unsigned short", or "short".
*/
short CallFunction(const unsigned int *FunctionTable, unsigned char index) {
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b084      	sub	sp, #16
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
 80023b6:	460b      	mov	r3, r1
 80023b8:	70fb      	strb	r3, [r7, #3]
	/* Get the pointer to the indexed function. */
	short (*ptr) ();
	ptr=(short(*)()) GetConstWord((signed char*) (FunctionTable+index));
 80023ba:	78fb      	ldrb	r3, [r7, #3]
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	4413      	add	r3, r2
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	60fb      	str	r3, [r7, #12]
	/* Call the indexed function. */
	return((*ptr)());
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	4798      	blx	r3
 80023ca:	4603      	mov	r3, r0
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3710      	adds	r7, #16
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <DoTimers>:
/**********************************************************************************/
//unsigned short Led_index;

/* Update all system timers.
	Caution:	This routine must not read the EEPROM.*/
void DoTimers( void ) {
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
	unsigned short TimebaseCount;
	/* Read the number of timebase interrupts since last time. */
//	di();
	TimebaseCount = InterruptCount;
 80023da:	4b40      	ldr	r3, [pc, #256]	; (80024dc <DoTimers+0x108>)
 80023dc:	881b      	ldrh	r3, [r3, #0]
 80023de:	b29b      	uxth	r3, r3
 80023e0:	80fb      	strh	r3, [r7, #6]
	InterruptCount=0;
 80023e2:	4b3e      	ldr	r3, [pc, #248]	; (80024dc <DoTimers+0x108>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	801a      	strh	r2, [r3, #0]
//	ei();

    UpdateBuzzerTimer(&BuzzerControl, &TimebaseCount);
 80023e8:	1dbb      	adds	r3, r7, #6
 80023ea:	4619      	mov	r1, r3
 80023ec:	483c      	ldr	r0, [pc, #240]	; (80024e0 <DoTimers+0x10c>)
 80023ee:	f7ff f907 	bl	8001600 <UpdateBuzzerTimer>
	if (Timer_10mS > ((unsigned short) TimebaseCount)){
 80023f2:	4b3c      	ldr	r3, [pc, #240]	; (80024e4 <DoTimers+0x110>)
 80023f4:	881a      	ldrh	r2, [r3, #0]
 80023f6:	88fb      	ldrh	r3, [r7, #6]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d907      	bls.n	800240c <DoTimers+0x38>
		Timer_10mS -= TimebaseCount;
 80023fc:	4b39      	ldr	r3, [pc, #228]	; (80024e4 <DoTimers+0x110>)
 80023fe:	881a      	ldrh	r2, [r3, #0]
 8002400:	88fb      	ldrh	r3, [r7, #6]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	b29a      	uxth	r2, r3
 8002406:	4b37      	ldr	r3, [pc, #220]	; (80024e4 <DoTimers+0x110>)
 8002408:	801a      	strh	r2, [r3, #0]
 800240a:	e00b      	b.n	8002424 <DoTimers+0x50>
	}
	else {
		/* Get here every 10 millisecond. */
		if (Time_10mS>=TimebaseCount) Timer_10mS += Time_10mS-TimebaseCount;
 800240c:	88fb      	ldrh	r3, [r7, #6]
 800240e:	2b0a      	cmp	r3, #10
 8002410:	d808      	bhi.n	8002424 <DoTimers+0x50>
 8002412:	4b34      	ldr	r3, [pc, #208]	; (80024e4 <DoTimers+0x110>)
 8002414:	881a      	ldrh	r2, [r3, #0]
 8002416:	88fb      	ldrh	r3, [r7, #6]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	b29b      	uxth	r3, r3
 800241c:	330a      	adds	r3, #10
 800241e:	b29a      	uxth	r2, r3
 8002420:	4b30      	ldr	r3, [pc, #192]	; (80024e4 <DoTimers+0x110>)
 8002422:	801a      	strh	r2, [r3, #0]
	}
	
	if (Timer_100mS > ((unsigned short) TimebaseCount))
 8002424:	4b30      	ldr	r3, [pc, #192]	; (80024e8 <DoTimers+0x114>)
 8002426:	881a      	ldrh	r2, [r3, #0]
 8002428:	88fb      	ldrh	r3, [r7, #6]
 800242a:	429a      	cmp	r2, r3
 800242c:	d907      	bls.n	800243e <DoTimers+0x6a>
		Timer_100mS -= TimebaseCount;
 800242e:	4b2e      	ldr	r3, [pc, #184]	; (80024e8 <DoTimers+0x114>)
 8002430:	881a      	ldrh	r2, [r3, #0]
 8002432:	88fb      	ldrh	r3, [r7, #6]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	b29a      	uxth	r2, r3
 8002438:	4b2b      	ldr	r3, [pc, #172]	; (80024e8 <DoTimers+0x114>)
 800243a:	801a      	strh	r2, [r3, #0]
 800243c:	e00f      	b.n	800245e <DoTimers+0x8a>
	else {
		/* Get here every 100 millisecond. */
		if (Time_100mS>=TimebaseCount) Timer_100mS += Time_100mS-TimebaseCount;
 800243e:	88fb      	ldrh	r3, [r7, #6]
 8002440:	2b64      	cmp	r3, #100	; 0x64
 8002442:	d808      	bhi.n	8002456 <DoTimers+0x82>
 8002444:	4b28      	ldr	r3, [pc, #160]	; (80024e8 <DoTimers+0x114>)
 8002446:	881a      	ldrh	r2, [r3, #0]
 8002448:	88fb      	ldrh	r3, [r7, #6]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	b29b      	uxth	r3, r3
 800244e:	3364      	adds	r3, #100	; 0x64
 8002450:	b29a      	uxth	r2, r3
 8002452:	4b25      	ldr	r3, [pc, #148]	; (80024e8 <DoTimers+0x114>)
 8002454:	801a      	strh	r2, [r3, #0]
		ToggleLEDstate(&RawLEDdata,LED_STATUS_LEFT);
 8002456:	2101      	movs	r1, #1
 8002458:	4824      	ldr	r0, [pc, #144]	; (80024ec <DoTimers+0x118>)
 800245a:	f7ff fbda 	bl	8001c12 <ToggleLEDstate>
	}
	/*	Decrement "SecondTimer" accordingly. */
	if (SecondTimer>((unsigned short) TimebaseCount))
 800245e:	4b24      	ldr	r3, [pc, #144]	; (80024f0 <DoTimers+0x11c>)
 8002460:	881a      	ldrh	r2, [r3, #0]
 8002462:	88fb      	ldrh	r3, [r7, #6]
 8002464:	429a      	cmp	r2, r3
 8002466:	d907      	bls.n	8002478 <DoTimers+0xa4>
		SecondTimer -= TimebaseCount;
 8002468:	4b21      	ldr	r3, [pc, #132]	; (80024f0 <DoTimers+0x11c>)
 800246a:	881a      	ldrh	r2, [r3, #0]
 800246c:	88fb      	ldrh	r3, [r7, #6]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	b29a      	uxth	r2, r3
 8002472:	4b1f      	ldr	r3, [pc, #124]	; (80024f0 <DoTimers+0x11c>)
 8002474:	801a      	strh	r2, [r3, #0]
		if (buttonTimer>0)buttonTimer--;
		if (appSecTimer>0)appSecTimer--;
		if (lcdSecTimer>0)lcdSecTimer--;

	}
}
 8002476:	e02c      	b.n	80024d2 <DoTimers+0xfe>
		if (SecondTimer>=TimebaseCount) SecondTimer += Time_1S - TimebaseCount;
 8002478:	4b1d      	ldr	r3, [pc, #116]	; (80024f0 <DoTimers+0x11c>)
 800247a:	881a      	ldrh	r2, [r3, #0]
 800247c:	88fb      	ldrh	r3, [r7, #6]
 800247e:	429a      	cmp	r2, r3
 8002480:	d309      	bcc.n	8002496 <DoTimers+0xc2>
 8002482:	4b1b      	ldr	r3, [pc, #108]	; (80024f0 <DoTimers+0x11c>)
 8002484:	881a      	ldrh	r2, [r3, #0]
 8002486:	88fb      	ldrh	r3, [r7, #6]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	b29b      	uxth	r3, r3
 800248c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002490:	b29a      	uxth	r2, r3
 8002492:	4b17      	ldr	r3, [pc, #92]	; (80024f0 <DoTimers+0x11c>)
 8002494:	801a      	strh	r2, [r3, #0]
		if (buttonTimer>0)buttonTimer--;
 8002496:	4b17      	ldr	r3, [pc, #92]	; (80024f4 <DoTimers+0x120>)
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d005      	beq.n	80024aa <DoTimers+0xd6>
 800249e:	4b15      	ldr	r3, [pc, #84]	; (80024f4 <DoTimers+0x120>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	3b01      	subs	r3, #1
 80024a4:	b2da      	uxtb	r2, r3
 80024a6:	4b13      	ldr	r3, [pc, #76]	; (80024f4 <DoTimers+0x120>)
 80024a8:	701a      	strb	r2, [r3, #0]
		if (appSecTimer>0)appSecTimer--;
 80024aa:	4b13      	ldr	r3, [pc, #76]	; (80024f8 <DoTimers+0x124>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d005      	beq.n	80024be <DoTimers+0xea>
 80024b2:	4b11      	ldr	r3, [pc, #68]	; (80024f8 <DoTimers+0x124>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	3b01      	subs	r3, #1
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	4b0f      	ldr	r3, [pc, #60]	; (80024f8 <DoTimers+0x124>)
 80024bc:	701a      	strb	r2, [r3, #0]
		if (lcdSecTimer>0)lcdSecTimer--;
 80024be:	4b0f      	ldr	r3, [pc, #60]	; (80024fc <DoTimers+0x128>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d005      	beq.n	80024d2 <DoTimers+0xfe>
 80024c6:	4b0d      	ldr	r3, [pc, #52]	; (80024fc <DoTimers+0x128>)
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	3b01      	subs	r3, #1
 80024cc:	b2da      	uxtb	r2, r3
 80024ce:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <DoTimers+0x128>)
 80024d0:	701a      	strb	r2, [r3, #0]
}
 80024d2:	bf00      	nop
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	200003dc 	.word	0x200003dc
 80024e0:	200003ac 	.word	0x200003ac
 80024e4:	200003d8 	.word	0x200003d8
 80024e8:	200003d6 	.word	0x200003d6
 80024ec:	200003c2 	.word	0x200003c2
 80024f0:	200003da 	.word	0x200003da
 80024f4:	200003d1 	.word	0x200003d1
 80024f8:	200003bc 	.word	0x200003bc
 80024fc:	200003be 	.word	0x200003be

08002500 <HAL_IncTick>:
void HAL_SYSTICK_Callback(void){
	;
}

void HAL_IncTick(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
	uwTick += uwTickFreq;
 8002504:	4b09      	ldr	r3, [pc, #36]	; (800252c <HAL_IncTick+0x2c>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	461a      	mov	r2, r3
 800250a:	4b09      	ldr	r3, [pc, #36]	; (8002530 <HAL_IncTick+0x30>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4413      	add	r3, r2
 8002510:	4a07      	ldr	r2, [pc, #28]	; (8002530 <HAL_IncTick+0x30>)
 8002512:	6013      	str	r3, [r2, #0]
	/* Increment the timebase count once every interrupt. */
	InterruptCount++;
 8002514:	4b07      	ldr	r3, [pc, #28]	; (8002534 <HAL_IncTick+0x34>)
 8002516:	881b      	ldrh	r3, [r3, #0]
 8002518:	b29b      	uxth	r3, r3
 800251a:	3301      	adds	r3, #1
 800251c:	b29a      	uxth	r2, r3
 800251e:	4b05      	ldr	r3, [pc, #20]	; (8002534 <HAL_IncTick+0x34>)
 8002520:	801a      	strh	r2, [r3, #0]
	/* Start A/D conversion of the next channel. */
}
 8002522:	bf00      	nop
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	2000000c 	.word	0x2000000c
 8002530:	200003e0 	.word	0x200003e0
 8002534:	200003dc 	.word	0x200003dc

08002538 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800253c:	4b0e      	ldr	r3, [pc, #56]	; (8002578 <HAL_Init+0x40>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a0d      	ldr	r2, [pc, #52]	; (8002578 <HAL_Init+0x40>)
 8002542:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002546:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002548:	4b0b      	ldr	r3, [pc, #44]	; (8002578 <HAL_Init+0x40>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a0a      	ldr	r2, [pc, #40]	; (8002578 <HAL_Init+0x40>)
 800254e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002552:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002554:	4b08      	ldr	r3, [pc, #32]	; (8002578 <HAL_Init+0x40>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a07      	ldr	r2, [pc, #28]	; (8002578 <HAL_Init+0x40>)
 800255a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800255e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002560:	2003      	movs	r0, #3
 8002562:	f000 fb89 	bl	8002c78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002566:	200f      	movs	r0, #15
 8002568:	f000 f808 	bl	800257c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800256c:	f7fe fc6e 	bl	8000e4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	40023c00 	.word	0x40023c00

0800257c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002584:	4b12      	ldr	r3, [pc, #72]	; (80025d0 <HAL_InitTick+0x54>)
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	4b12      	ldr	r3, [pc, #72]	; (80025d4 <HAL_InitTick+0x58>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	4619      	mov	r1, r3
 800258e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002592:	fbb3 f3f1 	udiv	r3, r3, r1
 8002596:	fbb2 f3f3 	udiv	r3, r2, r3
 800259a:	4618      	mov	r0, r3
 800259c:	f000 fba1 	bl	8002ce2 <HAL_SYSTICK_Config>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e00e      	b.n	80025c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2b0f      	cmp	r3, #15
 80025ae:	d80a      	bhi.n	80025c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025b0:	2200      	movs	r2, #0
 80025b2:	6879      	ldr	r1, [r7, #4]
 80025b4:	f04f 30ff 	mov.w	r0, #4294967295
 80025b8:	f000 fb69 	bl	8002c8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025bc:	4a06      	ldr	r2, [pc, #24]	; (80025d8 <HAL_InitTick+0x5c>)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025c2:	2300      	movs	r3, #0
 80025c4:	e000      	b.n	80025c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	20000000 	.word	0x20000000
 80025d4:	2000000c 	.word	0x2000000c
 80025d8:	20000008 	.word	0x20000008

080025dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  return uwTick;
 80025e0:	4b03      	ldr	r3, [pc, #12]	; (80025f0 <HAL_GetTick+0x14>)
 80025e2:	681b      	ldr	r3, [r3, #0]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	200003e0 	.word	0x200003e0

080025f4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025fc:	2300      	movs	r3, #0
 80025fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e033      	b.n	8002672 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	2b00      	cmp	r3, #0
 8002610:	d109      	bne.n	8002626 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f7fe fc42 	bl	8000e9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	f003 0310 	and.w	r3, r3, #16
 800262e:	2b00      	cmp	r3, #0
 8002630:	d118      	bne.n	8002664 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002636:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800263a:	f023 0302 	bic.w	r3, r3, #2
 800263e:	f043 0202 	orr.w	r2, r3, #2
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 f94a 	bl	80028e0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	f023 0303 	bic.w	r3, r3, #3
 800265a:	f043 0201 	orr.w	r2, r3, #1
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	641a      	str	r2, [r3, #64]	; 0x40
 8002662:	e001      	b.n	8002668 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002670:	7bfb      	ldrb	r3, [r7, #15]
}
 8002672:	4618      	mov	r0, r3
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
	...

0800267c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800267c:	b480      	push	{r7}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002686:	2300      	movs	r3, #0
 8002688:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002690:	2b01      	cmp	r3, #1
 8002692:	d101      	bne.n	8002698 <HAL_ADC_ConfigChannel+0x1c>
 8002694:	2302      	movs	r3, #2
 8002696:	e113      	b.n	80028c0 <HAL_ADC_ConfigChannel+0x244>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2b09      	cmp	r3, #9
 80026a6:	d925      	bls.n	80026f4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68d9      	ldr	r1, [r3, #12]
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	461a      	mov	r2, r3
 80026b6:	4613      	mov	r3, r2
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	4413      	add	r3, r2
 80026bc:	3b1e      	subs	r3, #30
 80026be:	2207      	movs	r2, #7
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	43da      	mvns	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	400a      	ands	r2, r1
 80026cc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68d9      	ldr	r1, [r3, #12]
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	b29b      	uxth	r3, r3
 80026de:	4618      	mov	r0, r3
 80026e0:	4603      	mov	r3, r0
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	4403      	add	r3, r0
 80026e6:	3b1e      	subs	r3, #30
 80026e8:	409a      	lsls	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	430a      	orrs	r2, r1
 80026f0:	60da      	str	r2, [r3, #12]
 80026f2:	e022      	b.n	800273a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6919      	ldr	r1, [r3, #16]
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	b29b      	uxth	r3, r3
 8002700:	461a      	mov	r2, r3
 8002702:	4613      	mov	r3, r2
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	4413      	add	r3, r2
 8002708:	2207      	movs	r2, #7
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	43da      	mvns	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	400a      	ands	r2, r1
 8002716:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6919      	ldr	r1, [r3, #16]
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	689a      	ldr	r2, [r3, #8]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	b29b      	uxth	r3, r3
 8002728:	4618      	mov	r0, r3
 800272a:	4603      	mov	r3, r0
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	4403      	add	r3, r0
 8002730:	409a      	lsls	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	430a      	orrs	r2, r1
 8002738:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	2b06      	cmp	r3, #6
 8002740:	d824      	bhi.n	800278c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685a      	ldr	r2, [r3, #4]
 800274c:	4613      	mov	r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	4413      	add	r3, r2
 8002752:	3b05      	subs	r3, #5
 8002754:	221f      	movs	r2, #31
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	43da      	mvns	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	400a      	ands	r2, r1
 8002762:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	b29b      	uxth	r3, r3
 8002770:	4618      	mov	r0, r3
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685a      	ldr	r2, [r3, #4]
 8002776:	4613      	mov	r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	4413      	add	r3, r2
 800277c:	3b05      	subs	r3, #5
 800277e:	fa00 f203 	lsl.w	r2, r0, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	430a      	orrs	r2, r1
 8002788:	635a      	str	r2, [r3, #52]	; 0x34
 800278a:	e04c      	b.n	8002826 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	2b0c      	cmp	r3, #12
 8002792:	d824      	bhi.n	80027de <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685a      	ldr	r2, [r3, #4]
 800279e:	4613      	mov	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	4413      	add	r3, r2
 80027a4:	3b23      	subs	r3, #35	; 0x23
 80027a6:	221f      	movs	r2, #31
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	43da      	mvns	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	400a      	ands	r2, r1
 80027b4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	4618      	mov	r0, r3
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	4613      	mov	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4413      	add	r3, r2
 80027ce:	3b23      	subs	r3, #35	; 0x23
 80027d0:	fa00 f203 	lsl.w	r2, r0, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	430a      	orrs	r2, r1
 80027da:	631a      	str	r2, [r3, #48]	; 0x30
 80027dc:	e023      	b.n	8002826 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	4613      	mov	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	4413      	add	r3, r2
 80027ee:	3b41      	subs	r3, #65	; 0x41
 80027f0:	221f      	movs	r2, #31
 80027f2:	fa02 f303 	lsl.w	r3, r2, r3
 80027f6:	43da      	mvns	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	400a      	ands	r2, r1
 80027fe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	b29b      	uxth	r3, r3
 800280c:	4618      	mov	r0, r3
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685a      	ldr	r2, [r3, #4]
 8002812:	4613      	mov	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	4413      	add	r3, r2
 8002818:	3b41      	subs	r3, #65	; 0x41
 800281a:	fa00 f203 	lsl.w	r2, r0, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	430a      	orrs	r2, r1
 8002824:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002826:	4b29      	ldr	r3, [pc, #164]	; (80028cc <HAL_ADC_ConfigChannel+0x250>)
 8002828:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a28      	ldr	r2, [pc, #160]	; (80028d0 <HAL_ADC_ConfigChannel+0x254>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d10f      	bne.n	8002854 <HAL_ADC_ConfigChannel+0x1d8>
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2b12      	cmp	r3, #18
 800283a:	d10b      	bne.n	8002854 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a1d      	ldr	r2, [pc, #116]	; (80028d0 <HAL_ADC_ConfigChannel+0x254>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d12b      	bne.n	80028b6 <HAL_ADC_ConfigChannel+0x23a>
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a1c      	ldr	r2, [pc, #112]	; (80028d4 <HAL_ADC_ConfigChannel+0x258>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d003      	beq.n	8002870 <HAL_ADC_ConfigChannel+0x1f4>
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2b11      	cmp	r3, #17
 800286e:	d122      	bne.n	80028b6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a11      	ldr	r2, [pc, #68]	; (80028d4 <HAL_ADC_ConfigChannel+0x258>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d111      	bne.n	80028b6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002892:	4b11      	ldr	r3, [pc, #68]	; (80028d8 <HAL_ADC_ConfigChannel+0x25c>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a11      	ldr	r2, [pc, #68]	; (80028dc <HAL_ADC_ConfigChannel+0x260>)
 8002898:	fba2 2303 	umull	r2, r3, r2, r3
 800289c:	0c9a      	lsrs	r2, r3, #18
 800289e:	4613      	mov	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4413      	add	r3, r2
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80028a8:	e002      	b.n	80028b0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	3b01      	subs	r3, #1
 80028ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1f9      	bne.n	80028aa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3714      	adds	r7, #20
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr
 80028cc:	40012300 	.word	0x40012300
 80028d0:	40012000 	.word	0x40012000
 80028d4:	10000012 	.word	0x10000012
 80028d8:	20000000 	.word	0x20000000
 80028dc:	431bde83 	.word	0x431bde83

080028e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028e8:	4b79      	ldr	r3, [pc, #484]	; (8002ad0 <ADC_Init+0x1f0>)
 80028ea:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	431a      	orrs	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002914:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	6859      	ldr	r1, [r3, #4]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	021a      	lsls	r2, r3, #8
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	430a      	orrs	r2, r1
 8002928:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	685a      	ldr	r2, [r3, #4]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002938:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	6859      	ldr	r1, [r3, #4]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689a      	ldr	r2, [r3, #8]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	430a      	orrs	r2, r1
 800294a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689a      	ldr	r2, [r3, #8]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800295a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6899      	ldr	r1, [r3, #8]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	68da      	ldr	r2, [r3, #12]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	430a      	orrs	r2, r1
 800296c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002972:	4a58      	ldr	r2, [pc, #352]	; (8002ad4 <ADC_Init+0x1f4>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d022      	beq.n	80029be <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	689a      	ldr	r2, [r3, #8]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002986:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	6899      	ldr	r1, [r3, #8]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	430a      	orrs	r2, r1
 8002998:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	689a      	ldr	r2, [r3, #8]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	6899      	ldr	r1, [r3, #8]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	430a      	orrs	r2, r1
 80029ba:	609a      	str	r2, [r3, #8]
 80029bc:	e00f      	b.n	80029de <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 0202 	bic.w	r2, r2, #2
 80029ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	6899      	ldr	r1, [r3, #8]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	7e1b      	ldrb	r3, [r3, #24]
 80029f8:	005a      	lsls	r2, r3, #1
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	430a      	orrs	r2, r1
 8002a00:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d01b      	beq.n	8002a44 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	685a      	ldr	r2, [r3, #4]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a1a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	685a      	ldr	r2, [r3, #4]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002a2a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6859      	ldr	r1, [r3, #4]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a36:	3b01      	subs	r3, #1
 8002a38:	035a      	lsls	r2, r3, #13
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	605a      	str	r2, [r3, #4]
 8002a42:	e007      	b.n	8002a54 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	685a      	ldr	r2, [r3, #4]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a52:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a62:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	051a      	lsls	r2, r3, #20
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	430a      	orrs	r2, r1
 8002a78:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	6899      	ldr	r1, [r3, #8]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a96:	025a      	lsls	r2, r3, #9
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689a      	ldr	r2, [r3, #8]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6899      	ldr	r1, [r3, #8]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	029a      	lsls	r2, r3, #10
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	609a      	str	r2, [r3, #8]
}
 8002ac4:	bf00      	nop
 8002ac6:	3714      	adds	r7, #20
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr
 8002ad0:	40012300 	.word	0x40012300
 8002ad4:	0f000001 	.word	0x0f000001

08002ad8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ae8:	4b0c      	ldr	r3, [pc, #48]	; (8002b1c <__NVIC_SetPriorityGrouping+0x44>)
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002af4:	4013      	ands	r3, r2
 8002af6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b0a:	4a04      	ldr	r2, [pc, #16]	; (8002b1c <__NVIC_SetPriorityGrouping+0x44>)
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	60d3      	str	r3, [r2, #12]
}
 8002b10:	bf00      	nop
 8002b12:	3714      	adds	r7, #20
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	e000ed00 	.word	0xe000ed00

08002b20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b24:	4b04      	ldr	r3, [pc, #16]	; (8002b38 <__NVIC_GetPriorityGrouping+0x18>)
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	0a1b      	lsrs	r3, r3, #8
 8002b2a:	f003 0307 	and.w	r3, r3, #7
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	e000ed00 	.word	0xe000ed00

08002b3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	4603      	mov	r3, r0
 8002b44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	db0b      	blt.n	8002b66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b4e:	79fb      	ldrb	r3, [r7, #7]
 8002b50:	f003 021f 	and.w	r2, r3, #31
 8002b54:	4907      	ldr	r1, [pc, #28]	; (8002b74 <__NVIC_EnableIRQ+0x38>)
 8002b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5a:	095b      	lsrs	r3, r3, #5
 8002b5c:	2001      	movs	r0, #1
 8002b5e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	e000e100 	.word	0xe000e100

08002b78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	4603      	mov	r3, r0
 8002b80:	6039      	str	r1, [r7, #0]
 8002b82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	db0a      	blt.n	8002ba2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	b2da      	uxtb	r2, r3
 8002b90:	490c      	ldr	r1, [pc, #48]	; (8002bc4 <__NVIC_SetPriority+0x4c>)
 8002b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b96:	0112      	lsls	r2, r2, #4
 8002b98:	b2d2      	uxtb	r2, r2
 8002b9a:	440b      	add	r3, r1
 8002b9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ba0:	e00a      	b.n	8002bb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	b2da      	uxtb	r2, r3
 8002ba6:	4908      	ldr	r1, [pc, #32]	; (8002bc8 <__NVIC_SetPriority+0x50>)
 8002ba8:	79fb      	ldrb	r3, [r7, #7]
 8002baa:	f003 030f 	and.w	r3, r3, #15
 8002bae:	3b04      	subs	r3, #4
 8002bb0:	0112      	lsls	r2, r2, #4
 8002bb2:	b2d2      	uxtb	r2, r2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	761a      	strb	r2, [r3, #24]
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	e000e100 	.word	0xe000e100
 8002bc8:	e000ed00 	.word	0xe000ed00

08002bcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b089      	sub	sp, #36	; 0x24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f003 0307 	and.w	r3, r3, #7
 8002bde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	f1c3 0307 	rsb	r3, r3, #7
 8002be6:	2b04      	cmp	r3, #4
 8002be8:	bf28      	it	cs
 8002bea:	2304      	movcs	r3, #4
 8002bec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	3304      	adds	r3, #4
 8002bf2:	2b06      	cmp	r3, #6
 8002bf4:	d902      	bls.n	8002bfc <NVIC_EncodePriority+0x30>
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	3b03      	subs	r3, #3
 8002bfa:	e000      	b.n	8002bfe <NVIC_EncodePriority+0x32>
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c00:	f04f 32ff 	mov.w	r2, #4294967295
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	43da      	mvns	r2, r3
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	401a      	ands	r2, r3
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c14:	f04f 31ff 	mov.w	r1, #4294967295
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c1e:	43d9      	mvns	r1, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c24:	4313      	orrs	r3, r2
         );
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3724      	adds	r7, #36	; 0x24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
	...

08002c34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c44:	d301      	bcc.n	8002c4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c46:	2301      	movs	r3, #1
 8002c48:	e00f      	b.n	8002c6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c4a:	4a0a      	ldr	r2, [pc, #40]	; (8002c74 <SysTick_Config+0x40>)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c52:	210f      	movs	r1, #15
 8002c54:	f04f 30ff 	mov.w	r0, #4294967295
 8002c58:	f7ff ff8e 	bl	8002b78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c5c:	4b05      	ldr	r3, [pc, #20]	; (8002c74 <SysTick_Config+0x40>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c62:	4b04      	ldr	r3, [pc, #16]	; (8002c74 <SysTick_Config+0x40>)
 8002c64:	2207      	movs	r2, #7
 8002c66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	e000e010 	.word	0xe000e010

08002c78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f7ff ff29 	bl	8002ad8 <__NVIC_SetPriorityGrouping>
}
 8002c86:	bf00      	nop
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b086      	sub	sp, #24
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	4603      	mov	r3, r0
 8002c96:	60b9      	str	r1, [r7, #8]
 8002c98:	607a      	str	r2, [r7, #4]
 8002c9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ca0:	f7ff ff3e 	bl	8002b20 <__NVIC_GetPriorityGrouping>
 8002ca4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	68b9      	ldr	r1, [r7, #8]
 8002caa:	6978      	ldr	r0, [r7, #20]
 8002cac:	f7ff ff8e 	bl	8002bcc <NVIC_EncodePriority>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cb6:	4611      	mov	r1, r2
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7ff ff5d 	bl	8002b78 <__NVIC_SetPriority>
}
 8002cbe:	bf00      	nop
 8002cc0:	3718      	adds	r7, #24
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b082      	sub	sp, #8
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	4603      	mov	r3, r0
 8002cce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7ff ff31 	bl	8002b3c <__NVIC_EnableIRQ>
}
 8002cda:	bf00      	nop
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b082      	sub	sp, #8
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f7ff ffa2 	bl	8002c34 <SysTick_Config>
 8002cf0:	4603      	mov	r3, r0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
	...

08002cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b089      	sub	sp, #36	; 0x24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d06:	2300      	movs	r3, #0
 8002d08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d12:	2300      	movs	r3, #0
 8002d14:	61fb      	str	r3, [r7, #28]
 8002d16:	e165      	b.n	8002fe4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d18:	2201      	movs	r2, #1
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	f040 8154 	bne.w	8002fde <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f003 0303 	and.w	r3, r3, #3
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d005      	beq.n	8002d4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d130      	bne.n	8002db0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	2203      	movs	r2, #3
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	43db      	mvns	r3, r3
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	4013      	ands	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	68da      	ldr	r2, [r3, #12]
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d84:	2201      	movs	r2, #1
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	4013      	ands	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	091b      	lsrs	r3, r3, #4
 8002d9a:	f003 0201 	and.w	r2, r3, #1
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f003 0303 	and.w	r3, r3, #3
 8002db8:	2b03      	cmp	r3, #3
 8002dba:	d017      	beq.n	8002dec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	2203      	movs	r2, #3
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f003 0303 	and.w	r3, r3, #3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d123      	bne.n	8002e40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	08da      	lsrs	r2, r3, #3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	3208      	adds	r2, #8
 8002e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	f003 0307 	and.w	r3, r3, #7
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	220f      	movs	r2, #15
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	43db      	mvns	r3, r3
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	691a      	ldr	r2, [r3, #16]
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	f003 0307 	and.w	r3, r3, #7
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	08da      	lsrs	r2, r3, #3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	3208      	adds	r2, #8
 8002e3a:	69b9      	ldr	r1, [r7, #24]
 8002e3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	2203      	movs	r2, #3
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	43db      	mvns	r3, r3
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	4013      	ands	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f003 0203 	and.w	r2, r3, #3
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f000 80ae 	beq.w	8002fde <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e82:	2300      	movs	r3, #0
 8002e84:	60fb      	str	r3, [r7, #12]
 8002e86:	4b5d      	ldr	r3, [pc, #372]	; (8002ffc <HAL_GPIO_Init+0x300>)
 8002e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8a:	4a5c      	ldr	r2, [pc, #368]	; (8002ffc <HAL_GPIO_Init+0x300>)
 8002e8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e90:	6453      	str	r3, [r2, #68]	; 0x44
 8002e92:	4b5a      	ldr	r3, [pc, #360]	; (8002ffc <HAL_GPIO_Init+0x300>)
 8002e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e9a:	60fb      	str	r3, [r7, #12]
 8002e9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e9e:	4a58      	ldr	r2, [pc, #352]	; (8003000 <HAL_GPIO_Init+0x304>)
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	089b      	lsrs	r3, r3, #2
 8002ea4:	3302      	adds	r3, #2
 8002ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	f003 0303 	and.w	r3, r3, #3
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	220f      	movs	r2, #15
 8002eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eba:	43db      	mvns	r3, r3
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a4f      	ldr	r2, [pc, #316]	; (8003004 <HAL_GPIO_Init+0x308>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d025      	beq.n	8002f16 <HAL_GPIO_Init+0x21a>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a4e      	ldr	r2, [pc, #312]	; (8003008 <HAL_GPIO_Init+0x30c>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d01f      	beq.n	8002f12 <HAL_GPIO_Init+0x216>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a4d      	ldr	r2, [pc, #308]	; (800300c <HAL_GPIO_Init+0x310>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d019      	beq.n	8002f0e <HAL_GPIO_Init+0x212>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a4c      	ldr	r2, [pc, #304]	; (8003010 <HAL_GPIO_Init+0x314>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d013      	beq.n	8002f0a <HAL_GPIO_Init+0x20e>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a4b      	ldr	r2, [pc, #300]	; (8003014 <HAL_GPIO_Init+0x318>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d00d      	beq.n	8002f06 <HAL_GPIO_Init+0x20a>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a4a      	ldr	r2, [pc, #296]	; (8003018 <HAL_GPIO_Init+0x31c>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d007      	beq.n	8002f02 <HAL_GPIO_Init+0x206>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a49      	ldr	r2, [pc, #292]	; (800301c <HAL_GPIO_Init+0x320>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d101      	bne.n	8002efe <HAL_GPIO_Init+0x202>
 8002efa:	2306      	movs	r3, #6
 8002efc:	e00c      	b.n	8002f18 <HAL_GPIO_Init+0x21c>
 8002efe:	2307      	movs	r3, #7
 8002f00:	e00a      	b.n	8002f18 <HAL_GPIO_Init+0x21c>
 8002f02:	2305      	movs	r3, #5
 8002f04:	e008      	b.n	8002f18 <HAL_GPIO_Init+0x21c>
 8002f06:	2304      	movs	r3, #4
 8002f08:	e006      	b.n	8002f18 <HAL_GPIO_Init+0x21c>
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e004      	b.n	8002f18 <HAL_GPIO_Init+0x21c>
 8002f0e:	2302      	movs	r3, #2
 8002f10:	e002      	b.n	8002f18 <HAL_GPIO_Init+0x21c>
 8002f12:	2301      	movs	r3, #1
 8002f14:	e000      	b.n	8002f18 <HAL_GPIO_Init+0x21c>
 8002f16:	2300      	movs	r3, #0
 8002f18:	69fa      	ldr	r2, [r7, #28]
 8002f1a:	f002 0203 	and.w	r2, r2, #3
 8002f1e:	0092      	lsls	r2, r2, #2
 8002f20:	4093      	lsls	r3, r2
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f28:	4935      	ldr	r1, [pc, #212]	; (8003000 <HAL_GPIO_Init+0x304>)
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	089b      	lsrs	r3, r3, #2
 8002f2e:	3302      	adds	r3, #2
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f36:	4b3a      	ldr	r3, [pc, #232]	; (8003020 <HAL_GPIO_Init+0x324>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	43db      	mvns	r3, r3
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	4013      	ands	r3, r2
 8002f44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d003      	beq.n	8002f5a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f5a:	4a31      	ldr	r2, [pc, #196]	; (8003020 <HAL_GPIO_Init+0x324>)
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002f60:	4b2f      	ldr	r3, [pc, #188]	; (8003020 <HAL_GPIO_Init+0x324>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d003      	beq.n	8002f84 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f84:	4a26      	ldr	r2, [pc, #152]	; (8003020 <HAL_GPIO_Init+0x324>)
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f8a:	4b25      	ldr	r3, [pc, #148]	; (8003020 <HAL_GPIO_Init+0x324>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	43db      	mvns	r3, r3
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	4013      	ands	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d003      	beq.n	8002fae <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fae:	4a1c      	ldr	r2, [pc, #112]	; (8003020 <HAL_GPIO_Init+0x324>)
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fb4:	4b1a      	ldr	r3, [pc, #104]	; (8003020 <HAL_GPIO_Init+0x324>)
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d003      	beq.n	8002fd8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fd8:	4a11      	ldr	r2, [pc, #68]	; (8003020 <HAL_GPIO_Init+0x324>)
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	61fb      	str	r3, [r7, #28]
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	2b0f      	cmp	r3, #15
 8002fe8:	f67f ae96 	bls.w	8002d18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fec:	bf00      	nop
 8002fee:	bf00      	nop
 8002ff0:	3724      	adds	r7, #36	; 0x24
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	40023800 	.word	0x40023800
 8003000:	40013800 	.word	0x40013800
 8003004:	40020000 	.word	0x40020000
 8003008:	40020400 	.word	0x40020400
 800300c:	40020800 	.word	0x40020800
 8003010:	40020c00 	.word	0x40020c00
 8003014:	40021000 	.word	0x40021000
 8003018:	40021400 	.word	0x40021400
 800301c:	40021800 	.word	0x40021800
 8003020:	40013c00 	.word	0x40013c00

08003024 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	460b      	mov	r3, r1
 800302e:	807b      	strh	r3, [r7, #2]
 8003030:	4613      	mov	r3, r2
 8003032:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003034:	787b      	ldrb	r3, [r7, #1]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d003      	beq.n	8003042 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800303a:	887a      	ldrh	r2, [r7, #2]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003040:	e003      	b.n	800304a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003042:	887b      	ldrh	r3, [r7, #2]
 8003044:	041a      	lsls	r2, r3, #16
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	619a      	str	r2, [r3, #24]
}
 800304a:	bf00      	nop
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
	...

08003058 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e12b      	b.n	80032c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b00      	cmp	r3, #0
 8003074:	d106      	bne.n	8003084 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7fd ff50 	bl	8000f24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2224      	movs	r2, #36	; 0x24
 8003088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 0201 	bic.w	r2, r2, #1
 800309a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030bc:	f000 faf0 	bl	80036a0 <HAL_RCC_GetPCLK1Freq>
 80030c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	4a81      	ldr	r2, [pc, #516]	; (80032cc <HAL_I2C_Init+0x274>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d807      	bhi.n	80030dc <HAL_I2C_Init+0x84>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	4a80      	ldr	r2, [pc, #512]	; (80032d0 <HAL_I2C_Init+0x278>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	bf94      	ite	ls
 80030d4:	2301      	movls	r3, #1
 80030d6:	2300      	movhi	r3, #0
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	e006      	b.n	80030ea <HAL_I2C_Init+0x92>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	4a7d      	ldr	r2, [pc, #500]	; (80032d4 <HAL_I2C_Init+0x27c>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	bf94      	ite	ls
 80030e4:	2301      	movls	r3, #1
 80030e6:	2300      	movhi	r3, #0
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e0e7      	b.n	80032c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	4a78      	ldr	r2, [pc, #480]	; (80032d8 <HAL_I2C_Init+0x280>)
 80030f6:	fba2 2303 	umull	r2, r3, r2, r3
 80030fa:	0c9b      	lsrs	r3, r3, #18
 80030fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68ba      	ldr	r2, [r7, #8]
 800310e:	430a      	orrs	r2, r1
 8003110:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	6a1b      	ldr	r3, [r3, #32]
 8003118:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	4a6a      	ldr	r2, [pc, #424]	; (80032cc <HAL_I2C_Init+0x274>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d802      	bhi.n	800312c <HAL_I2C_Init+0xd4>
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	3301      	adds	r3, #1
 800312a:	e009      	b.n	8003140 <HAL_I2C_Init+0xe8>
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003132:	fb02 f303 	mul.w	r3, r2, r3
 8003136:	4a69      	ldr	r2, [pc, #420]	; (80032dc <HAL_I2C_Init+0x284>)
 8003138:	fba2 2303 	umull	r2, r3, r2, r3
 800313c:	099b      	lsrs	r3, r3, #6
 800313e:	3301      	adds	r3, #1
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	6812      	ldr	r2, [r2, #0]
 8003144:	430b      	orrs	r3, r1
 8003146:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003152:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	495c      	ldr	r1, [pc, #368]	; (80032cc <HAL_I2C_Init+0x274>)
 800315c:	428b      	cmp	r3, r1
 800315e:	d819      	bhi.n	8003194 <HAL_I2C_Init+0x13c>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	1e59      	subs	r1, r3, #1
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	fbb1 f3f3 	udiv	r3, r1, r3
 800316e:	1c59      	adds	r1, r3, #1
 8003170:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003174:	400b      	ands	r3, r1
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00a      	beq.n	8003190 <HAL_I2C_Init+0x138>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	1e59      	subs	r1, r3, #1
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	005b      	lsls	r3, r3, #1
 8003184:	fbb1 f3f3 	udiv	r3, r1, r3
 8003188:	3301      	adds	r3, #1
 800318a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800318e:	e051      	b.n	8003234 <HAL_I2C_Init+0x1dc>
 8003190:	2304      	movs	r3, #4
 8003192:	e04f      	b.n	8003234 <HAL_I2C_Init+0x1dc>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d111      	bne.n	80031c0 <HAL_I2C_Init+0x168>
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	1e58      	subs	r0, r3, #1
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6859      	ldr	r1, [r3, #4]
 80031a4:	460b      	mov	r3, r1
 80031a6:	005b      	lsls	r3, r3, #1
 80031a8:	440b      	add	r3, r1
 80031aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80031ae:	3301      	adds	r3, #1
 80031b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	bf0c      	ite	eq
 80031b8:	2301      	moveq	r3, #1
 80031ba:	2300      	movne	r3, #0
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	e012      	b.n	80031e6 <HAL_I2C_Init+0x18e>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	1e58      	subs	r0, r3, #1
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6859      	ldr	r1, [r3, #4]
 80031c8:	460b      	mov	r3, r1
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	440b      	add	r3, r1
 80031ce:	0099      	lsls	r1, r3, #2
 80031d0:	440b      	add	r3, r1
 80031d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80031d6:	3301      	adds	r3, #1
 80031d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031dc:	2b00      	cmp	r3, #0
 80031de:	bf0c      	ite	eq
 80031e0:	2301      	moveq	r3, #1
 80031e2:	2300      	movne	r3, #0
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d001      	beq.n	80031ee <HAL_I2C_Init+0x196>
 80031ea:	2301      	movs	r3, #1
 80031ec:	e022      	b.n	8003234 <HAL_I2C_Init+0x1dc>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d10e      	bne.n	8003214 <HAL_I2C_Init+0x1bc>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	1e58      	subs	r0, r3, #1
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6859      	ldr	r1, [r3, #4]
 80031fe:	460b      	mov	r3, r1
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	440b      	add	r3, r1
 8003204:	fbb0 f3f3 	udiv	r3, r0, r3
 8003208:	3301      	adds	r3, #1
 800320a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800320e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003212:	e00f      	b.n	8003234 <HAL_I2C_Init+0x1dc>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	1e58      	subs	r0, r3, #1
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6859      	ldr	r1, [r3, #4]
 800321c:	460b      	mov	r3, r1
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	440b      	add	r3, r1
 8003222:	0099      	lsls	r1, r3, #2
 8003224:	440b      	add	r3, r1
 8003226:	fbb0 f3f3 	udiv	r3, r0, r3
 800322a:	3301      	adds	r3, #1
 800322c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003230:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003234:	6879      	ldr	r1, [r7, #4]
 8003236:	6809      	ldr	r1, [r1, #0]
 8003238:	4313      	orrs	r3, r2
 800323a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	69da      	ldr	r2, [r3, #28]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	431a      	orrs	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	430a      	orrs	r2, r1
 8003256:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003262:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	6911      	ldr	r1, [r2, #16]
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	68d2      	ldr	r2, [r2, #12]
 800326e:	4311      	orrs	r1, r2
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	6812      	ldr	r2, [r2, #0]
 8003274:	430b      	orrs	r3, r1
 8003276:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	695a      	ldr	r2, [r3, #20]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	431a      	orrs	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	430a      	orrs	r2, r1
 8003292:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f042 0201 	orr.w	r2, r2, #1
 80032a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2220      	movs	r2, #32
 80032ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3710      	adds	r7, #16
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	000186a0 	.word	0x000186a0
 80032d0:	001e847f 	.word	0x001e847f
 80032d4:	003d08ff 	.word	0x003d08ff
 80032d8:	431bde83 	.word	0x431bde83
 80032dc:	10624dd3 	.word	0x10624dd3

080032e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d101      	bne.n	80032f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e0cc      	b.n	800348e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032f4:	4b68      	ldr	r3, [pc, #416]	; (8003498 <HAL_RCC_ClockConfig+0x1b8>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0307 	and.w	r3, r3, #7
 80032fc:	683a      	ldr	r2, [r7, #0]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d90c      	bls.n	800331c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003302:	4b65      	ldr	r3, [pc, #404]	; (8003498 <HAL_RCC_ClockConfig+0x1b8>)
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	b2d2      	uxtb	r2, r2
 8003308:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800330a:	4b63      	ldr	r3, [pc, #396]	; (8003498 <HAL_RCC_ClockConfig+0x1b8>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0307 	and.w	r3, r3, #7
 8003312:	683a      	ldr	r2, [r7, #0]
 8003314:	429a      	cmp	r2, r3
 8003316:	d001      	beq.n	800331c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e0b8      	b.n	800348e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d020      	beq.n	800336a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0304 	and.w	r3, r3, #4
 8003330:	2b00      	cmp	r3, #0
 8003332:	d005      	beq.n	8003340 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003334:	4b59      	ldr	r3, [pc, #356]	; (800349c <HAL_RCC_ClockConfig+0x1bc>)
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	4a58      	ldr	r2, [pc, #352]	; (800349c <HAL_RCC_ClockConfig+0x1bc>)
 800333a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800333e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0308 	and.w	r3, r3, #8
 8003348:	2b00      	cmp	r3, #0
 800334a:	d005      	beq.n	8003358 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800334c:	4b53      	ldr	r3, [pc, #332]	; (800349c <HAL_RCC_ClockConfig+0x1bc>)
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	4a52      	ldr	r2, [pc, #328]	; (800349c <HAL_RCC_ClockConfig+0x1bc>)
 8003352:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003356:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003358:	4b50      	ldr	r3, [pc, #320]	; (800349c <HAL_RCC_ClockConfig+0x1bc>)
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	494d      	ldr	r1, [pc, #308]	; (800349c <HAL_RCC_ClockConfig+0x1bc>)
 8003366:	4313      	orrs	r3, r2
 8003368:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	2b00      	cmp	r3, #0
 8003374:	d044      	beq.n	8003400 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d107      	bne.n	800338e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800337e:	4b47      	ldr	r3, [pc, #284]	; (800349c <HAL_RCC_ClockConfig+0x1bc>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d119      	bne.n	80033be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e07f      	b.n	800348e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	2b02      	cmp	r3, #2
 8003394:	d003      	beq.n	800339e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800339a:	2b03      	cmp	r3, #3
 800339c:	d107      	bne.n	80033ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800339e:	4b3f      	ldr	r3, [pc, #252]	; (800349c <HAL_RCC_ClockConfig+0x1bc>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d109      	bne.n	80033be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e06f      	b.n	800348e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ae:	4b3b      	ldr	r3, [pc, #236]	; (800349c <HAL_RCC_ClockConfig+0x1bc>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d101      	bne.n	80033be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e067      	b.n	800348e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033be:	4b37      	ldr	r3, [pc, #220]	; (800349c <HAL_RCC_ClockConfig+0x1bc>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f023 0203 	bic.w	r2, r3, #3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	4934      	ldr	r1, [pc, #208]	; (800349c <HAL_RCC_ClockConfig+0x1bc>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033d0:	f7ff f904 	bl	80025dc <HAL_GetTick>
 80033d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033d6:	e00a      	b.n	80033ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033d8:	f7ff f900 	bl	80025dc <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e04f      	b.n	800348e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ee:	4b2b      	ldr	r3, [pc, #172]	; (800349c <HAL_RCC_ClockConfig+0x1bc>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f003 020c 	and.w	r2, r3, #12
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d1eb      	bne.n	80033d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003400:	4b25      	ldr	r3, [pc, #148]	; (8003498 <HAL_RCC_ClockConfig+0x1b8>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0307 	and.w	r3, r3, #7
 8003408:	683a      	ldr	r2, [r7, #0]
 800340a:	429a      	cmp	r2, r3
 800340c:	d20c      	bcs.n	8003428 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800340e:	4b22      	ldr	r3, [pc, #136]	; (8003498 <HAL_RCC_ClockConfig+0x1b8>)
 8003410:	683a      	ldr	r2, [r7, #0]
 8003412:	b2d2      	uxtb	r2, r2
 8003414:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003416:	4b20      	ldr	r3, [pc, #128]	; (8003498 <HAL_RCC_ClockConfig+0x1b8>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0307 	and.w	r3, r3, #7
 800341e:	683a      	ldr	r2, [r7, #0]
 8003420:	429a      	cmp	r2, r3
 8003422:	d001      	beq.n	8003428 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e032      	b.n	800348e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0304 	and.w	r3, r3, #4
 8003430:	2b00      	cmp	r3, #0
 8003432:	d008      	beq.n	8003446 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003434:	4b19      	ldr	r3, [pc, #100]	; (800349c <HAL_RCC_ClockConfig+0x1bc>)
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	4916      	ldr	r1, [pc, #88]	; (800349c <HAL_RCC_ClockConfig+0x1bc>)
 8003442:	4313      	orrs	r3, r2
 8003444:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0308 	and.w	r3, r3, #8
 800344e:	2b00      	cmp	r3, #0
 8003450:	d009      	beq.n	8003466 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003452:	4b12      	ldr	r3, [pc, #72]	; (800349c <HAL_RCC_ClockConfig+0x1bc>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	490e      	ldr	r1, [pc, #56]	; (800349c <HAL_RCC_ClockConfig+0x1bc>)
 8003462:	4313      	orrs	r3, r2
 8003464:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003466:	f000 f82d 	bl	80034c4 <HAL_RCC_GetSysClockFreq>
 800346a:	4602      	mov	r2, r0
 800346c:	4b0b      	ldr	r3, [pc, #44]	; (800349c <HAL_RCC_ClockConfig+0x1bc>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	091b      	lsrs	r3, r3, #4
 8003472:	f003 030f 	and.w	r3, r3, #15
 8003476:	490a      	ldr	r1, [pc, #40]	; (80034a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003478:	5ccb      	ldrb	r3, [r1, r3]
 800347a:	fa22 f303 	lsr.w	r3, r2, r3
 800347e:	4a09      	ldr	r2, [pc, #36]	; (80034a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003480:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003482:	4b09      	ldr	r3, [pc, #36]	; (80034a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4618      	mov	r0, r3
 8003488:	f7ff f878 	bl	800257c <HAL_InitTick>

  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	40023c00 	.word	0x40023c00
 800349c:	40023800 	.word	0x40023800
 80034a0:	08004e18 	.word	0x08004e18
 80034a4:	20000000 	.word	0x20000000
 80034a8:	20000008 	.word	0x20000008

080034ac <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80034b0:	4b03      	ldr	r3, [pc, #12]	; (80034c0 <HAL_RCC_EnableCSS+0x14>)
 80034b2:	2201      	movs	r2, #1
 80034b4:	601a      	str	r2, [r3, #0]
}
 80034b6:	bf00      	nop
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr
 80034c0:	4247004c 	.word	0x4247004c

080034c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034c4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80034c8:	b084      	sub	sp, #16
 80034ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80034cc:	2300      	movs	r3, #0
 80034ce:	607b      	str	r3, [r7, #4]
 80034d0:	2300      	movs	r3, #0
 80034d2:	60fb      	str	r3, [r7, #12]
 80034d4:	2300      	movs	r3, #0
 80034d6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80034d8:	2300      	movs	r3, #0
 80034da:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034dc:	4b67      	ldr	r3, [pc, #412]	; (800367c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f003 030c 	and.w	r3, r3, #12
 80034e4:	2b08      	cmp	r3, #8
 80034e6:	d00d      	beq.n	8003504 <HAL_RCC_GetSysClockFreq+0x40>
 80034e8:	2b08      	cmp	r3, #8
 80034ea:	f200 80bd 	bhi.w	8003668 <HAL_RCC_GetSysClockFreq+0x1a4>
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d002      	beq.n	80034f8 <HAL_RCC_GetSysClockFreq+0x34>
 80034f2:	2b04      	cmp	r3, #4
 80034f4:	d003      	beq.n	80034fe <HAL_RCC_GetSysClockFreq+0x3a>
 80034f6:	e0b7      	b.n	8003668 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034f8:	4b61      	ldr	r3, [pc, #388]	; (8003680 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80034fa:	60bb      	str	r3, [r7, #8]
       break;
 80034fc:	e0b7      	b.n	800366e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034fe:	4b61      	ldr	r3, [pc, #388]	; (8003684 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003500:	60bb      	str	r3, [r7, #8]
      break;
 8003502:	e0b4      	b.n	800366e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003504:	4b5d      	ldr	r3, [pc, #372]	; (800367c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800350c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800350e:	4b5b      	ldr	r3, [pc, #364]	; (800367c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d04d      	beq.n	80035b6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800351a:	4b58      	ldr	r3, [pc, #352]	; (800367c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	099b      	lsrs	r3, r3, #6
 8003520:	461a      	mov	r2, r3
 8003522:	f04f 0300 	mov.w	r3, #0
 8003526:	f240 10ff 	movw	r0, #511	; 0x1ff
 800352a:	f04f 0100 	mov.w	r1, #0
 800352e:	ea02 0800 	and.w	r8, r2, r0
 8003532:	ea03 0901 	and.w	r9, r3, r1
 8003536:	4640      	mov	r0, r8
 8003538:	4649      	mov	r1, r9
 800353a:	f04f 0200 	mov.w	r2, #0
 800353e:	f04f 0300 	mov.w	r3, #0
 8003542:	014b      	lsls	r3, r1, #5
 8003544:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003548:	0142      	lsls	r2, r0, #5
 800354a:	4610      	mov	r0, r2
 800354c:	4619      	mov	r1, r3
 800354e:	ebb0 0008 	subs.w	r0, r0, r8
 8003552:	eb61 0109 	sbc.w	r1, r1, r9
 8003556:	f04f 0200 	mov.w	r2, #0
 800355a:	f04f 0300 	mov.w	r3, #0
 800355e:	018b      	lsls	r3, r1, #6
 8003560:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003564:	0182      	lsls	r2, r0, #6
 8003566:	1a12      	subs	r2, r2, r0
 8003568:	eb63 0301 	sbc.w	r3, r3, r1
 800356c:	f04f 0000 	mov.w	r0, #0
 8003570:	f04f 0100 	mov.w	r1, #0
 8003574:	00d9      	lsls	r1, r3, #3
 8003576:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800357a:	00d0      	lsls	r0, r2, #3
 800357c:	4602      	mov	r2, r0
 800357e:	460b      	mov	r3, r1
 8003580:	eb12 0208 	adds.w	r2, r2, r8
 8003584:	eb43 0309 	adc.w	r3, r3, r9
 8003588:	f04f 0000 	mov.w	r0, #0
 800358c:	f04f 0100 	mov.w	r1, #0
 8003590:	0259      	lsls	r1, r3, #9
 8003592:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003596:	0250      	lsls	r0, r2, #9
 8003598:	4602      	mov	r2, r0
 800359a:	460b      	mov	r3, r1
 800359c:	4610      	mov	r0, r2
 800359e:	4619      	mov	r1, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	461a      	mov	r2, r3
 80035a4:	f04f 0300 	mov.w	r3, #0
 80035a8:	f7fc fe36 	bl	8000218 <__aeabi_uldivmod>
 80035ac:	4602      	mov	r2, r0
 80035ae:	460b      	mov	r3, r1
 80035b0:	4613      	mov	r3, r2
 80035b2:	60fb      	str	r3, [r7, #12]
 80035b4:	e04a      	b.n	800364c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035b6:	4b31      	ldr	r3, [pc, #196]	; (800367c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	099b      	lsrs	r3, r3, #6
 80035bc:	461a      	mov	r2, r3
 80035be:	f04f 0300 	mov.w	r3, #0
 80035c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80035c6:	f04f 0100 	mov.w	r1, #0
 80035ca:	ea02 0400 	and.w	r4, r2, r0
 80035ce:	ea03 0501 	and.w	r5, r3, r1
 80035d2:	4620      	mov	r0, r4
 80035d4:	4629      	mov	r1, r5
 80035d6:	f04f 0200 	mov.w	r2, #0
 80035da:	f04f 0300 	mov.w	r3, #0
 80035de:	014b      	lsls	r3, r1, #5
 80035e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80035e4:	0142      	lsls	r2, r0, #5
 80035e6:	4610      	mov	r0, r2
 80035e8:	4619      	mov	r1, r3
 80035ea:	1b00      	subs	r0, r0, r4
 80035ec:	eb61 0105 	sbc.w	r1, r1, r5
 80035f0:	f04f 0200 	mov.w	r2, #0
 80035f4:	f04f 0300 	mov.w	r3, #0
 80035f8:	018b      	lsls	r3, r1, #6
 80035fa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80035fe:	0182      	lsls	r2, r0, #6
 8003600:	1a12      	subs	r2, r2, r0
 8003602:	eb63 0301 	sbc.w	r3, r3, r1
 8003606:	f04f 0000 	mov.w	r0, #0
 800360a:	f04f 0100 	mov.w	r1, #0
 800360e:	00d9      	lsls	r1, r3, #3
 8003610:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003614:	00d0      	lsls	r0, r2, #3
 8003616:	4602      	mov	r2, r0
 8003618:	460b      	mov	r3, r1
 800361a:	1912      	adds	r2, r2, r4
 800361c:	eb45 0303 	adc.w	r3, r5, r3
 8003620:	f04f 0000 	mov.w	r0, #0
 8003624:	f04f 0100 	mov.w	r1, #0
 8003628:	0299      	lsls	r1, r3, #10
 800362a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800362e:	0290      	lsls	r0, r2, #10
 8003630:	4602      	mov	r2, r0
 8003632:	460b      	mov	r3, r1
 8003634:	4610      	mov	r0, r2
 8003636:	4619      	mov	r1, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	461a      	mov	r2, r3
 800363c:	f04f 0300 	mov.w	r3, #0
 8003640:	f7fc fdea 	bl	8000218 <__aeabi_uldivmod>
 8003644:	4602      	mov	r2, r0
 8003646:	460b      	mov	r3, r1
 8003648:	4613      	mov	r3, r2
 800364a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800364c:	4b0b      	ldr	r3, [pc, #44]	; (800367c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	0c1b      	lsrs	r3, r3, #16
 8003652:	f003 0303 	and.w	r3, r3, #3
 8003656:	3301      	adds	r3, #1
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	fbb2 f3f3 	udiv	r3, r2, r3
 8003664:	60bb      	str	r3, [r7, #8]
      break;
 8003666:	e002      	b.n	800366e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003668:	4b05      	ldr	r3, [pc, #20]	; (8003680 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800366a:	60bb      	str	r3, [r7, #8]
      break;
 800366c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800366e:	68bb      	ldr	r3, [r7, #8]
}
 8003670:	4618      	mov	r0, r3
 8003672:	3710      	adds	r7, #16
 8003674:	46bd      	mov	sp, r7
 8003676:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800367a:	bf00      	nop
 800367c:	40023800 	.word	0x40023800
 8003680:	00f42400 	.word	0x00f42400
 8003684:	007a1200 	.word	0x007a1200

08003688 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003688:	b480      	push	{r7}
 800368a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800368c:	4b03      	ldr	r3, [pc, #12]	; (800369c <HAL_RCC_GetHCLKFreq+0x14>)
 800368e:	681b      	ldr	r3, [r3, #0]
}
 8003690:	4618      	mov	r0, r3
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	20000000 	.word	0x20000000

080036a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036a4:	f7ff fff0 	bl	8003688 <HAL_RCC_GetHCLKFreq>
 80036a8:	4602      	mov	r2, r0
 80036aa:	4b05      	ldr	r3, [pc, #20]	; (80036c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	0a9b      	lsrs	r3, r3, #10
 80036b0:	f003 0307 	and.w	r3, r3, #7
 80036b4:	4903      	ldr	r1, [pc, #12]	; (80036c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036b6:	5ccb      	ldrb	r3, [r1, r3]
 80036b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036bc:	4618      	mov	r0, r3
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	40023800 	.word	0x40023800
 80036c4:	08004e28 	.word	0x08004e28

080036c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036cc:	f7ff ffdc 	bl	8003688 <HAL_RCC_GetHCLKFreq>
 80036d0:	4602      	mov	r2, r0
 80036d2:	4b05      	ldr	r3, [pc, #20]	; (80036e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	0b5b      	lsrs	r3, r3, #13
 80036d8:	f003 0307 	and.w	r3, r3, #7
 80036dc:	4903      	ldr	r1, [pc, #12]	; (80036ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80036de:	5ccb      	ldrb	r3, [r1, r3]
 80036e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	40023800 	.word	0x40023800
 80036ec:	08004e28 	.word	0x08004e28

080036f0 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80036f4:	4b06      	ldr	r3, [pc, #24]	; (8003710 <HAL_RCC_NMI_IRQHandler+0x20>)
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036fc:	2b80      	cmp	r3, #128	; 0x80
 80036fe:	d104      	bne.n	800370a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8003700:	f000 f80a 	bl	8003718 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8003704:	4b03      	ldr	r3, [pc, #12]	; (8003714 <HAL_RCC_NMI_IRQHandler+0x24>)
 8003706:	2280      	movs	r2, #128	; 0x80
 8003708:	701a      	strb	r2, [r3, #0]
  }
}
 800370a:	bf00      	nop
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	40023800 	.word	0x40023800
 8003714:	4002380e 	.word	0x4002380e

08003718 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800371c:	bf00      	nop
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
	...

08003728 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e270      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	2b00      	cmp	r3, #0
 8003744:	d075      	beq.n	8003832 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003746:	4ba3      	ldr	r3, [pc, #652]	; (80039d4 <HAL_RCC_OscConfig+0x2ac>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 030c 	and.w	r3, r3, #12
 800374e:	2b04      	cmp	r3, #4
 8003750:	d00c      	beq.n	800376c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003752:	4ba0      	ldr	r3, [pc, #640]	; (80039d4 <HAL_RCC_OscConfig+0x2ac>)
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800375a:	2b08      	cmp	r3, #8
 800375c:	d112      	bne.n	8003784 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800375e:	4b9d      	ldr	r3, [pc, #628]	; (80039d4 <HAL_RCC_OscConfig+0x2ac>)
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003766:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800376a:	d10b      	bne.n	8003784 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800376c:	4b99      	ldr	r3, [pc, #612]	; (80039d4 <HAL_RCC_OscConfig+0x2ac>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d05b      	beq.n	8003830 <HAL_RCC_OscConfig+0x108>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d157      	bne.n	8003830 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e24b      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800378c:	d106      	bne.n	800379c <HAL_RCC_OscConfig+0x74>
 800378e:	4b91      	ldr	r3, [pc, #580]	; (80039d4 <HAL_RCC_OscConfig+0x2ac>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a90      	ldr	r2, [pc, #576]	; (80039d4 <HAL_RCC_OscConfig+0x2ac>)
 8003794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003798:	6013      	str	r3, [r2, #0]
 800379a:	e01d      	b.n	80037d8 <HAL_RCC_OscConfig+0xb0>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037a4:	d10c      	bne.n	80037c0 <HAL_RCC_OscConfig+0x98>
 80037a6:	4b8b      	ldr	r3, [pc, #556]	; (80039d4 <HAL_RCC_OscConfig+0x2ac>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a8a      	ldr	r2, [pc, #552]	; (80039d4 <HAL_RCC_OscConfig+0x2ac>)
 80037ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037b0:	6013      	str	r3, [r2, #0]
 80037b2:	4b88      	ldr	r3, [pc, #544]	; (80039d4 <HAL_RCC_OscConfig+0x2ac>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a87      	ldr	r2, [pc, #540]	; (80039d4 <HAL_RCC_OscConfig+0x2ac>)
 80037b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037bc:	6013      	str	r3, [r2, #0]
 80037be:	e00b      	b.n	80037d8 <HAL_RCC_OscConfig+0xb0>
 80037c0:	4b84      	ldr	r3, [pc, #528]	; (80039d4 <HAL_RCC_OscConfig+0x2ac>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a83      	ldr	r2, [pc, #524]	; (80039d4 <HAL_RCC_OscConfig+0x2ac>)
 80037c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ca:	6013      	str	r3, [r2, #0]
 80037cc:	4b81      	ldr	r3, [pc, #516]	; (80039d4 <HAL_RCC_OscConfig+0x2ac>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a80      	ldr	r2, [pc, #512]	; (80039d4 <HAL_RCC_OscConfig+0x2ac>)
 80037d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d013      	beq.n	8003808 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e0:	f7fe fefc 	bl	80025dc <HAL_GetTick>
 80037e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037e6:	e008      	b.n	80037fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037e8:	f7fe fef8 	bl	80025dc <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b64      	cmp	r3, #100	; 0x64
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e210      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037fa:	4b76      	ldr	r3, [pc, #472]	; (80039d4 <HAL_RCC_OscConfig+0x2ac>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d0f0      	beq.n	80037e8 <HAL_RCC_OscConfig+0xc0>
 8003806:	e014      	b.n	8003832 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003808:	f7fe fee8 	bl	80025dc <HAL_GetTick>
 800380c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800380e:	e008      	b.n	8003822 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003810:	f7fe fee4 	bl	80025dc <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b64      	cmp	r3, #100	; 0x64
 800381c:	d901      	bls.n	8003822 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e1fc      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003822:	4b6c      	ldr	r3, [pc, #432]	; (80039d4 <HAL_RCC_OscConfig+0x2ac>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1f0      	bne.n	8003810 <HAL_RCC_OscConfig+0xe8>
 800382e:	e000      	b.n	8003832 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003830:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d063      	beq.n	8003906 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800383e:	4b65      	ldr	r3, [pc, #404]	; (80039d4 <HAL_RCC_OscConfig+0x2ac>)
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f003 030c 	and.w	r3, r3, #12
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00b      	beq.n	8003862 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800384a:	4b62      	ldr	r3, [pc, #392]	; (80039d4 <HAL_RCC_OscConfig+0x2ac>)
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003852:	2b08      	cmp	r3, #8
 8003854:	d11c      	bne.n	8003890 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003856:	4b5f      	ldr	r3, [pc, #380]	; (80039d4 <HAL_RCC_OscConfig+0x2ac>)
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d116      	bne.n	8003890 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003862:	4b5c      	ldr	r3, [pc, #368]	; (80039d4 <HAL_RCC_OscConfig+0x2ac>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d005      	beq.n	800387a <HAL_RCC_OscConfig+0x152>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d001      	beq.n	800387a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e1d0      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800387a:	4b56      	ldr	r3, [pc, #344]	; (80039d4 <HAL_RCC_OscConfig+0x2ac>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	00db      	lsls	r3, r3, #3
 8003888:	4952      	ldr	r1, [pc, #328]	; (80039d4 <HAL_RCC_OscConfig+0x2ac>)
 800388a:	4313      	orrs	r3, r2
 800388c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800388e:	e03a      	b.n	8003906 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d020      	beq.n	80038da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003898:	4b4f      	ldr	r3, [pc, #316]	; (80039d8 <HAL_RCC_OscConfig+0x2b0>)
 800389a:	2201      	movs	r2, #1
 800389c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800389e:	f7fe fe9d 	bl	80025dc <HAL_GetTick>
 80038a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a4:	e008      	b.n	80038b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038a6:	f7fe fe99 	bl	80025dc <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d901      	bls.n	80038b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e1b1      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038b8:	4b46      	ldr	r3, [pc, #280]	; (80039d4 <HAL_RCC_OscConfig+0x2ac>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0f0      	beq.n	80038a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038c4:	4b43      	ldr	r3, [pc, #268]	; (80039d4 <HAL_RCC_OscConfig+0x2ac>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	00db      	lsls	r3, r3, #3
 80038d2:	4940      	ldr	r1, [pc, #256]	; (80039d4 <HAL_RCC_OscConfig+0x2ac>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	600b      	str	r3, [r1, #0]
 80038d8:	e015      	b.n	8003906 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038da:	4b3f      	ldr	r3, [pc, #252]	; (80039d8 <HAL_RCC_OscConfig+0x2b0>)
 80038dc:	2200      	movs	r2, #0
 80038de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e0:	f7fe fe7c 	bl	80025dc <HAL_GetTick>
 80038e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038e6:	e008      	b.n	80038fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038e8:	f7fe fe78 	bl	80025dc <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e190      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038fa:	4b36      	ldr	r3, [pc, #216]	; (80039d4 <HAL_RCC_OscConfig+0x2ac>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1f0      	bne.n	80038e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0308 	and.w	r3, r3, #8
 800390e:	2b00      	cmp	r3, #0
 8003910:	d030      	beq.n	8003974 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d016      	beq.n	8003948 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800391a:	4b30      	ldr	r3, [pc, #192]	; (80039dc <HAL_RCC_OscConfig+0x2b4>)
 800391c:	2201      	movs	r2, #1
 800391e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003920:	f7fe fe5c 	bl	80025dc <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003928:	f7fe fe58 	bl	80025dc <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e170      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800393a:	4b26      	ldr	r3, [pc, #152]	; (80039d4 <HAL_RCC_OscConfig+0x2ac>)
 800393c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d0f0      	beq.n	8003928 <HAL_RCC_OscConfig+0x200>
 8003946:	e015      	b.n	8003974 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003948:	4b24      	ldr	r3, [pc, #144]	; (80039dc <HAL_RCC_OscConfig+0x2b4>)
 800394a:	2200      	movs	r2, #0
 800394c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800394e:	f7fe fe45 	bl	80025dc <HAL_GetTick>
 8003952:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003954:	e008      	b.n	8003968 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003956:	f7fe fe41 	bl	80025dc <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	2b02      	cmp	r3, #2
 8003962:	d901      	bls.n	8003968 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e159      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003968:	4b1a      	ldr	r3, [pc, #104]	; (80039d4 <HAL_RCC_OscConfig+0x2ac>)
 800396a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1f0      	bne.n	8003956 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0304 	and.w	r3, r3, #4
 800397c:	2b00      	cmp	r3, #0
 800397e:	f000 80a0 	beq.w	8003ac2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003982:	2300      	movs	r3, #0
 8003984:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003986:	4b13      	ldr	r3, [pc, #76]	; (80039d4 <HAL_RCC_OscConfig+0x2ac>)
 8003988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10f      	bne.n	80039b2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003992:	2300      	movs	r3, #0
 8003994:	60bb      	str	r3, [r7, #8]
 8003996:	4b0f      	ldr	r3, [pc, #60]	; (80039d4 <HAL_RCC_OscConfig+0x2ac>)
 8003998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399a:	4a0e      	ldr	r2, [pc, #56]	; (80039d4 <HAL_RCC_OscConfig+0x2ac>)
 800399c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039a0:	6413      	str	r3, [r2, #64]	; 0x40
 80039a2:	4b0c      	ldr	r3, [pc, #48]	; (80039d4 <HAL_RCC_OscConfig+0x2ac>)
 80039a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039aa:	60bb      	str	r3, [r7, #8]
 80039ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039ae:	2301      	movs	r3, #1
 80039b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039b2:	4b0b      	ldr	r3, [pc, #44]	; (80039e0 <HAL_RCC_OscConfig+0x2b8>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d121      	bne.n	8003a02 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039be:	4b08      	ldr	r3, [pc, #32]	; (80039e0 <HAL_RCC_OscConfig+0x2b8>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a07      	ldr	r2, [pc, #28]	; (80039e0 <HAL_RCC_OscConfig+0x2b8>)
 80039c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039ca:	f7fe fe07 	bl	80025dc <HAL_GetTick>
 80039ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039d0:	e011      	b.n	80039f6 <HAL_RCC_OscConfig+0x2ce>
 80039d2:	bf00      	nop
 80039d4:	40023800 	.word	0x40023800
 80039d8:	42470000 	.word	0x42470000
 80039dc:	42470e80 	.word	0x42470e80
 80039e0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039e4:	f7fe fdfa 	bl	80025dc <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e112      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f6:	4b8b      	ldr	r3, [pc, #556]	; (8003c24 <HAL_RCC_OscConfig+0x4fc>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d0f0      	beq.n	80039e4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d106      	bne.n	8003a18 <HAL_RCC_OscConfig+0x2f0>
 8003a0a:	4b87      	ldr	r3, [pc, #540]	; (8003c28 <HAL_RCC_OscConfig+0x500>)
 8003a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a0e:	4a86      	ldr	r2, [pc, #536]	; (8003c28 <HAL_RCC_OscConfig+0x500>)
 8003a10:	f043 0301 	orr.w	r3, r3, #1
 8003a14:	6713      	str	r3, [r2, #112]	; 0x70
 8003a16:	e01c      	b.n	8003a52 <HAL_RCC_OscConfig+0x32a>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	2b05      	cmp	r3, #5
 8003a1e:	d10c      	bne.n	8003a3a <HAL_RCC_OscConfig+0x312>
 8003a20:	4b81      	ldr	r3, [pc, #516]	; (8003c28 <HAL_RCC_OscConfig+0x500>)
 8003a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a24:	4a80      	ldr	r2, [pc, #512]	; (8003c28 <HAL_RCC_OscConfig+0x500>)
 8003a26:	f043 0304 	orr.w	r3, r3, #4
 8003a2a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a2c:	4b7e      	ldr	r3, [pc, #504]	; (8003c28 <HAL_RCC_OscConfig+0x500>)
 8003a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a30:	4a7d      	ldr	r2, [pc, #500]	; (8003c28 <HAL_RCC_OscConfig+0x500>)
 8003a32:	f043 0301 	orr.w	r3, r3, #1
 8003a36:	6713      	str	r3, [r2, #112]	; 0x70
 8003a38:	e00b      	b.n	8003a52 <HAL_RCC_OscConfig+0x32a>
 8003a3a:	4b7b      	ldr	r3, [pc, #492]	; (8003c28 <HAL_RCC_OscConfig+0x500>)
 8003a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3e:	4a7a      	ldr	r2, [pc, #488]	; (8003c28 <HAL_RCC_OscConfig+0x500>)
 8003a40:	f023 0301 	bic.w	r3, r3, #1
 8003a44:	6713      	str	r3, [r2, #112]	; 0x70
 8003a46:	4b78      	ldr	r3, [pc, #480]	; (8003c28 <HAL_RCC_OscConfig+0x500>)
 8003a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4a:	4a77      	ldr	r2, [pc, #476]	; (8003c28 <HAL_RCC_OscConfig+0x500>)
 8003a4c:	f023 0304 	bic.w	r3, r3, #4
 8003a50:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d015      	beq.n	8003a86 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a5a:	f7fe fdbf 	bl	80025dc <HAL_GetTick>
 8003a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a60:	e00a      	b.n	8003a78 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a62:	f7fe fdbb 	bl	80025dc <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d901      	bls.n	8003a78 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e0d1      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a78:	4b6b      	ldr	r3, [pc, #428]	; (8003c28 <HAL_RCC_OscConfig+0x500>)
 8003a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d0ee      	beq.n	8003a62 <HAL_RCC_OscConfig+0x33a>
 8003a84:	e014      	b.n	8003ab0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a86:	f7fe fda9 	bl	80025dc <HAL_GetTick>
 8003a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a8c:	e00a      	b.n	8003aa4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a8e:	f7fe fda5 	bl	80025dc <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d901      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e0bb      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aa4:	4b60      	ldr	r3, [pc, #384]	; (8003c28 <HAL_RCC_OscConfig+0x500>)
 8003aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d1ee      	bne.n	8003a8e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ab0:	7dfb      	ldrb	r3, [r7, #23]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d105      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ab6:	4b5c      	ldr	r3, [pc, #368]	; (8003c28 <HAL_RCC_OscConfig+0x500>)
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aba:	4a5b      	ldr	r2, [pc, #364]	; (8003c28 <HAL_RCC_OscConfig+0x500>)
 8003abc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ac0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f000 80a7 	beq.w	8003c1a <HAL_RCC_OscConfig+0x4f2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003acc:	4b56      	ldr	r3, [pc, #344]	; (8003c28 <HAL_RCC_OscConfig+0x500>)
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f003 030c 	and.w	r3, r3, #12
 8003ad4:	2b08      	cmp	r3, #8
 8003ad6:	d060      	beq.n	8003b9a <HAL_RCC_OscConfig+0x472>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d145      	bne.n	8003b6c <HAL_RCC_OscConfig+0x444>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ae0:	4b52      	ldr	r3, [pc, #328]	; (8003c2c <HAL_RCC_OscConfig+0x504>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae6:	f7fe fd79 	bl	80025dc <HAL_GetTick>
 8003aea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aec:	e008      	b.n	8003b00 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aee:	f7fe fd75 	bl	80025dc <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d901      	bls.n	8003b00 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	e08d      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b00:	4b49      	ldr	r3, [pc, #292]	; (8003c28 <HAL_RCC_OscConfig+0x500>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1f0      	bne.n	8003aee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	69da      	ldr	r2, [r3, #28]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a1b      	ldr	r3, [r3, #32]
 8003b14:	431a      	orrs	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1a:	019b      	lsls	r3, r3, #6
 8003b1c:	431a      	orrs	r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b22:	085b      	lsrs	r3, r3, #1
 8003b24:	3b01      	subs	r3, #1
 8003b26:	041b      	lsls	r3, r3, #16
 8003b28:	431a      	orrs	r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2e:	061b      	lsls	r3, r3, #24
 8003b30:	431a      	orrs	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b36:	071b      	lsls	r3, r3, #28
 8003b38:	493b      	ldr	r1, [pc, #236]	; (8003c28 <HAL_RCC_OscConfig+0x500>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b3e:	4b3b      	ldr	r3, [pc, #236]	; (8003c2c <HAL_RCC_OscConfig+0x504>)
 8003b40:	2201      	movs	r2, #1
 8003b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b44:	f7fe fd4a 	bl	80025dc <HAL_GetTick>
 8003b48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b4a:	e008      	b.n	8003b5e <HAL_RCC_OscConfig+0x436>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b4c:	f7fe fd46 	bl	80025dc <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0x436>
          {
            return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e05e      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b5e:	4b32      	ldr	r3, [pc, #200]	; (8003c28 <HAL_RCC_OscConfig+0x500>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d0f0      	beq.n	8003b4c <HAL_RCC_OscConfig+0x424>
 8003b6a:	e056      	b.n	8003c1a <HAL_RCC_OscConfig+0x4f2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b6c:	4b2f      	ldr	r3, [pc, #188]	; (8003c2c <HAL_RCC_OscConfig+0x504>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b72:	f7fe fd33 	bl	80025dc <HAL_GetTick>
 8003b76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b78:	e008      	b.n	8003b8c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b7a:	f7fe fd2f 	bl	80025dc <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d901      	bls.n	8003b8c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e047      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b8c:	4b26      	ldr	r3, [pc, #152]	; (8003c28 <HAL_RCC_OscConfig+0x500>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1f0      	bne.n	8003b7a <HAL_RCC_OscConfig+0x452>
 8003b98:	e03f      	b.n	8003c1a <HAL_RCC_OscConfig+0x4f2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d101      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x47e>
      {
        return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e03a      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f4>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ba6:	4b20      	ldr	r3, [pc, #128]	; (8003c28 <HAL_RCC_OscConfig+0x500>)
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d030      	beq.n	8003c16 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d129      	bne.n	8003c16 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d122      	bne.n	8003c16 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bdc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d119      	bne.n	8003c16 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bec:	085b      	lsrs	r3, r3, #1
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d10f      	bne.n	8003c16 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c00:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d107      	bne.n	8003c16 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c10:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d001      	beq.n	8003c1a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e000      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f4>
        }
      }
    }
  }
  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3718      	adds	r7, #24
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	40007000 	.word	0x40007000
 8003c28:	40023800 	.word	0x40023800
 8003c2c:	42470060 	.word	0x42470060

08003c30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e07b      	b.n	8003d3a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d108      	bne.n	8003c5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c52:	d009      	beq.n	8003c68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	61da      	str	r2, [r3, #28]
 8003c5a:	e005      	b.n	8003c68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d106      	bne.n	8003c88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7fd f9dc 	bl	8001040 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2202      	movs	r2, #2
 8003c8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c9e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003cb0:	431a      	orrs	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cba:	431a      	orrs	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	f003 0302 	and.w	r3, r3, #2
 8003cc4:	431a      	orrs	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cd8:	431a      	orrs	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	69db      	ldr	r3, [r3, #28]
 8003cde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a1b      	ldr	r3, [r3, #32]
 8003ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cec:	ea42 0103 	orr.w	r1, r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	0c1b      	lsrs	r3, r3, #16
 8003d06:	f003 0104 	and.w	r1, r3, #4
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0e:	f003 0210 	and.w	r2, r3, #16
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	430a      	orrs	r2, r1
 8003d18:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	69da      	ldr	r2, [r3, #28]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d28:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3708      	adds	r7, #8
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
	...

08003d44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b085      	sub	sp, #20
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d001      	beq.n	8003d5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e04e      	b.n	8003dfa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2202      	movs	r2, #2
 8003d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68da      	ldr	r2, [r3, #12]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f042 0201 	orr.w	r2, r2, #1
 8003d72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a23      	ldr	r2, [pc, #140]	; (8003e08 <HAL_TIM_Base_Start_IT+0xc4>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d022      	beq.n	8003dc4 <HAL_TIM_Base_Start_IT+0x80>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d86:	d01d      	beq.n	8003dc4 <HAL_TIM_Base_Start_IT+0x80>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a1f      	ldr	r2, [pc, #124]	; (8003e0c <HAL_TIM_Base_Start_IT+0xc8>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d018      	beq.n	8003dc4 <HAL_TIM_Base_Start_IT+0x80>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a1e      	ldr	r2, [pc, #120]	; (8003e10 <HAL_TIM_Base_Start_IT+0xcc>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d013      	beq.n	8003dc4 <HAL_TIM_Base_Start_IT+0x80>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a1c      	ldr	r2, [pc, #112]	; (8003e14 <HAL_TIM_Base_Start_IT+0xd0>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d00e      	beq.n	8003dc4 <HAL_TIM_Base_Start_IT+0x80>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a1b      	ldr	r2, [pc, #108]	; (8003e18 <HAL_TIM_Base_Start_IT+0xd4>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d009      	beq.n	8003dc4 <HAL_TIM_Base_Start_IT+0x80>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a19      	ldr	r2, [pc, #100]	; (8003e1c <HAL_TIM_Base_Start_IT+0xd8>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d004      	beq.n	8003dc4 <HAL_TIM_Base_Start_IT+0x80>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a18      	ldr	r2, [pc, #96]	; (8003e20 <HAL_TIM_Base_Start_IT+0xdc>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d111      	bne.n	8003de8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f003 0307 	and.w	r3, r3, #7
 8003dce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2b06      	cmp	r3, #6
 8003dd4:	d010      	beq.n	8003df8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f042 0201 	orr.w	r2, r2, #1
 8003de4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003de6:	e007      	b.n	8003df8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f042 0201 	orr.w	r2, r2, #1
 8003df6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3714      	adds	r7, #20
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	40010000 	.word	0x40010000
 8003e0c:	40000400 	.word	0x40000400
 8003e10:	40000800 	.word	0x40000800
 8003e14:	40000c00 	.word	0x40000c00
 8003e18:	40010400 	.word	0x40010400
 8003e1c:	40014000 	.word	0x40014000
 8003e20:	40001800 	.word	0x40001800

08003e24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d101      	bne.n	8003e36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e041      	b.n	8003eba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d106      	bne.n	8003e50 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f7fd f976 	bl	800113c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2202      	movs	r2, #2
 8003e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	3304      	adds	r3, #4
 8003e60:	4619      	mov	r1, r3
 8003e62:	4610      	mov	r0, r2
 8003e64:	f000 faf2 	bl	800444c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3708      	adds	r7, #8
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
	...

08003ec4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d109      	bne.n	8003ee8 <HAL_TIM_PWM_Start+0x24>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	bf14      	ite	ne
 8003ee0:	2301      	movne	r3, #1
 8003ee2:	2300      	moveq	r3, #0
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	e022      	b.n	8003f2e <HAL_TIM_PWM_Start+0x6a>
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	2b04      	cmp	r3, #4
 8003eec:	d109      	bne.n	8003f02 <HAL_TIM_PWM_Start+0x3e>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	bf14      	ite	ne
 8003efa:	2301      	movne	r3, #1
 8003efc:	2300      	moveq	r3, #0
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	e015      	b.n	8003f2e <HAL_TIM_PWM_Start+0x6a>
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	2b08      	cmp	r3, #8
 8003f06:	d109      	bne.n	8003f1c <HAL_TIM_PWM_Start+0x58>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	bf14      	ite	ne
 8003f14:	2301      	movne	r3, #1
 8003f16:	2300      	moveq	r3, #0
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	e008      	b.n	8003f2e <HAL_TIM_PWM_Start+0x6a>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	bf14      	ite	ne
 8003f28:	2301      	movne	r3, #1
 8003f2a:	2300      	moveq	r3, #0
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d001      	beq.n	8003f36 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e07c      	b.n	8004030 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d104      	bne.n	8003f46 <HAL_TIM_PWM_Start+0x82>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2202      	movs	r2, #2
 8003f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f44:	e013      	b.n	8003f6e <HAL_TIM_PWM_Start+0xaa>
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	2b04      	cmp	r3, #4
 8003f4a:	d104      	bne.n	8003f56 <HAL_TIM_PWM_Start+0x92>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2202      	movs	r2, #2
 8003f50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f54:	e00b      	b.n	8003f6e <HAL_TIM_PWM_Start+0xaa>
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	2b08      	cmp	r3, #8
 8003f5a:	d104      	bne.n	8003f66 <HAL_TIM_PWM_Start+0xa2>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2202      	movs	r2, #2
 8003f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f64:	e003      	b.n	8003f6e <HAL_TIM_PWM_Start+0xaa>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2202      	movs	r2, #2
 8003f6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2201      	movs	r2, #1
 8003f74:	6839      	ldr	r1, [r7, #0]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f000 fcb8 	bl	80048ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a2d      	ldr	r2, [pc, #180]	; (8004038 <HAL_TIM_PWM_Start+0x174>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d004      	beq.n	8003f90 <HAL_TIM_PWM_Start+0xcc>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a2c      	ldr	r2, [pc, #176]	; (800403c <HAL_TIM_PWM_Start+0x178>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d101      	bne.n	8003f94 <HAL_TIM_PWM_Start+0xd0>
 8003f90:	2301      	movs	r3, #1
 8003f92:	e000      	b.n	8003f96 <HAL_TIM_PWM_Start+0xd2>
 8003f94:	2300      	movs	r3, #0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d007      	beq.n	8003faa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fa8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a22      	ldr	r2, [pc, #136]	; (8004038 <HAL_TIM_PWM_Start+0x174>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d022      	beq.n	8003ffa <HAL_TIM_PWM_Start+0x136>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fbc:	d01d      	beq.n	8003ffa <HAL_TIM_PWM_Start+0x136>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a1f      	ldr	r2, [pc, #124]	; (8004040 <HAL_TIM_PWM_Start+0x17c>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d018      	beq.n	8003ffa <HAL_TIM_PWM_Start+0x136>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a1d      	ldr	r2, [pc, #116]	; (8004044 <HAL_TIM_PWM_Start+0x180>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d013      	beq.n	8003ffa <HAL_TIM_PWM_Start+0x136>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a1c      	ldr	r2, [pc, #112]	; (8004048 <HAL_TIM_PWM_Start+0x184>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d00e      	beq.n	8003ffa <HAL_TIM_PWM_Start+0x136>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a16      	ldr	r2, [pc, #88]	; (800403c <HAL_TIM_PWM_Start+0x178>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d009      	beq.n	8003ffa <HAL_TIM_PWM_Start+0x136>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a18      	ldr	r2, [pc, #96]	; (800404c <HAL_TIM_PWM_Start+0x188>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d004      	beq.n	8003ffa <HAL_TIM_PWM_Start+0x136>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a16      	ldr	r2, [pc, #88]	; (8004050 <HAL_TIM_PWM_Start+0x18c>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d111      	bne.n	800401e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f003 0307 	and.w	r3, r3, #7
 8004004:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2b06      	cmp	r3, #6
 800400a:	d010      	beq.n	800402e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f042 0201 	orr.w	r2, r2, #1
 800401a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800401c:	e007      	b.n	800402e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f042 0201 	orr.w	r2, r2, #1
 800402c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3710      	adds	r7, #16
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	40010000 	.word	0x40010000
 800403c:	40010400 	.word	0x40010400
 8004040:	40000400 	.word	0x40000400
 8004044:	40000800 	.word	0x40000800
 8004048:	40000c00 	.word	0x40000c00
 800404c:	40014000 	.word	0x40014000
 8004050:	40001800 	.word	0x40001800

08004054 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b02      	cmp	r3, #2
 8004068:	d122      	bne.n	80040b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	f003 0302 	and.w	r3, r3, #2
 8004074:	2b02      	cmp	r3, #2
 8004076:	d11b      	bne.n	80040b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f06f 0202 	mvn.w	r2, #2
 8004080:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2201      	movs	r2, #1
 8004086:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	f003 0303 	and.w	r3, r3, #3
 8004092:	2b00      	cmp	r3, #0
 8004094:	d003      	beq.n	800409e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f9ba 	bl	8004410 <HAL_TIM_IC_CaptureCallback>
 800409c:	e005      	b.n	80040aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 f9ac 	bl	80043fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f000 f9bd 	bl	8004424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	f003 0304 	and.w	r3, r3, #4
 80040ba:	2b04      	cmp	r3, #4
 80040bc:	d122      	bne.n	8004104 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	f003 0304 	and.w	r3, r3, #4
 80040c8:	2b04      	cmp	r3, #4
 80040ca:	d11b      	bne.n	8004104 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f06f 0204 	mvn.w	r2, #4
 80040d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2202      	movs	r2, #2
 80040da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d003      	beq.n	80040f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 f990 	bl	8004410 <HAL_TIM_IC_CaptureCallback>
 80040f0:	e005      	b.n	80040fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f982 	bl	80043fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f000 f993 	bl	8004424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	f003 0308 	and.w	r3, r3, #8
 800410e:	2b08      	cmp	r3, #8
 8004110:	d122      	bne.n	8004158 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	f003 0308 	and.w	r3, r3, #8
 800411c:	2b08      	cmp	r3, #8
 800411e:	d11b      	bne.n	8004158 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f06f 0208 	mvn.w	r2, #8
 8004128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2204      	movs	r2, #4
 800412e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	69db      	ldr	r3, [r3, #28]
 8004136:	f003 0303 	and.w	r3, r3, #3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d003      	beq.n	8004146 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 f966 	bl	8004410 <HAL_TIM_IC_CaptureCallback>
 8004144:	e005      	b.n	8004152 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 f958 	bl	80043fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 f969 	bl	8004424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	f003 0310 	and.w	r3, r3, #16
 8004162:	2b10      	cmp	r3, #16
 8004164:	d122      	bne.n	80041ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	f003 0310 	and.w	r3, r3, #16
 8004170:	2b10      	cmp	r3, #16
 8004172:	d11b      	bne.n	80041ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f06f 0210 	mvn.w	r2, #16
 800417c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2208      	movs	r2, #8
 8004182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	69db      	ldr	r3, [r3, #28]
 800418a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800418e:	2b00      	cmp	r3, #0
 8004190:	d003      	beq.n	800419a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 f93c 	bl	8004410 <HAL_TIM_IC_CaptureCallback>
 8004198:	e005      	b.n	80041a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 f92e 	bl	80043fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f000 f93f 	bl	8004424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d10e      	bne.n	80041d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	f003 0301 	and.w	r3, r3, #1
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d107      	bne.n	80041d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f06f 0201 	mvn.w	r2, #1
 80041d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f000 f908 	bl	80043e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041e2:	2b80      	cmp	r3, #128	; 0x80
 80041e4:	d10e      	bne.n	8004204 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f0:	2b80      	cmp	r3, #128	; 0x80
 80041f2:	d107      	bne.n	8004204 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 fba3 	bl	800494a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800420e:	2b40      	cmp	r3, #64	; 0x40
 8004210:	d10e      	bne.n	8004230 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800421c:	2b40      	cmp	r3, #64	; 0x40
 800421e:	d107      	bne.n	8004230 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 f904 	bl	8004438 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	f003 0320 	and.w	r3, r3, #32
 800423a:	2b20      	cmp	r3, #32
 800423c:	d10e      	bne.n	800425c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	f003 0320 	and.w	r3, r3, #32
 8004248:	2b20      	cmp	r3, #32
 800424a:	d107      	bne.n	800425c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f06f 0220 	mvn.w	r2, #32
 8004254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 fb6d 	bl	8004936 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800425c:	bf00      	nop
 800425e:	3708      	adds	r7, #8
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b086      	sub	sp, #24
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004270:	2300      	movs	r3, #0
 8004272:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800427a:	2b01      	cmp	r3, #1
 800427c:	d101      	bne.n	8004282 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800427e:	2302      	movs	r3, #2
 8004280:	e0ae      	b.n	80043e0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2201      	movs	r2, #1
 8004286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2b0c      	cmp	r3, #12
 800428e:	f200 809f 	bhi.w	80043d0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004292:	a201      	add	r2, pc, #4	; (adr r2, 8004298 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004298:	080042cd 	.word	0x080042cd
 800429c:	080043d1 	.word	0x080043d1
 80042a0:	080043d1 	.word	0x080043d1
 80042a4:	080043d1 	.word	0x080043d1
 80042a8:	0800430d 	.word	0x0800430d
 80042ac:	080043d1 	.word	0x080043d1
 80042b0:	080043d1 	.word	0x080043d1
 80042b4:	080043d1 	.word	0x080043d1
 80042b8:	0800434f 	.word	0x0800434f
 80042bc:	080043d1 	.word	0x080043d1
 80042c0:	080043d1 	.word	0x080043d1
 80042c4:	080043d1 	.word	0x080043d1
 80042c8:	0800438f 	.word	0x0800438f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68b9      	ldr	r1, [r7, #8]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f000 f95a 	bl	800458c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	699a      	ldr	r2, [r3, #24]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f042 0208 	orr.w	r2, r2, #8
 80042e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	699a      	ldr	r2, [r3, #24]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f022 0204 	bic.w	r2, r2, #4
 80042f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6999      	ldr	r1, [r3, #24]
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	691a      	ldr	r2, [r3, #16]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	430a      	orrs	r2, r1
 8004308:	619a      	str	r2, [r3, #24]
      break;
 800430a:	e064      	b.n	80043d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68b9      	ldr	r1, [r7, #8]
 8004312:	4618      	mov	r0, r3
 8004314:	f000 f9aa 	bl	800466c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	699a      	ldr	r2, [r3, #24]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004326:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	699a      	ldr	r2, [r3, #24]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004336:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	6999      	ldr	r1, [r3, #24]
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	021a      	lsls	r2, r3, #8
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	430a      	orrs	r2, r1
 800434a:	619a      	str	r2, [r3, #24]
      break;
 800434c:	e043      	b.n	80043d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68b9      	ldr	r1, [r7, #8]
 8004354:	4618      	mov	r0, r3
 8004356:	f000 f9ff 	bl	8004758 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	69da      	ldr	r2, [r3, #28]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f042 0208 	orr.w	r2, r2, #8
 8004368:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	69da      	ldr	r2, [r3, #28]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 0204 	bic.w	r2, r2, #4
 8004378:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	69d9      	ldr	r1, [r3, #28]
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	691a      	ldr	r2, [r3, #16]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	430a      	orrs	r2, r1
 800438a:	61da      	str	r2, [r3, #28]
      break;
 800438c:	e023      	b.n	80043d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68b9      	ldr	r1, [r7, #8]
 8004394:	4618      	mov	r0, r3
 8004396:	f000 fa53 	bl	8004840 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	69da      	ldr	r2, [r3, #28]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	69da      	ldr	r2, [r3, #28]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	69d9      	ldr	r1, [r3, #28]
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	021a      	lsls	r2, r3, #8
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	61da      	str	r2, [r3, #28]
      break;
 80043ce:	e002      	b.n	80043d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	75fb      	strb	r3, [r7, #23]
      break;
 80043d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80043de:	7dfb      	ldrb	r3, [r7, #23]
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3718      	adds	r7, #24
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80043f0:	bf00      	nop
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004404:	bf00      	nop
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004440:	bf00      	nop
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a40      	ldr	r2, [pc, #256]	; (8004560 <TIM_Base_SetConfig+0x114>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d013      	beq.n	800448c <TIM_Base_SetConfig+0x40>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800446a:	d00f      	beq.n	800448c <TIM_Base_SetConfig+0x40>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a3d      	ldr	r2, [pc, #244]	; (8004564 <TIM_Base_SetConfig+0x118>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d00b      	beq.n	800448c <TIM_Base_SetConfig+0x40>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a3c      	ldr	r2, [pc, #240]	; (8004568 <TIM_Base_SetConfig+0x11c>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d007      	beq.n	800448c <TIM_Base_SetConfig+0x40>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a3b      	ldr	r2, [pc, #236]	; (800456c <TIM_Base_SetConfig+0x120>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d003      	beq.n	800448c <TIM_Base_SetConfig+0x40>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a3a      	ldr	r2, [pc, #232]	; (8004570 <TIM_Base_SetConfig+0x124>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d108      	bne.n	800449e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004492:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	4313      	orrs	r3, r2
 800449c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a2f      	ldr	r2, [pc, #188]	; (8004560 <TIM_Base_SetConfig+0x114>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d02b      	beq.n	80044fe <TIM_Base_SetConfig+0xb2>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ac:	d027      	beq.n	80044fe <TIM_Base_SetConfig+0xb2>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a2c      	ldr	r2, [pc, #176]	; (8004564 <TIM_Base_SetConfig+0x118>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d023      	beq.n	80044fe <TIM_Base_SetConfig+0xb2>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a2b      	ldr	r2, [pc, #172]	; (8004568 <TIM_Base_SetConfig+0x11c>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d01f      	beq.n	80044fe <TIM_Base_SetConfig+0xb2>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a2a      	ldr	r2, [pc, #168]	; (800456c <TIM_Base_SetConfig+0x120>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d01b      	beq.n	80044fe <TIM_Base_SetConfig+0xb2>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a29      	ldr	r2, [pc, #164]	; (8004570 <TIM_Base_SetConfig+0x124>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d017      	beq.n	80044fe <TIM_Base_SetConfig+0xb2>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a28      	ldr	r2, [pc, #160]	; (8004574 <TIM_Base_SetConfig+0x128>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d013      	beq.n	80044fe <TIM_Base_SetConfig+0xb2>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a27      	ldr	r2, [pc, #156]	; (8004578 <TIM_Base_SetConfig+0x12c>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d00f      	beq.n	80044fe <TIM_Base_SetConfig+0xb2>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a26      	ldr	r2, [pc, #152]	; (800457c <TIM_Base_SetConfig+0x130>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d00b      	beq.n	80044fe <TIM_Base_SetConfig+0xb2>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a25      	ldr	r2, [pc, #148]	; (8004580 <TIM_Base_SetConfig+0x134>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d007      	beq.n	80044fe <TIM_Base_SetConfig+0xb2>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a24      	ldr	r2, [pc, #144]	; (8004584 <TIM_Base_SetConfig+0x138>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d003      	beq.n	80044fe <TIM_Base_SetConfig+0xb2>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a23      	ldr	r2, [pc, #140]	; (8004588 <TIM_Base_SetConfig+0x13c>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d108      	bne.n	8004510 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004504:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	4313      	orrs	r3, r2
 800450e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	4313      	orrs	r3, r2
 800451c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	689a      	ldr	r2, [r3, #8]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a0a      	ldr	r2, [pc, #40]	; (8004560 <TIM_Base_SetConfig+0x114>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d003      	beq.n	8004544 <TIM_Base_SetConfig+0xf8>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a0c      	ldr	r2, [pc, #48]	; (8004570 <TIM_Base_SetConfig+0x124>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d103      	bne.n	800454c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	691a      	ldr	r2, [r3, #16]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	615a      	str	r2, [r3, #20]
}
 8004552:	bf00      	nop
 8004554:	3714      	adds	r7, #20
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	40010000 	.word	0x40010000
 8004564:	40000400 	.word	0x40000400
 8004568:	40000800 	.word	0x40000800
 800456c:	40000c00 	.word	0x40000c00
 8004570:	40010400 	.word	0x40010400
 8004574:	40014000 	.word	0x40014000
 8004578:	40014400 	.word	0x40014400
 800457c:	40014800 	.word	0x40014800
 8004580:	40001800 	.word	0x40001800
 8004584:	40001c00 	.word	0x40001c00
 8004588:	40002000 	.word	0x40002000

0800458c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800458c:	b480      	push	{r7}
 800458e:	b087      	sub	sp, #28
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	f023 0201 	bic.w	r2, r3, #1
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f023 0303 	bic.w	r3, r3, #3
 80045c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	f023 0302 	bic.w	r3, r3, #2
 80045d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	4313      	orrs	r3, r2
 80045de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a20      	ldr	r2, [pc, #128]	; (8004664 <TIM_OC1_SetConfig+0xd8>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d003      	beq.n	80045f0 <TIM_OC1_SetConfig+0x64>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a1f      	ldr	r2, [pc, #124]	; (8004668 <TIM_OC1_SetConfig+0xdc>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d10c      	bne.n	800460a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	f023 0308 	bic.w	r3, r3, #8
 80045f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	697a      	ldr	r2, [r7, #20]
 80045fe:	4313      	orrs	r3, r2
 8004600:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	f023 0304 	bic.w	r3, r3, #4
 8004608:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a15      	ldr	r2, [pc, #84]	; (8004664 <TIM_OC1_SetConfig+0xd8>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d003      	beq.n	800461a <TIM_OC1_SetConfig+0x8e>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a14      	ldr	r2, [pc, #80]	; (8004668 <TIM_OC1_SetConfig+0xdc>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d111      	bne.n	800463e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004620:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004628:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	693a      	ldr	r2, [r7, #16]
 8004630:	4313      	orrs	r3, r2
 8004632:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	699b      	ldr	r3, [r3, #24]
 8004638:	693a      	ldr	r2, [r7, #16]
 800463a:	4313      	orrs	r3, r2
 800463c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	685a      	ldr	r2, [r3, #4]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	697a      	ldr	r2, [r7, #20]
 8004656:	621a      	str	r2, [r3, #32]
}
 8004658:	bf00      	nop
 800465a:	371c      	adds	r7, #28
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr
 8004664:	40010000 	.word	0x40010000
 8004668:	40010400 	.word	0x40010400

0800466c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800466c:	b480      	push	{r7}
 800466e:	b087      	sub	sp, #28
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a1b      	ldr	r3, [r3, #32]
 800467a:	f023 0210 	bic.w	r2, r3, #16
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a1b      	ldr	r3, [r3, #32]
 8004686:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800469a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	021b      	lsls	r3, r3, #8
 80046aa:	68fa      	ldr	r2, [r7, #12]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	f023 0320 	bic.w	r3, r3, #32
 80046b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	011b      	lsls	r3, r3, #4
 80046be:	697a      	ldr	r2, [r7, #20]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a22      	ldr	r2, [pc, #136]	; (8004750 <TIM_OC2_SetConfig+0xe4>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d003      	beq.n	80046d4 <TIM_OC2_SetConfig+0x68>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a21      	ldr	r2, [pc, #132]	; (8004754 <TIM_OC2_SetConfig+0xe8>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d10d      	bne.n	80046f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	011b      	lsls	r3, r3, #4
 80046e2:	697a      	ldr	r2, [r7, #20]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a17      	ldr	r2, [pc, #92]	; (8004750 <TIM_OC2_SetConfig+0xe4>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d003      	beq.n	8004700 <TIM_OC2_SetConfig+0x94>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a16      	ldr	r2, [pc, #88]	; (8004754 <TIM_OC2_SetConfig+0xe8>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d113      	bne.n	8004728 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004706:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800470e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	695b      	ldr	r3, [r3, #20]
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	4313      	orrs	r3, r2
 800471a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	699b      	ldr	r3, [r3, #24]
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	4313      	orrs	r3, r2
 8004726:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	693a      	ldr	r2, [r7, #16]
 800472c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	697a      	ldr	r2, [r7, #20]
 8004740:	621a      	str	r2, [r3, #32]
}
 8004742:	bf00      	nop
 8004744:	371c      	adds	r7, #28
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop
 8004750:	40010000 	.word	0x40010000
 8004754:	40010400 	.word	0x40010400

08004758 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004758:	b480      	push	{r7}
 800475a:	b087      	sub	sp, #28
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a1b      	ldr	r3, [r3, #32]
 8004766:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a1b      	ldr	r3, [r3, #32]
 8004772:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	69db      	ldr	r3, [r3, #28]
 800477e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004786:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f023 0303 	bic.w	r3, r3, #3
 800478e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	4313      	orrs	r3, r2
 8004798:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	021b      	lsls	r3, r3, #8
 80047a8:	697a      	ldr	r2, [r7, #20]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a21      	ldr	r2, [pc, #132]	; (8004838 <TIM_OC3_SetConfig+0xe0>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d003      	beq.n	80047be <TIM_OC3_SetConfig+0x66>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a20      	ldr	r2, [pc, #128]	; (800483c <TIM_OC3_SetConfig+0xe4>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d10d      	bne.n	80047da <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	021b      	lsls	r3, r3, #8
 80047cc:	697a      	ldr	r2, [r7, #20]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a16      	ldr	r2, [pc, #88]	; (8004838 <TIM_OC3_SetConfig+0xe0>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d003      	beq.n	80047ea <TIM_OC3_SetConfig+0x92>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a15      	ldr	r2, [pc, #84]	; (800483c <TIM_OC3_SetConfig+0xe4>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d113      	bne.n	8004812 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	011b      	lsls	r3, r3, #4
 8004800:	693a      	ldr	r2, [r7, #16]
 8004802:	4313      	orrs	r3, r2
 8004804:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	011b      	lsls	r3, r3, #4
 800480c:	693a      	ldr	r2, [r7, #16]
 800480e:	4313      	orrs	r3, r2
 8004810:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	693a      	ldr	r2, [r7, #16]
 8004816:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	685a      	ldr	r2, [r3, #4]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	697a      	ldr	r2, [r7, #20]
 800482a:	621a      	str	r2, [r3, #32]
}
 800482c:	bf00      	nop
 800482e:	371c      	adds	r7, #28
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr
 8004838:	40010000 	.word	0x40010000
 800483c:	40010400 	.word	0x40010400

08004840 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004840:	b480      	push	{r7}
 8004842:	b087      	sub	sp, #28
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a1b      	ldr	r3, [r3, #32]
 800484e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	69db      	ldr	r3, [r3, #28]
 8004866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800486e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004876:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	021b      	lsls	r3, r3, #8
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	4313      	orrs	r3, r2
 8004882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800488a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	031b      	lsls	r3, r3, #12
 8004892:	693a      	ldr	r2, [r7, #16]
 8004894:	4313      	orrs	r3, r2
 8004896:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4a12      	ldr	r2, [pc, #72]	; (80048e4 <TIM_OC4_SetConfig+0xa4>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d003      	beq.n	80048a8 <TIM_OC4_SetConfig+0x68>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a11      	ldr	r2, [pc, #68]	; (80048e8 <TIM_OC4_SetConfig+0xa8>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d109      	bne.n	80048bc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	695b      	ldr	r3, [r3, #20]
 80048b4:	019b      	lsls	r3, r3, #6
 80048b6:	697a      	ldr	r2, [r7, #20]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	697a      	ldr	r2, [r7, #20]
 80048c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	693a      	ldr	r2, [r7, #16]
 80048d4:	621a      	str	r2, [r3, #32]
}
 80048d6:	bf00      	nop
 80048d8:	371c      	adds	r7, #28
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	40010000 	.word	0x40010000
 80048e8:	40010400 	.word	0x40010400

080048ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b087      	sub	sp, #28
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	f003 031f 	and.w	r3, r3, #31
 80048fe:	2201      	movs	r2, #1
 8004900:	fa02 f303 	lsl.w	r3, r2, r3
 8004904:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6a1a      	ldr	r2, [r3, #32]
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	43db      	mvns	r3, r3
 800490e:	401a      	ands	r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6a1a      	ldr	r2, [r3, #32]
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	f003 031f 	and.w	r3, r3, #31
 800491e:	6879      	ldr	r1, [r7, #4]
 8004920:	fa01 f303 	lsl.w	r3, r1, r3
 8004924:	431a      	orrs	r2, r3
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	621a      	str	r2, [r3, #32]
}
 800492a:	bf00      	nop
 800492c:	371c      	adds	r7, #28
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr

08004936 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004936:	b480      	push	{r7}
 8004938:	b083      	sub	sp, #12
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800493e:	bf00      	nop
 8004940:	370c      	adds	r7, #12
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr

0800494a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800494a:	b480      	push	{r7}
 800494c:	b083      	sub	sp, #12
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004952:	bf00      	nop
 8004954:	370c      	adds	r7, #12
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr

0800495e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800495e:	b580      	push	{r7, lr}
 8004960:	b082      	sub	sp, #8
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d101      	bne.n	8004970 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e03f      	b.n	80049f0 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004976:	b2db      	uxtb	r3, r3
 8004978:	2b00      	cmp	r3, #0
 800497a:	d106      	bne.n	800498a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f7fc fc3b 	bl	8001200 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2224      	movs	r2, #36	; 0x24
 800498e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68da      	ldr	r2, [r3, #12]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049a0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 f828 	bl	80049f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	691a      	ldr	r2, [r3, #16]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049b6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	695a      	ldr	r2, [r3, #20]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049c6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68da      	ldr	r2, [r3, #12]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049d6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2220      	movs	r2, #32
 80049e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2220      	movs	r2, #32
 80049ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3708      	adds	r7, #8
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049fc:	b09f      	sub	sp, #124	; 0x7c
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004a0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a0e:	68d9      	ldr	r1, [r3, #12]
 8004a10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	ea40 0301 	orr.w	r3, r0, r1
 8004a18:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a1c:	689a      	ldr	r2, [r3, #8]
 8004a1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	431a      	orrs	r2, r3
 8004a24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a26:	695b      	ldr	r3, [r3, #20]
 8004a28:	431a      	orrs	r2, r3
 8004a2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a2c:	69db      	ldr	r3, [r3, #28]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004a32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004a3c:	f021 010c 	bic.w	r1, r1, #12
 8004a40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a46:	430b      	orrs	r3, r1
 8004a48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	695b      	ldr	r3, [r3, #20]
 8004a50:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004a54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a56:	6999      	ldr	r1, [r3, #24]
 8004a58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	ea40 0301 	orr.w	r3, r0, r1
 8004a60:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8004a62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	4b6a      	ldr	r3, [pc, #424]	; (8004c10 <UART_SetConfig+0x218>)
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d00e      	beq.n	8004a8a <UART_SetConfig+0x92>
 8004a6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	4b68      	ldr	r3, [pc, #416]	; (8004c14 <UART_SetConfig+0x21c>)
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d009      	beq.n	8004a8a <UART_SetConfig+0x92>
 8004a76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	4b67      	ldr	r3, [pc, #412]	; (8004c18 <UART_SetConfig+0x220>)
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d004      	beq.n	8004a8a <UART_SetConfig+0x92>
 8004a80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	4b65      	ldr	r3, [pc, #404]	; (8004c1c <UART_SetConfig+0x224>)
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d103      	bne.n	8004a92 <UART_SetConfig+0x9a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a8a:	f7fe fe1d 	bl	80036c8 <HAL_RCC_GetPCLK2Freq>
 8004a8e:	6778      	str	r0, [r7, #116]	; 0x74
 8004a90:	e002      	b.n	8004a98 <UART_SetConfig+0xa0>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a92:	f7fe fe05 	bl	80036a0 <HAL_RCC_GetPCLK1Freq>
 8004a96:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a9a:	69db      	ldr	r3, [r3, #28]
 8004a9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004aa0:	f040 80c0 	bne.w	8004c24 <UART_SetConfig+0x22c>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004aa4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004aa6:	461c      	mov	r4, r3
 8004aa8:	f04f 0500 	mov.w	r5, #0
 8004aac:	4622      	mov	r2, r4
 8004aae:	462b      	mov	r3, r5
 8004ab0:	1891      	adds	r1, r2, r2
 8004ab2:	6439      	str	r1, [r7, #64]	; 0x40
 8004ab4:	415b      	adcs	r3, r3
 8004ab6:	647b      	str	r3, [r7, #68]	; 0x44
 8004ab8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004abc:	1912      	adds	r2, r2, r4
 8004abe:	eb45 0303 	adc.w	r3, r5, r3
 8004ac2:	f04f 0000 	mov.w	r0, #0
 8004ac6:	f04f 0100 	mov.w	r1, #0
 8004aca:	00d9      	lsls	r1, r3, #3
 8004acc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ad0:	00d0      	lsls	r0, r2, #3
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	1911      	adds	r1, r2, r4
 8004ad8:	6639      	str	r1, [r7, #96]	; 0x60
 8004ada:	416b      	adcs	r3, r5
 8004adc:	667b      	str	r3, [r7, #100]	; 0x64
 8004ade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	f04f 0300 	mov.w	r3, #0
 8004ae8:	1891      	adds	r1, r2, r2
 8004aea:	63b9      	str	r1, [r7, #56]	; 0x38
 8004aec:	415b      	adcs	r3, r3
 8004aee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004af0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004af4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004af8:	f7fb fb8e 	bl	8000218 <__aeabi_uldivmod>
 8004afc:	4602      	mov	r2, r0
 8004afe:	460b      	mov	r3, r1
 8004b00:	4b47      	ldr	r3, [pc, #284]	; (8004c20 <UART_SetConfig+0x228>)
 8004b02:	fba3 2302 	umull	r2, r3, r3, r2
 8004b06:	095b      	lsrs	r3, r3, #5
 8004b08:	011e      	lsls	r6, r3, #4
 8004b0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b0c:	461c      	mov	r4, r3
 8004b0e:	f04f 0500 	mov.w	r5, #0
 8004b12:	4622      	mov	r2, r4
 8004b14:	462b      	mov	r3, r5
 8004b16:	1891      	adds	r1, r2, r2
 8004b18:	6339      	str	r1, [r7, #48]	; 0x30
 8004b1a:	415b      	adcs	r3, r3
 8004b1c:	637b      	str	r3, [r7, #52]	; 0x34
 8004b1e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004b22:	1912      	adds	r2, r2, r4
 8004b24:	eb45 0303 	adc.w	r3, r5, r3
 8004b28:	f04f 0000 	mov.w	r0, #0
 8004b2c:	f04f 0100 	mov.w	r1, #0
 8004b30:	00d9      	lsls	r1, r3, #3
 8004b32:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b36:	00d0      	lsls	r0, r2, #3
 8004b38:	4602      	mov	r2, r0
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	1911      	adds	r1, r2, r4
 8004b3e:	65b9      	str	r1, [r7, #88]	; 0x58
 8004b40:	416b      	adcs	r3, r5
 8004b42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	461a      	mov	r2, r3
 8004b4a:	f04f 0300 	mov.w	r3, #0
 8004b4e:	1891      	adds	r1, r2, r2
 8004b50:	62b9      	str	r1, [r7, #40]	; 0x28
 8004b52:	415b      	adcs	r3, r3
 8004b54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b5a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004b5e:	f7fb fb5b 	bl	8000218 <__aeabi_uldivmod>
 8004b62:	4602      	mov	r2, r0
 8004b64:	460b      	mov	r3, r1
 8004b66:	4b2e      	ldr	r3, [pc, #184]	; (8004c20 <UART_SetConfig+0x228>)
 8004b68:	fba3 1302 	umull	r1, r3, r3, r2
 8004b6c:	095b      	lsrs	r3, r3, #5
 8004b6e:	2164      	movs	r1, #100	; 0x64
 8004b70:	fb01 f303 	mul.w	r3, r1, r3
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	00db      	lsls	r3, r3, #3
 8004b78:	3332      	adds	r3, #50	; 0x32
 8004b7a:	4a29      	ldr	r2, [pc, #164]	; (8004c20 <UART_SetConfig+0x228>)
 8004b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b80:	095b      	lsrs	r3, r3, #5
 8004b82:	005b      	lsls	r3, r3, #1
 8004b84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b88:	441e      	add	r6, r3
 8004b8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f04f 0100 	mov.w	r1, #0
 8004b92:	4602      	mov	r2, r0
 8004b94:	460b      	mov	r3, r1
 8004b96:	1894      	adds	r4, r2, r2
 8004b98:	623c      	str	r4, [r7, #32]
 8004b9a:	415b      	adcs	r3, r3
 8004b9c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ba2:	1812      	adds	r2, r2, r0
 8004ba4:	eb41 0303 	adc.w	r3, r1, r3
 8004ba8:	f04f 0400 	mov.w	r4, #0
 8004bac:	f04f 0500 	mov.w	r5, #0
 8004bb0:	00dd      	lsls	r5, r3, #3
 8004bb2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004bb6:	00d4      	lsls	r4, r2, #3
 8004bb8:	4622      	mov	r2, r4
 8004bba:	462b      	mov	r3, r5
 8004bbc:	1814      	adds	r4, r2, r0
 8004bbe:	653c      	str	r4, [r7, #80]	; 0x50
 8004bc0:	414b      	adcs	r3, r1
 8004bc2:	657b      	str	r3, [r7, #84]	; 0x54
 8004bc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	461a      	mov	r2, r3
 8004bca:	f04f 0300 	mov.w	r3, #0
 8004bce:	1891      	adds	r1, r2, r2
 8004bd0:	61b9      	str	r1, [r7, #24]
 8004bd2:	415b      	adcs	r3, r3
 8004bd4:	61fb      	str	r3, [r7, #28]
 8004bd6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bda:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004bde:	f7fb fb1b 	bl	8000218 <__aeabi_uldivmod>
 8004be2:	4602      	mov	r2, r0
 8004be4:	460b      	mov	r3, r1
 8004be6:	4b0e      	ldr	r3, [pc, #56]	; (8004c20 <UART_SetConfig+0x228>)
 8004be8:	fba3 1302 	umull	r1, r3, r3, r2
 8004bec:	095b      	lsrs	r3, r3, #5
 8004bee:	2164      	movs	r1, #100	; 0x64
 8004bf0:	fb01 f303 	mul.w	r3, r1, r3
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	00db      	lsls	r3, r3, #3
 8004bf8:	3332      	adds	r3, #50	; 0x32
 8004bfa:	4a09      	ldr	r2, [pc, #36]	; (8004c20 <UART_SetConfig+0x228>)
 8004bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8004c00:	095b      	lsrs	r3, r3, #5
 8004c02:	f003 0207 	and.w	r2, r3, #7
 8004c06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4432      	add	r2, r6
 8004c0c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c0e:	e0c3      	b.n	8004d98 <UART_SetConfig+0x3a0>
 8004c10:	40011000 	.word	0x40011000
 8004c14:	40011400 	.word	0x40011400
 8004c18:	40011800 	.word	0x40011800
 8004c1c:	40011c00 	.word	0x40011c00
 8004c20:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c26:	461c      	mov	r4, r3
 8004c28:	f04f 0500 	mov.w	r5, #0
 8004c2c:	4622      	mov	r2, r4
 8004c2e:	462b      	mov	r3, r5
 8004c30:	1891      	adds	r1, r2, r2
 8004c32:	6139      	str	r1, [r7, #16]
 8004c34:	415b      	adcs	r3, r3
 8004c36:	617b      	str	r3, [r7, #20]
 8004c38:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004c3c:	1912      	adds	r2, r2, r4
 8004c3e:	eb45 0303 	adc.w	r3, r5, r3
 8004c42:	f04f 0000 	mov.w	r0, #0
 8004c46:	f04f 0100 	mov.w	r1, #0
 8004c4a:	00d9      	lsls	r1, r3, #3
 8004c4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c50:	00d0      	lsls	r0, r2, #3
 8004c52:	4602      	mov	r2, r0
 8004c54:	460b      	mov	r3, r1
 8004c56:	eb12 0804 	adds.w	r8, r2, r4
 8004c5a:	eb43 0905 	adc.w	r9, r3, r5
 8004c5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f04f 0100 	mov.w	r1, #0
 8004c68:	f04f 0200 	mov.w	r2, #0
 8004c6c:	f04f 0300 	mov.w	r3, #0
 8004c70:	008b      	lsls	r3, r1, #2
 8004c72:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004c76:	0082      	lsls	r2, r0, #2
 8004c78:	4640      	mov	r0, r8
 8004c7a:	4649      	mov	r1, r9
 8004c7c:	f7fb facc 	bl	8000218 <__aeabi_uldivmod>
 8004c80:	4602      	mov	r2, r0
 8004c82:	460b      	mov	r3, r1
 8004c84:	4b47      	ldr	r3, [pc, #284]	; (8004da4 <UART_SetConfig+0x3ac>)
 8004c86:	fba3 2302 	umull	r2, r3, r3, r2
 8004c8a:	095b      	lsrs	r3, r3, #5
 8004c8c:	011e      	lsls	r6, r3, #4
 8004c8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c90:	4618      	mov	r0, r3
 8004c92:	f04f 0100 	mov.w	r1, #0
 8004c96:	4602      	mov	r2, r0
 8004c98:	460b      	mov	r3, r1
 8004c9a:	1894      	adds	r4, r2, r2
 8004c9c:	60bc      	str	r4, [r7, #8]
 8004c9e:	415b      	adcs	r3, r3
 8004ca0:	60fb      	str	r3, [r7, #12]
 8004ca2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ca6:	1812      	adds	r2, r2, r0
 8004ca8:	eb41 0303 	adc.w	r3, r1, r3
 8004cac:	f04f 0400 	mov.w	r4, #0
 8004cb0:	f04f 0500 	mov.w	r5, #0
 8004cb4:	00dd      	lsls	r5, r3, #3
 8004cb6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004cba:	00d4      	lsls	r4, r2, #3
 8004cbc:	4622      	mov	r2, r4
 8004cbe:	462b      	mov	r3, r5
 8004cc0:	1814      	adds	r4, r2, r0
 8004cc2:	64bc      	str	r4, [r7, #72]	; 0x48
 8004cc4:	414b      	adcs	r3, r1
 8004cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f04f 0100 	mov.w	r1, #0
 8004cd2:	f04f 0200 	mov.w	r2, #0
 8004cd6:	f04f 0300 	mov.w	r3, #0
 8004cda:	008b      	lsls	r3, r1, #2
 8004cdc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004ce0:	0082      	lsls	r2, r0, #2
 8004ce2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004ce6:	f7fb fa97 	bl	8000218 <__aeabi_uldivmod>
 8004cea:	4602      	mov	r2, r0
 8004cec:	460b      	mov	r3, r1
 8004cee:	4b2d      	ldr	r3, [pc, #180]	; (8004da4 <UART_SetConfig+0x3ac>)
 8004cf0:	fba3 1302 	umull	r1, r3, r3, r2
 8004cf4:	095b      	lsrs	r3, r3, #5
 8004cf6:	2164      	movs	r1, #100	; 0x64
 8004cf8:	fb01 f303 	mul.w	r3, r1, r3
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	011b      	lsls	r3, r3, #4
 8004d00:	3332      	adds	r3, #50	; 0x32
 8004d02:	4a28      	ldr	r2, [pc, #160]	; (8004da4 <UART_SetConfig+0x3ac>)
 8004d04:	fba2 2303 	umull	r2, r3, r2, r3
 8004d08:	095b      	lsrs	r3, r3, #5
 8004d0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d0e:	441e      	add	r6, r3
 8004d10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d12:	4618      	mov	r0, r3
 8004d14:	f04f 0100 	mov.w	r1, #0
 8004d18:	4602      	mov	r2, r0
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	1894      	adds	r4, r2, r2
 8004d1e:	603c      	str	r4, [r7, #0]
 8004d20:	415b      	adcs	r3, r3
 8004d22:	607b      	str	r3, [r7, #4]
 8004d24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d28:	1812      	adds	r2, r2, r0
 8004d2a:	eb41 0303 	adc.w	r3, r1, r3
 8004d2e:	f04f 0400 	mov.w	r4, #0
 8004d32:	f04f 0500 	mov.w	r5, #0
 8004d36:	00dd      	lsls	r5, r3, #3
 8004d38:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004d3c:	00d4      	lsls	r4, r2, #3
 8004d3e:	4622      	mov	r2, r4
 8004d40:	462b      	mov	r3, r5
 8004d42:	eb12 0a00 	adds.w	sl, r2, r0
 8004d46:	eb43 0b01 	adc.w	fp, r3, r1
 8004d4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f04f 0100 	mov.w	r1, #0
 8004d54:	f04f 0200 	mov.w	r2, #0
 8004d58:	f04f 0300 	mov.w	r3, #0
 8004d5c:	008b      	lsls	r3, r1, #2
 8004d5e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004d62:	0082      	lsls	r2, r0, #2
 8004d64:	4650      	mov	r0, sl
 8004d66:	4659      	mov	r1, fp
 8004d68:	f7fb fa56 	bl	8000218 <__aeabi_uldivmod>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	460b      	mov	r3, r1
 8004d70:	4b0c      	ldr	r3, [pc, #48]	; (8004da4 <UART_SetConfig+0x3ac>)
 8004d72:	fba3 1302 	umull	r1, r3, r3, r2
 8004d76:	095b      	lsrs	r3, r3, #5
 8004d78:	2164      	movs	r1, #100	; 0x64
 8004d7a:	fb01 f303 	mul.w	r3, r1, r3
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	011b      	lsls	r3, r3, #4
 8004d82:	3332      	adds	r3, #50	; 0x32
 8004d84:	4a07      	ldr	r2, [pc, #28]	; (8004da4 <UART_SetConfig+0x3ac>)
 8004d86:	fba2 2303 	umull	r2, r3, r2, r3
 8004d8a:	095b      	lsrs	r3, r3, #5
 8004d8c:	f003 020f 	and.w	r2, r3, #15
 8004d90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4432      	add	r2, r6
 8004d96:	609a      	str	r2, [r3, #8]
}
 8004d98:	bf00      	nop
 8004d9a:	377c      	adds	r7, #124	; 0x7c
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004da2:	bf00      	nop
 8004da4:	51eb851f 	.word	0x51eb851f

08004da8 <__libc_init_array>:
 8004da8:	b570      	push	{r4, r5, r6, lr}
 8004daa:	4d0d      	ldr	r5, [pc, #52]	; (8004de0 <__libc_init_array+0x38>)
 8004dac:	4c0d      	ldr	r4, [pc, #52]	; (8004de4 <__libc_init_array+0x3c>)
 8004dae:	1b64      	subs	r4, r4, r5
 8004db0:	10a4      	asrs	r4, r4, #2
 8004db2:	2600      	movs	r6, #0
 8004db4:	42a6      	cmp	r6, r4
 8004db6:	d109      	bne.n	8004dcc <__libc_init_array+0x24>
 8004db8:	4d0b      	ldr	r5, [pc, #44]	; (8004de8 <__libc_init_array+0x40>)
 8004dba:	4c0c      	ldr	r4, [pc, #48]	; (8004dec <__libc_init_array+0x44>)
 8004dbc:	f000 f820 	bl	8004e00 <_init>
 8004dc0:	1b64      	subs	r4, r4, r5
 8004dc2:	10a4      	asrs	r4, r4, #2
 8004dc4:	2600      	movs	r6, #0
 8004dc6:	42a6      	cmp	r6, r4
 8004dc8:	d105      	bne.n	8004dd6 <__libc_init_array+0x2e>
 8004dca:	bd70      	pop	{r4, r5, r6, pc}
 8004dcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dd0:	4798      	blx	r3
 8004dd2:	3601      	adds	r6, #1
 8004dd4:	e7ee      	b.n	8004db4 <__libc_init_array+0xc>
 8004dd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dda:	4798      	blx	r3
 8004ddc:	3601      	adds	r6, #1
 8004dde:	e7f2      	b.n	8004dc6 <__libc_init_array+0x1e>
 8004de0:	08004ed0 	.word	0x08004ed0
 8004de4:	08004ed0 	.word	0x08004ed0
 8004de8:	08004ed0 	.word	0x08004ed0
 8004dec:	08004ed4 	.word	0x08004ed4

08004df0 <memset>:
 8004df0:	4402      	add	r2, r0
 8004df2:	4603      	mov	r3, r0
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d100      	bne.n	8004dfa <memset+0xa>
 8004df8:	4770      	bx	lr
 8004dfa:	f803 1b01 	strb.w	r1, [r3], #1
 8004dfe:	e7f9      	b.n	8004df4 <memset+0x4>

08004e00 <_init>:
 8004e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e02:	bf00      	nop
 8004e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e06:	bc08      	pop	{r3}
 8004e08:	469e      	mov	lr, r3
 8004e0a:	4770      	bx	lr

08004e0c <_fini>:
 8004e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e0e:	bf00      	nop
 8004e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e12:	bc08      	pop	{r3}
 8004e14:	469e      	mov	lr, r3
 8004e16:	4770      	bx	lr
